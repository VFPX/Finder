*--------------------------------------------------------------------------------------------------------------------------------------------------------
* (ES) AUTOGENERADO - ¡¡ATENCIÓN!! - ¡¡NO PENSADO PARA EJECUTAR!! USAR SOLAMENTE PARA INTEGRAR CAMBIOS Y ALMACENAR CON HERRAMIENTAS SCM!!
* (EN) AUTOGENERATED - ATTENTION!! - NOT INTENDED FOR EXECUTION!! USE ONLY FOR MERGING CHANGES AND STORING WITH SCM TOOLS!!
*--------------------------------------------------------------------------------------------------------------------------------------------------------
*< FOXBIN2PRG: Version="1.19" SourceFile="thor_proc_finder.vcx" /> (Solo para binarios VFP 9 / Only for VFP 9 binaries)
*
*
DEFINE CLASS basecontextmenu AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addfilters
		*m: addgofish
		*m: addtoremovefromproject
		*m: applyscctextx
		*m: createduplicateclass
		*m: createmenuitems
		*m: editsourcex
		*m: forceexclusive
		*m: getaliasfor
		*m: getclassesfromprg
		*m: getclassesfromvcx
		*m: openexclusive
		*m: processexclusive
		*m: processkeyword
		*m: run		&& Occurs when an Active Document is ready to execute your application code.
		*p: ladddescendants
		*p: ncolumnfiltercount
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	ladddescendants = .F.
	Name = "basecontextmenu"
	ncolumnfiltercount = 0
	_memberdata = <VFPData>
		<memberdata name="processkeyword" display="ProcessKeyword"/>
		<memberdata name="createmenuitems" display="CreateMenuItems"/>
		<memberdata name="openexclusive" display="OpenExclusive"/>
		<memberdata name="getaliasfor" display="GetAliasFor"/>
		<memberdata name="run" display="Run"/>
		<memberdata name="forceexclusive" display="ForceExclusive"/>
		<memberdata name="processexclusive" display="ProcessExclusive"/>
		<memberdata name="addtoremovefromproject" display="AddToRemoveFromProject"/>
		<memberdata name="getclassesfromvcx" display="GetClassesFromVCX"/>
		<memberdata name="applyscctextx" display="ApplySCCTextX"/>
		<memberdata name="addfilters" display="AddFilters"/>
		<memberdata name="ncolumnfiltercount" display="nColumnFilterCount"/>
		<memberdata name="editsourcex" display="EditSourceX"/>
		<memberdata name="addgofish" display="AddGoFish"/>
		<memberdata name="gofishing" display="GoFishing"/>
		<memberdata name="ladddescendants" display="lAddDescendants"/>
		<memberdata name="createduplicateclass" display="CreateDuplicateClass"/>
		<memberdata name="getclassesfromprg" display="GetClassesFromPRG"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE addfilters
		Lparameters loGrid, loContextMenu
		
		Local laColumns[1], lcCaption, lcFilter, lnCount, lnI, loColumn
		lnCount = 0
		
		For lnI = 1 To loGrid.ColumnCount
			loColumn = loGrid.Columns[lnI]
			If loColumn.Visible And Pemstatus(loColumn, 'cFilter', 5)
				lnCount = lnCount + 1
				Dimension laColumns[lnCount, 2]
				laColumns[lnCount, 1] = loColumn.ColumnOrder
				laColumns[lnCount, 2] = loColumn.cFilter
			Endif
		Endfor
		
		Asort(laColumns, 1, -1, 0)
		loContextMenu.AddSubMenu('\<Filter on')
		For lnI = 1 To lnCount
			lcFilter  = laColumns[lnI, 2]
			lcCaption = Getwordnum(lcFilter, 1, '|')
			If 'Location' $ lcCaption
				lcCaption = Strtran(lcCaption, 'Location', '\<Location')
			Else
				lcCaption = '\<' + lcCaption
			Endif
			loContextMenu.AddMenuItem(lcCaption, , , , 'Filter', lcFilter)
		Endfor
		
		If Not Empty(This.nColumnFilterCount)
			loContextMenu.AddMenuItem()
			loContextMenu.AddMenuItem('\<Remove Filter', , , , 'Remove Filter')
		Endif
		
		loContextMenu.EndSubMenu()
		
	ENDPROC

	PROCEDURE addgofish
		Lparameters loContextMenu
		
		If Empty(Execscript(_Screen.cThorDispatcher, 'Full Path=Thor_Tool_GoFish4'))		;
				And Empty(Execscript(_Screen.cThorDispatcher, 'Full Path=Thor_Tool_GoFish4_Beta'))
			Return
		Endif
		
		loContextMenu.AddMenuItem('\<Look up Reference (GoFish)',,,,'GoFish')
		
		
	ENDPROC

	PROCEDURE addtoremovefromproject
		Lparameters loContextMenu, lcFileName, lcExt
		
		Local laFiles[1], laProject, lcProject, lcProjectName, loProject
		If _vfp.Projects.Count # 0
			If Not (' ' + lcExt + ' ') $ ' BAK CDX DCT DCX ERR FPT FRT FXP MNT MPR MPX PJT SCT TBK VCT '
				If _vfp.Projects.Count # 0
					loContextMenu.AddMenuItem()
					For Each loProject In _vfp.Projects FoxObject
						lcProjectName = Justfname(loProject.Name)
						If Type([loProject.Files.Item(lcFileName)]) = 'O'
							loContextMenu.AddMenuItem('Remove from ' + lcProjectName, , , , 'Remove from project', loProject)
						Else
							loContextMenu.AddMenuItem('Add to ' + lcProjectName, , , , 'Add to project', loProject)
						Endif
					Endfor
				Endif && _Vfp.Projects.Count # 0
			Endif
		Endif
		
		
	ENDPROC

	PROCEDURE applyscctextx
		Lparameters loContextMenu, lcFileName, lcExt
		
		Local lcFName, lcQuote, lcType
		lcExt = Upper(m.lcExt)
		Do Case
			Case m.lcExt = 'DBC'
				lcType = 'd'
			Case m.lcExt = 'DBF'
				lcType = 'D'
			Case m.lcExt = 'SCX'
				lcType = 'K'
			Case m.lcExt = 'LBX'
				lcType = 'B'
			Case m.lcExt = 'MNX'
				lcType = 'M'
			Case m.lcExt = 'FRX'
				lcType = 'R'
			Case m.lcExt = 'VCX'
				lcType = 'V'
			Otherwise
				lcType = '?'
		Endcase
		
		If m.lcType # '?'
			lcFName = Juststem(m.lcFileName)
			If (' ' $ m.lcFName)
				lcQuote = [']
			Else
				lcQuote = ''
			Endif
		
			m.loContextMenu.AddMenuItem('Create ' +										;
				  m.lcQuote + m.lcFName + '.' + Left(m.lcExt, 2) + 'A' + m.lcQuote		;
				  + ' using SCCTextX', , , , 'SCCTEXTX + ' + m.lcExt)
		Endif
		
		
	ENDPROC

	PROCEDURE createduplicateclass
		Lparameters lcSourceClass, lcSourceVCX
		
		#Define CR Chr[13]
		
		Local loTools As Pemeditor_tools Of 'c:\visual foxpro\programs\MyThor\thor\tools\apps\pem editor\source\peme_tools.vcx'
		Local lcBodyMarkup, lcNewClass, lcTempVCX, llEditClass, llFailed, loException, loForm
		* tools home page = http://vfpx.codeplex.com/wikipage?title=thor%20tools%20object
		
		Private pcNewClass
		pcNewClass = ''
		
		loForm		  = Execscript(_Screen.cThorDispatcher, 'Class= DynamicFormDeskTop')
		
		With loForm
			.Caption	 = 'Create duplicate class'
			.MinButton	 = .F.
			.MaxButton	 = .F.
			.MinHeight	 = 100
			.BorderStyle = 2
		
			.cHeading			= 'Create duplicate of ' + lcSourceClass
			.cSaveButtonCaption	= 'Create'
		Endwith
		
		Text To lcBodyMarkup Noshow Textmerge
			pcNewClass 	.class 				= 'TextBox'
						.caption			= 'New class:'
						.Width				= 200
						|
						.class 				= 'DF_ResultButton'
						.caption			= 'Create and open for editing'
						.Autosize			= .T.
		Endtext
		
		loForm.cBodyMarkup = lcBodyMarkup
		loForm.Show(1)
		
		Do Case
			Case Vartype(loForm) # 'O'
				Return .F. && Cancel
			Case Lower(loForm.cReturn) = 'cancel'
				Return .F. && Cancel
			Otherwise
				llEditClass = 'edit' $ Lower(loForm.cReturn)
		Endcase
		
		* --------------------------------------------------------------------------------
		lcNewClass = Lower(Alltrim(pcNewClass))
		llFailed   = .F.
		lcTempVCX  = Addbs(Sys(2023)) + 'Temp' + Forceext(Sys(2015), 'VCX')
		
		* --------------------------------------------------------------------------------
		Try
			Add Class(lcSourceClass) Of(lcSourceVCX) To(lcTempVCX)
		Catch To loException
			llFailed   = .T.
			Messagebox('Unable to make copy of ' + lcSourceClass + CR + CR + loException.Message, 16, 'Failed')
		Endtry
		
		If llFailed
			Return .F.
		Endif
		
		* --------------------------------------------------------------------------------
		Try
			Rename Class(lcSourceClass) Of(lcTempVCX) To &lcNewClass
		Catch To loException
			llFailed   = .T.
			Messagebox('Unable to rename copy to ' + lcNewClass + CR + CR + loException.Message, 16, 'Failed')
		Endtry
		
		If llFailed
			Return .F.
		Endif
		
		* --------------------------------------------------------------------------------
		Try
			Add Class(lcNewClass) Of(lcTempVCX) To(lcSourceVCX)
		Catch To loException
			llFailed   = .T.
			Messagebox('Unable to save ' + lcNewClass + ' into ' + Justfname(lcSourceVCX) + CR + CR + loException.Message, 16, 'Failed')
		Endtry
		
		If llFailed
			Return .F.
		Endif
		
		* --------------------------------------------------------------------------------
		If llEditClass
			loTools = Execscript(_Screen.cThorDispatcher, 'Class= tools from pemeditor')
			loTools.EditSourceX(lcSourceVCX, lcNewClass)
		Else
			Messagebox('Class ' + lcNewClass + ' created in ' + Justfname(lcSourceVCX), 64, 'New class created')
		Endif
		
		Return .T.
	ENDPROC

	PROCEDURE createmenuitems
		Lparameters loGrid, loContextMenu, lcFileName, lcEXT, lcClass
		
		This.AddGoFish(loContextMenu)
		This.ApplySCCTextX(loContextMenu, lcFileName, lcEXT)
		
		Execscript(_Screen.cThorDispatcher, 'Thor_Proc_FinderContextMenu', m.loContextMenu, m.lcFileName, m.lcClass)
		
		This.AddToRemoveFromProject(loContextMenu, lcFileName, lcEXT)
		
		loContextMenu.AddMenuItem()
		
		loContextMenu.AddMenuItem('Open folder in \<Explorer', , , , 'Open Folder')
		loContextMenu.AddMenuItem('\<CD to this folder', , , , 'CD')
		loContextMenu.AddMenuItem('Set scope to this folder', , , , 'Set scope to this folder')
		
		loContextMenu.AddMenuItem()
		
		This.AddFilters(loGrid, loContextMenu)
		
	ENDPROC

	PROCEDURE editsourcex
		Lparameters lcFileName, lcClass, lcMethod, lnStartRange, lnEndRange
		
		* tools home page = http://vfpx.codeplex.com/wikipage?title=thor%20tools%20object
		Local loTools as Pemeditor_tools of "c:\visual foxpro\programs\MyThor\thor\tools\apps\pem editor\source\peme_tools.vcx"
		loTools = ExecScript(_Screen.cThorDispatcher, "Class= tools from pemeditor")
		
		loTools.EditSourceX(lcFileName, lcClass, lcMethod, lnStartRange, lnEndRange)
		If Vartype(lnStartRange) = 'N' And 'PRG' = Upper(Justext(lcFileName))
			Execscript(_Screen.cThorDispatcher, 'Thor_Proc_SelectText', lnStartRange, lnEndRange)
		Endif
		
		Return .T.
		
	ENDPROC

	PROCEDURE forceexclusive
		Lparameters lcAlias
		Local lcDBF, llExclusive, lnMsgBoxAns
		Select (lcAlias)
		
		llExclusive = Isexclusive()
		If Not llExclusive
			lnMsgBoxAns = Messagebox ('Open exclusively?', 36, 'Open Exclusive', 0)
			If lnMsgBoxAns = 6
				lcDBF = Dbf()
				Try
					Use (lcDBF) Exclusive 
					llExclusive = .T.
				Catch to loException
					Use (lcDBF) Shared Again Alias (lcAlias)
					llExclusive = .F.
					Messagebox(loException.Message, 16, 'No exclusive access')
				Endtry
			Endif
		Endif
		
		Return llExclusive
		
	ENDPROC

	PROCEDURE getaliasfor
		Lparameters lcFileName
		
		Local lcAlias, lcChars, lcNewName, lcToBeReplaced
		lcAlias = Upper(Juststem(lcFileName))
		
		lcChars		   = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789'
		lcToBeReplaced = Chrtran(lcAlias, lcChars, '')
		Return Chrtran(lcAlias, lcToBeReplaced, Replicate('_', Len(lcToBeReplaced)))
		
	ENDPROC

	PROCEDURE getclassesfromprg
		Lparameters lcFileName
		
		Local loClasses As 'Collection'
		Local lcClassLibrary, loClassSearchEngine, loRow, loSearchEngine
		
		loClasses = Createobject('Collection')
		
		lcClassLibrary			  = This.ClassLibrary
		loSearchEngine			  = Newobject('ClassFinderEngine', lcClassLibrary)
		loSearchEngine.cDestAlias = 'crsr_PRGClasses'
		loSearchEngine.cLookForClass = ''
		
		loSearchEngine.CreateResultsCursor('crsr_PRGClasses')
		loSearchEngine.FileSearch(lcFileName)
		
		Select crsr_PRGClasses
		Index on Upper(Class) tag Class
		Scan
			Scatter Name loRow
			loClasses.Add(loRow)
		Endscan
		
		Return loClasses
	ENDPROC

	PROCEDURE getclassesfromvcx
		Lparameters tcFileName
		
		Local loClasses As 'Collection'
		Local laClasses[1], lcFileName, lnI
		
		loClasses  = Createobject('Collection')
		lcFileName = Forceext(tcFileName, 'VCX')
		
		Use In (Select ('_Temp_VCX')) && Close '_Temp_VCX'
		Try
			Use (lcFileName) Again Shared Alias _Temp_VCX In 0
			Select  Distinct Padr(objname, 60)    As  Class			;
				Where reserved1 = 'Class'							;
				From _Temp_VCX										;
				Into Array laClasses
			For lnI = 1 To _Tally
				loClasses.Add(laClasses[lnI])
			Endfor
		Catch to loException
		
		Endtry
		
		Use In (Select ('_Temp_VCX')) && Close '_Temp_VCX'
		Return loClasses
	ENDPROC

	PROCEDURE Init
		Set DataSession To 1
		
	ENDPROC

	PROCEDURE openexclusive
		Lparameters lcFileName
		
		Local llSuccess, loException
		
		Select 0
		Try
			Use(lcFileName) Exclusive
			llSuccess = .T.
		Catch To loException
			Messagebox(loException.Message, 16, 'No exclusive access')
			llSuccess = .F.
		Endtry
		
		Return llSuccess
	ENDPROC

	PROCEDURE processexclusive
		Lparameters lcFileName, lcAlias, llInuse, lcCommand, llNotify
		
		Local llSuccess, lnSelect, loException
		lnSelect  = Select()
		llSuccess = .F.
		Do Case
			Case llInuse
				If This.ForceExclusive(lcAlias)
					Try
						&lcCommand
						llSuccess = .T.
					Catch To loException
						Messagebox(loException.Message, 16, 'No exclusive access')
						llSuccess = .F.
					Endtry
				Endif
			Case This.OpenExclusive(lcFileName)
				&lcCommand
				Use
				llSuccess = .T.
		Endcase
		If llSuccess And llNotify
			Messagebox(lcCommand + ' ' + Justfname(lcFileName) + ' :: Complete', 64, lcCommand)
		Endif
		Select(lnSelect)
		
		Return llSuccess
		
	ENDPROC

	PROCEDURE processkeyword
		Lparameters lcKeyWord, lcParameter, loRecord
		
		Local loEditorWin As Editorwin Of 'c:\visual foxpro\programs\MyThor\thor\tools\apps\pem editor\source\peme_editorwin.vcx'
		Local lcAlias, lcClass, lcField, lcFileName, lcFolder, lcFullName, lcHackCX, lcPrompt, lcResult
		Local llInUse, llSuccess, lnSelect, loException
		
		lcResult = lcKeyWord
		If 'O' = Vartype(loRecord)
			lcFileName = Trim(loRecord.FullName)
			lcFolder   = Trim(loRecord.Folder)
		
			lcAlias	= This.GetAliasFor(lcFileName)
			llInUse	= Used(lcAlias) And Upper(Dbf(lcAlias)) == Upper(lcFileName)
		Endif && 'O' = Vartype(loRecord)
		
		Do Case
		
			Case lcKeyWord = 'EditSourceX'
				If Getwordcount(lcKeyWord) = 2
					lcFileName = Forceext(lcFileName, Getwordnum(lcKeyWord, 2))
				Endif
				This.EditSourceX(lcFileName)
		
			Case lcKeyWord = 'Open DBF'
				If llInUse
					Execscript(_Screen.cThorDispatcher, 'Thor_Proc_SuperBrowse', lcAlias)
				Else
					This.EditSourceX(lcFileName)
				Endif
		
			Case lcKeyWord = 'Open w/o Browse'
				If llInUse
					Messagebox('Already in use -- SELECTing')
					Select(lcAlias)
				Else
					Try
						Use(lcFileName) Shared Again In 0
					Catch To loException
						Messagebox(loException.Message, 16, 'Unable to open')
						lcResult = ''
					Endtry
				Endif && llInUse
		
			Case lcKeyWord = 'Open with Alias'
				lcAlias = Inputbox('Alias', 'Alias', lcAlias)
				If Not Empty(lcAlias)
					Try
						Use(lcFileName) Shared Again In 0 Alias(lcAlias)
					Catch To loException
						Messagebox(loException.Message, 16, 'Unable to open')
						lcResult = ''
					Endtry
				Endif
		
			Case lcKeyWord = 'Run PRG'
				Do(lcFileName)
		
			Case lcKeyWord = 'HackCX'
				If Getwordcount(lcKeyWord) = 2
					lcFileName = Forceext(lcFileName, Getwordnum(lcKeyWord, 2))
				Endif
				lcHackCX = Execscript(_Screen.cThorDispatcher, 'Thor_Proc_GetHackCX')
				Execscript(_Screen.cThorDispatcher, lcHackCX, lcFileName)
		
			Case lcKeyWord = 'NewObject'
				* editorwin home page = http://vfpx.codeplex.com/wikipage?title=thor%20editorwindow%20object
				loEditorWin = Execscript(_Screen.cThorDispatcher, 'Class= editorwin from pemeditor')
				loEditorWin.FindLastWindow()
				loEditorWin.Paste(Textmerge('NewObject("<<Trim(loRecord.Class)>>", "<<Trim(loRecord.FileName)>>")'))
		
			Case lcKeyWord = 'Open Class'
				lcClass	   = Getwordnum(lcKeyWord, 3)
				lcFileName = Forceext(lcFileName, 'VCX')
				This.EditSourceX(lcFileName, lcClass)
		
			Case lcKeyWord = 'Run Form'
				Do Form(Forceext(lcFileName, 'SCX'))
		
			Case lcKeyWord = 'Run FRX'
				If Getwordcount(lcKeyWord) = 2
					lcFileName = Forceext(lcFileName, Getwordnum(lcKeyWord, 2))
				Endif
				Report Form(Forceext(lcFileName, 'SCX'))
		
			Case lcKeyWord = 'Pack'
				If Getwordcount(lcKeyWord) = 2
					lcFileName = Forceext(lcFileName, Getwordnum(lcKeyWord, 2))
				Endif
		
				If Not This.ProcessExclusive(lcFileName, lcAlias, llInUse, 'Pack', .T.)
					lcResult = ''
				Endif
		
			Case lcKeyWord = 'ReIndex'
				lcFileName = Forceext(lcFileName, 'DBF')
				If Not This.ProcessExclusive(lcFileName, lcAlias, llInUse, 'ReIndex', .T.)
					lcResult = ''
				Endif
		
			Case lcKeyWord = 'Modify Structure'
				lcFileName = Forceext(lcFileName, 'DBF')
				If Not This.ProcessExclusive(lcFileName, lcAlias, llInUse, 'Modify Structure')
					lcResult = ''
				Endif
		
			Case lcKeyWord = 'Add to project'
				loProject = lcParameter
				loProject.Files.Add(lcFileName)
				lcResult = ''
		
			Case lcKeyWord = 'Remove from project'
				loProject = lcParameter
				loProject.Files(lcFileName).Remove()
				lcResult = ''
		
			Case lcKeyWord = 'Open Folder'
				Execscript(_Screen.cThorDispatcher, 'Thor_Proc_OpenExplorer', lcFileName)
				lcResult = ''
		
			Case lcKeyWord = 'CD'
				Chdir(lcFolder)
				Messagebox('Current directory is now: ' + Chr(13) + Chr(13) + Curdir(), 64, 'Current Directory changed')
				lcResult = ''
		
			Case lcKeyWord = 'SCCTEXTX'
				Execscript(_Screen.cThorDispatcher, 'Thor_Proc_SCCTextX', lcFileName)
		
			Case lcKeyWord = 'Filter'
				lcResult = lcResult + '|' + lcParameter
		
			Case lcKeyWord = 'Remove Filter'
				lcResult = 'Remove Filter'
		
			Case lcKeyWord = 'Edit PRGClass'
				This.EditSourceX(lcFileName, '', '', loRecord.StartRange, loRecord.EndRange)
		
			Case lcKeyWord = 'Modify PRG Class'
				This.EditSourceX(Trim(lcParameter.FullName), '', '', lcParameter.StartRange, lcParameter.EndRange)
		
			Case lcKeyWord = 'GoFish'
				lcResult = 'GoFish'
		
			Case lcKeyWord = 'Create Subclass'
				lcResult   = 'Create Subclass'
				lcFullName = Trim(loRecord.FullName)
				lcClass	   = Trim(loRecord.Class)
				Create Class ? Of(lcFullName) As(lcClass) From(lcFullName) Nowait
		
			Case lcKeyWord = 'Create duplicate class'
				If This.CreateDuplicateClass(Trim(loRecord.Class), Trim(loRecord.FullName))
					lcResult = 'Create duplicate class'
				Else
					lcResult = 'Error' && Thus, Finder form will not close
				Endif
		
		Endcase
		
		Return lcResult
		
		
	ENDPROC

	PROCEDURE run		&& Occurs when an Active Document is ready to execute your application code.
		Lparameters loGrid, loRecord, lnColumnFilterCount, llDescendants
		
		* ContextMenu home page = http://vfpx.codeplex.com/wikipage?title=Thor%20Framework%20ContextMenu
		Local loContextMenu As ContextMenu Of 'C:\VISUAL FOXPRO\PROGRAMS\MyThor\Thor\Source\Thor_Menu.vcx'
		Local lcResult
		
		This.nColumnFilterCount	= lnColumnFilterCount
		This.lAddDescendants    = llDescendants
		
		loContextMenu			= Execscript(_Screen.cThorDispatcher, 'Class= ContextMenu')
		This.CreateMenuItems(loGrid, loContextMenu, loRecord)
		
		* --------------------------------------------------------------------------------
		If loContextMenu.Activate()
			lcResult = This.ProcessKeyword(loContextMenu.Keyword, loContextMenu.Parameters, loRecord)
		Else
			lcResult = ''
		Endif && loContextMenu.Activate()
		
		Return lcResult
		
	ENDPROC

ENDDEFINE

DEFINE CLASS baseform AS form 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: editsourcefile
		*m: getallsettings
		*m: getcolumnfilters
		*m: getrelativepath
		*m: lockwindow
		*m: refreshresults
		*m: savedraginfo
		*m: selectresults
		*m: setcolumnfilter
		*m: setcolumnfilters
		*m: setsortorder
		*p: ccolumnfilter
		*p: ccolumnfilters
		*p: ccolumninfo
		*p: chomedir
		*p: cpanelfilter
		*p: csortorder
		*p: ladddescendants
		*p: lformaddobject
		*p: lsearchclass
		*p: ncolumnfiltercount
		*p: ndockable
		*p: osettings
		*p: otools
		*a: acolumnfilters[1,0]
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Caption = "Form"
	ccolumnfilter = 
	ccolumnfilters = 
	ccolumninfo = 
	chomedir = 
	cpanelfilter = 
	csortorder = |COLFILENAME|
	DoCreate = .T.
	ladddescendants = .F.
	Left = 0
	lformaddobject = .F.
	lsearchclass = .F.
	Name = "baseform"
	ncolumnfiltercount = 0
	ndockable = 1
	osettings = .NULL.
	otools = .NULL.
	Top = 0
	_memberdata = <VFPData>
		<memberdata name="lockwindow" display="LockWindow"/>
		<memberdata name="savedraginfo" display="SaveDragInfo"/>
		<memberdata name="chomedir" display="cHomeDir"/>
		<memberdata name="lsearchclass" display="lSearchClass"/>
		<memberdata name="getrelativepath" display="GetRelativePath"/>
		<memberdata name="setsortorder" display="SetSortOrder"/>
		<memberdata name="csortorder" display="cSortOrder"/>
		<memberdata name="refreshresults" display="RefreshResults"/>
		<memberdata name="selectresults" display="SelectResults"/>
		<memberdata name="ccolumnfilter" display="cColumnFilter"/>
		<memberdata name="getcolumnfilters" display="GetColumnFilters"/>
		<memberdata name="setcolumnfilter" display="SetColumnFilter"/>
		<memberdata name="setcolumnfilters" display="SetColumnFilters"/>
		<memberdata name="acolumnfilters" display="aColumnFilters"/>
		<memberdata name="ccolumnfilters" display="cColumnFilters"/>
		<memberdata name="ncolumnfiltercount" display="nColumnFilterCount"/>
		<memberdata name="getallsettings" display="GetAllSettings"/>
		<memberdata name="osettings" display="oSettings"/>
		<memberdata name="otools" display="oTools"/>
		<memberdata name="ccolumninfo" display="cColumnInfo"/>
		<memberdata name="ndockable" display="nDockable"/>
		<memberdata name="lformaddobject" display="lFormAddObject"/>
		<memberdata name="ladddescendants" display="lAddDescendants"/>
		<memberdata name="cpanelfilter" display="cPanelFilter"/>
		<memberdata name="editsourcefile" display="EditSourceFile"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE editsourcefile
		Lparameters lcFileName, lcClass, lcMethod, lnStartRange, lnEndRange
		
		Local lcVCXName, loFileContextMenu
		lcVCXName = This.ClassLibrary
		
		loFileContextMenu = Execscript(_Screen.cThorDispatcher, 'Thor_Proc_NewSessionObject', 'basecontextmenu', lcVCXName)
		loFileContextMenu.EditSourceX(lcFileName, lcClass, lcMethod, lnStartRange, lnEndRange)
		
	ENDPROC

	PROCEDURE getallsettings
	ENDPROC

	PROCEDURE getcolumnfilters
		#Define CRLF Chr[13]+ Chr[10]
		
		Local lcColumnFilters, lnI
		lcColumnFilters = ''
		For lnI = 1 To This.nColumnFilterCount
			lcColumnFilters = lcColumnFilters +				;
				This.Acolumnfilters[lnI, 1] + CRLF +		;
				This.Acolumnfilters[lnI, 2] + CRLF +		;
				This.Acolumnfilters[lnI, 3] + CRLF
		Endfor
		
		Return lcColumnFilters
		
	ENDPROC

	PROCEDURE getrelativepath
		Lparameters tcFileName, lcFolder
		
		Local lcFileName, lcRelative, lcRelativeName
		lcFileName = Trim(tcFileName)
		lcRelative = Sys(2014, lcFileName, lcFolder)
		
		Do Case
			Case lcRelative = '..\..\..\'
				Return lcFileName
		
			Case Occurs('\', lcRelative) >= Occurs('\', lcFileName)
				Return lcFileName
		
			Case lcRelative = '..\..\'
				Return '..\..\' + Substr(lcFileName, Len(lcFileName) - Len(lcRelative) + 7)
		
			Case lcRelative = '..\'
				Return '..\' + Substr(lcFileName, Len(lcFileName) - Len(lcRelative) + 4)
		
			Otherwise
				Return Substr(lcFileName, Len(lcFileName) - Len(lcRelative) + 1)
		
		Endcase
		
		
	ENDPROC

	PROCEDURE lockwindow
		* From Doug Hennig's Win32API session at SW Fox 2012
		
		Lparameters tlLock,			;
			tnHWnd
		Local lnHWnd
		Declare Integer LockWindowUpdate In Win32API		;
			Integer nHandle
		Do Case
			Case Not tlLock
				lnHWnd = 0
			Case Pcount() = 1
				Declare Integer GetDesktopWindow In Win32API
				lnHWnd = GetDesktopWindow()
			Otherwise
				lnHWnd = tnHWnd
		Endcase
		LockWindowUpdate(lnHWnd)
		Return
	ENDPROC

	PROCEDURE refreshresults
		*** JRN 2010-03-26 : get our results
		Local lcSafety
		
		If Used('crsr_Results')
		
			This.SelectResults('crsr_Temp')
		
			lcSafety = Set('Safety')
			Set Safety Off
		
			Select crsr_Results
			Delete Tag All
			Set Filter To
			Zap
			Append From(Dbf('crsr_Temp'))
			Set Safety &lcSafety
		
		Else
		
			This.SelectResults('crsr_Results')
			
		Endif
		
		Goto top 
		This.Refresh()
		
		
	ENDPROC

	PROCEDURE savedraginfo
		Local lcBaseClass, lcClass, lcFile, lcPath
		
		With This
			If .lSearchClass																;
					And Used ('crsr_Results')												;
					And Between (Recno ('crsr_Results'), 1, Reccount ('crsr_Results'))		;
					And Not Empty(crsr_Results.BaseClass)
		
				lcClass				  = Alltrim (crsr_Results.Class)
				lcBaseClass			  = Alltrim (crsr_Results.BaseClass)
				.oDragDrop.cClass	  = lcClass
				.oDragDrop.cBaseClass = lcBaseClass
				.oDragDrop.cFileName  = Alltrim (crsr_Results.FullName)
		
				Text to .cmdClassIcon.ToolTipText Noshow TextMerge
		Drag class '<<lcClass>>' to drop onto your form or class.
		
		You can also press the Shift or Ctrl key and drag a row directly from the grid.
		
		If PEM.Editor is open, you can drop this class onto the PEM Editor form and the class will be added as a child of the current object if possible, else as a sibling.
				EndText
				lcPath = Justpath(Justpath(.ClassLibrary)) + '\images\'
				lcFile = lcPath + Evl (lcBaseClass, '') + '.bmp'
				If File (lcFile)
					.imgClassIcon.Picture = lcFile
				Else
					* ?lcFile
				Endif
			Else
				.oDragDrop.cClass		  = ''
				.oDragDrop.cBaseClass	  = ''
				.oDragDrop.cFileName	  = ''
				.cmdClassIcon.ToolTipText = ''
			Endif
		
			.cmdClassIcon.Refresh()
		
		Endwith
		
		
		
	ENDPROC

	PROCEDURE selectresults
		Lparameters lcCursorName
		
		Local laSortFields[1], lcExtraFields, lcField, lcPanelFilter, lcSelection, lcSortField, lcSortFields
		Local llReverse, lnLineCount
		
		*** JRN 2010-03-26 : determine the fields to sort on
		lcSortFields  = ''
		lcExtraFields = ''
		lnLineCount	  = Alines(laSortFields, Upper(This.cSortOrder), .T., '|')
		
		For Each m.lcField In m.laSortFields
			lcSortField	= Getwordnum(m.lcField, 1)
			llReverse	= Not Empty(Getwordnum(m.lcField, 2))
			Do Case
				Case m.lcSortField == 'COLCLASS'
					lcSortFields  = m.lcSortFields + ', sortclass' + Iif(m.llReverse, ' Desc', '')
					lcExtraFields = m.lcExtraFields + ', Upper (class) as sortclass'
				Case m.lcSortField == 'COLFILENAME'
					lcSortFields  = m.lcSortFields + ', sortfname'  + Iif(m.llReverse, ' Desc', '')
					lcExtraFields = m.lcExtraFields + ', Upper (FileName) as sortfname'
				Case m.lcSortField == 'COLFOLDER'
					lcSortFields  = m.lcSortFields + ', sortfolder'  + Iif(m.llReverse, ' Desc', '')
					lcExtraFields = m.lcExtraFields + ', Upper (Folder) as sortfolder'
				Case m.lcSortField == 'COLPARENTCLASS'
					lcSortFields  = m.lcSortFields + ', sortparent'  + Iif(m.llReverse, ' Desc', '')
					lcExtraFields = m.lcExtraFields + ', Upper (Parent) as sortparent'
				Case m.lcSortField == 'COLCLASSLOC'
					lcSortFields  = m.lcSortFields + ', sortparloc' + Iif(m.llReverse, ' Desc', '')
					lcExtraFields = m.lcExtraFields + ', Upper (ClassLoc) as sortparloc'
				Case m.lcSortField == 'COLBASECLASS'
					lcSortFields  = m.lcSortFields + ', sortbase' + Iif(m.llReverse, ' Desc', '')
					lcExtraFields = m.lcExtraFields + ', Upper (BaseClass) as sortbase'
				Case m.lcSortField == 'COLTIMESTAMP'
					lcSortFields = m.lcSortFields + ', timestamp' + Iif(m.llReverse, '', ' Desc')
				Case m.lcSortField == 'COLSIZE'
					lcSortFields = m.lcSortFields + ', size' + Iif(m.llReverse, '', ' Desc')
				Case m.lcSortField == 'COLEXT'
					lcSortFields  = m.lcSortFields + ', sortext' + Iif(m.llReverse, ' Desc', '')
					lcExtraFields = m.lcExtraFields + ', Upper (JustExt(FileName)) as sortext'
			Endcase
		Endfor
		
		lcSortFields = Substr(m.lcSortFields, 2)
		Do Case
			Case Vartype(Thisform.oPanelProperties) # 'O'
				lcPanelFilter = This.cPanelFilter
			Case Thisform.oPanelProperties.lUsePanel
				lcPanelFilter = Thisform.oPanelProperties.cPanelFilter
			Otherwise
				lcPanelFilter = ''
		Endcase
		
		Do Case
			Case Empty(Thisform.cColumnFilter) And Empty(m.lcPanelFilter)
				lcSelection = ''
			Case Empty(Thisform.cColumnFilter)
				lcSelection = 'Where ' + m.lcPanelFilter
			Case Empty(m.lcPanelFilter)
				lcSelection = 'Where ' + Thisform.cColumnFilter
			Otherwise
				lcSelection = 'Where ' + m.lcPanelFilter + ' and '  + Thisform.cColumnFilter
		Endcase
		
		If Empty(m.lcSortFields)
			lcSortFields = 'FileName'
		Endif
		
		Select  *							;
				&lcExtraFields				;
			From crsr_SearchResults			;
				&lcSelection				;
			Order By &lcSortFields			;
			Into Cursor(m.lcCursorName) Readwrite
		
	ENDPROC

	PROCEDURE setcolumnfilter
		Lparameters lcPrompt, lcField
		
		Private paSelectFilter, pcFilter, pnOption
		Local lcBodyMarkup, lcColumnFilter, lcFilter, lcMoreMarkup, lnColumnFilterCount, lnI, loForm
		
		loForm		  = Execscript(_Screen.cThorDispatcher, 'Class= DynamicFormDeskTop')
		
		With loForm
			.Caption	 = 'Set Filter'
			.MinButton	 = .F.
			.MaxButton	 = .F.
			.MinHeight	 = 100
			.BorderStyle = 2
		
			.cHeading			= 'Filter on ' + lcPrompt
			.cSaveButtonCaption	= 'Apply'
		Endwith
		
		pcFilter = ''
		
		Text To lcBodyMarkup Noshow Textmerge
			pcFilter 	.class 				= 'TextBox'
						.caption			= 'Filter:'
						.Width				= 200
		Endtext
		
		lnColumnFilterCount = Thisform.nColumnFilterCount
		
		If lnColumnFilterCount # 0
			Dimension paSelectFilter[lnColumnFilterCount]
			paSelectFilter = .T.
			For lnI = 1 To lnColumnFilterCount
				Text To lcMoreMarkup Noshow Textmerge
			| paSelectFilter[<<lnI>>]
						.caption	= '"<<Trim(Thisform.aColumnFilters[lnI, 3])>>" $ <<Thisform.aColumnFilters[lnI, 2]>>  '
						.width		= 200
				Endtext
				lcBodyMarkup = lcBodyMarkup + lcMoreMarkup
			Endfor
			Text To lcMoreMarkup Noshow Textmerge
			|
						.class 				= 'DF_ResultButton'
						.caption			= 'Remove filter'
			Endtext
			lcBodyMarkup = lcBodyMarkup + lcMoreMarkup
		Endif
		
		loForm.cBodyMarkup = lcBodyMarkup
		loForm.Show(1, Thisform)
		
		******************************************************
		
		lcFilter = '*' + Lower(Trim(pcFilter)) + '*'
		lcFilter = 'Like("' + lcFilter + '", Lower(' + lcField  + '))'
		
		Do Case
			Case Vartype(loForm) # 'O'
				Return && Cancel
			Case Lower(loForm.cReturn) = 'cancel'
				Return && Cancel
			Case Lower(loForm.cReturn) = 'remove filter'
				lnColumnFilterCount = 0
			Otherwise
				For lnI = lnColumnFilterCount To 1 Step - 1
					If Not paSelectFilter[lnI]
						Adel(Thisform.aColumnFilters, lnI)
						lnColumnFilterCount = lnColumnFilterCount - 1
					Endif
				Endfor
				If Not Empty(pcFilter)
					lnColumnFilterCount = lnColumnFilterCount + 1
					Dimension Thisform.aColumnFilters[lnColumnFilterCount, 3]
					Thisform.aColumnFilters[lnColumnFilterCount, 1]	= lcFilter
					Thisform.aColumnFilters[lnColumnFilterCount, 2]	= lcPrompt
					Thisform.aColumnFilters[lnColumnFilterCount, 3]	= pcFilter
				Endif
		Endcase
		
		lcColumnFilter = Iif(lnColumnFilterCount = 0, '', Thisform.aColumnFilters[1, 1])
		For lnI = 2 To lnColumnFilterCount
			lcColumnFilter = lcColumnFilter + ' and ' + Thisform.aColumnFilters[lnI, 1]
		Endfor
		
		Thisform.nColumnFilterCount	= lnColumnFilterCount
		Thisform.cColumnFilter		= lcColumnFilter
		Thisform.RefreshResults()
		
	ENDPROC

	PROCEDURE setcolumnfilters
		Lparameters lcColumnFilters
		
		Local lcColumnFilters, lnCount, lnI
		If Empty(lcColumnFilters)
			Return
		Endif
		
		lnCount = Alines(Thisform.aColumnFilters, lcColumnFilters, 5)
		Dimension This.aColumnFilters[lnCount / 3, 3]
		
	ENDPROC

	PROCEDURE setsortorder
		Lparameters lcColumnName
		
		Local lcNormal, lcReverse, lnPos
		lcColumnName = Upper(m.lcColumnName)
		lcNormal	 = '|' + m.lcColumnName + '|'
		lcReverse	 = '|' + m.lcColumnName + ' DESC|'
		
		With This
			Do Case
				Case .cSortOrder = m.lcNormal
					.cSortOrder	= Strtran(.cSortOrder, m.lcNormal, '|')
					.cSortOrder	= m.lcReverse + .cSortOrder
				Case .cSortOrder = m.lcReverse
					.cSortOrder	= Strtran(.cSortOrder, lcReverse, '|')
				Otherwise
					.cSortOrder	= Strtran(.cSortOrder, m.lcNormal, '|')
					.cSortOrder	= '|' + m.lcColumnName + .cSortOrder
			Endcase
			lnPos = At('|', .cSortOrder, 4)
			If m.lnPos > 0
				.cSortOrder = Left(.cSortOrder, m.lnPos)
			Endif
		
			.cmdClassSearch.SetFocus()
			DoEvents
		
			.RefreshResults()
			.grdResults.SetFocus()
		
		Endwith
		
	ENDPROC

ENDDEFINE

DEFINE CLASS basegrid AS grid 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getcolumninfo
		*m: handledoubleclick
		*m: setcolumninfo
		*m: showcontextmenu
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Height = 200
	Name = "basegrid"
	Width = 320
	_memberdata = <VFPData>
		<memberdata name="getcolumninfo" display="GetColumnInfo"/>
		<memberdata name="handledoubleclick" display="HandleDoubleClick"/>
		<memberdata name="setcolumninfo" display="SetColumnInfo"/>
		<memberdata name="showcontextmenu" display="ShowContextMenu"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE getcolumninfo
		Local lcColumnInfo, lnI, loColumn
		
		lcColumnInfo   = ''
		For lnI = 1 To This.ColumnCount
			loColumn = This.Columns[lnI]
			lcColumnInfo = lcColumnInfo							;
				+ Transform(loColumn.ColumnOrder) + ' '			;
				+ Transform(loColumn.Width) + ','
		Endfor
		Return lcColumnInfo
		
		
	ENDPROC

	PROCEDURE handledoubleclick
	ENDPROC

	PROCEDURE setcolumninfo
		Lparameters lcColumnInfo
		
		Local laColumnInfo[1], lnCount, lnI, loColumn
		lnCount = Alines(laColumnInfo, lcColumnInfo, 5, ',')
		
		For lnI = 1 To Min(This.ColumnCount, lnCount)
			loColumn			 = This.Columns[lnI]
			loColumn.ColumnOrder = Val(Getwordnum(laColumnInfo[lnI], 1))
			loColumn.Width		 = Val(Getwordnum(laColumnInfo[lnI], 2))
		Endfor
		
	ENDPROC

	PROCEDURE showcontextmenu
	ENDPROC

ENDDEFINE

DEFINE CLASS cbofinder AS combobox 
 	*< CLASSDATA: Baseclass="combobox" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: refreshitems
		*p: _memberdata
	*</DefinedPropArrayMethod>

	Height = 24
	Name = "cbofinder"
	Width = 100
	_memberdata = <VFPData>
		<memberdata name="refreshitems" display="RefreshItems"/>
		</VFPData>

ENDDEFINE

DEFINE CLASS chkfiletype AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Alignment = 0
	Caption = "Check1"
	Height = 17
	Name = "chkfiletype"
	Width = 60

ENDDEFINE

DEFINE CLASS chkfinder AS checkbox 
 	*< CLASSDATA: Baseclass="checkbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Alignment = 0
	Caption = "Check1"
	Height = 17
	Name = "chkfinder"
	Value = .F.
	Width = 60

ENDDEFINE

DEFINE CLASS classcontextmenu AS basecontextmenu OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "classcontextmenu"
	
	PROCEDURE createmenuitems
		Lparameters loGrid, loContextMenu, loRecord
		
		Local lcClass, lcExt, lcFileName, lcFolder
		lcFileName = Alltrim(m.loRecord.FullName)
		lcFolder   = Alltrim(m.loRecord.Folder)
		lcExt	   = Upper(Justext(m.lcFileName))
		lcClass	   = m.loRecord.Class
		
		Do Case
			Case Inlist(m.lcExt, 'PRG', 'FXP')
				m.loContextMenu.AddMenuItem('\<Open', , , 'Dbl-Click', 'Edit PRGClass')
		
			Case Inlist(m.lcExt, 'VCX', 'VCT')
				m.loContextMenu.AddMenuItem('\<Open', , , 'Dbl-Click', 'Open Class ' + m.lcClass)
				m.loContextMenu.AddMenuItem('Open with Class \<Browser', , , , 'EditSourceX VCX')
				m.loContextMenu.AddMenuItem('Open with \<HackCX', , , , 'HackCX VCX')
				m.loContextMenu.AddMenuItem('NewObject', , , , 'NewObject')
				m.loContextMenu.AddMenuItem()
		Endcase
		
		If Upper(Justext(m.loRecord.FullName)) = 'VCX'
			m.loContextMenu.AddMenuItem('Create subclass', , , , 'Create Subclass')
			m.loContextMenu.AddMenuItem('Create duplicate class', , , , 'Create duplicate class')
			m.loContextMenu.AddMenuItem()
		Endif
		
		If This.lAddDescendants
			m.loContextMenu.AddMenuItem('Descendant classes', , , , 'Descendants')
			m.loContextMenu.AddMenuItem('Sibling classes', , , , 'Siblings')
			m.loContextMenu.AddMenuItem('Where used', , , , 'Where Used')
			m.loContextMenu.AddMenuItem()
		Endif
		
		DoDefault(m.loGrid, m.loContextMenu, m.lcFileName, m.lcExt, m.lcClass)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS classfinderengine AS finderengine OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addhierarchysubclasses
		*m: clookforclass_assign
		*m: createdescendants
		*m: createhierarchy
		*m: getrootclasses
		*m: readallclasses
		*m: updatebaseclasses
		*m: updateprgbasedclasses
		*p: clookforbaseclass
		*p: clookforclass
		*p: oregexp
	*</DefinedPropArrayMethod>

	clookforbaseclass = 
	clookforclass = 
	cresultsstem = ClassResults-V1
	lsearchforclass = .T.
	Name = "classfinderengine"
	oregexp = .NULL.
	_memberdata = <VFPData>
		<memberdata name="clookforclass" display="cLookForClass"/>
		<memberdata name="oregexp" display="oRegExp"/>
		<memberdata name="clookforbaseclass" display="cLookForBaseClass"/>
		<memberdata name="clookforclass_assign" display="cLookForClass_Assign"/>
		<memberdata name="updateprgbasedclasses" display="UpdatePRGBasedClasses"/>
		<memberdata name="updatebaseclasses" display="UpdateBaseClasses"/>
		<memberdata name="createdescendants" display="CreateDescendants"/>
		<memberdata name="readallclasses" display="ReadAllClasses"/>
		<memberdata name="getrootclasses" display="GetRootClasses"/>
		<memberdata name="createhierarchy" display="CreateHierarchy"/>
		<memberdata name="addhierarchysubclasses" display="AddHierarchySubClasses"/>
		</VFPData>
	
	PROCEDURE addhierarchysubclasses
		Lparameters lcDestAlias, lcRootAlias
		
		Update  Dest												;
			Set SortKey = Nvl(Root.SortKey, '')						;
			From (lcDestAlias)             As  Dest					;
				Left Join (lcRootAlias)    As  Root					;
					On Lower(Dest.Parent) = Lower(Root.Parent)		;
					And Lower(Dest.ClassLoc) = Lower(Root.ClassLoc)
		
		Replace All																		;
				SortKey	 With  Trim(SortKey) + Right(Transform(Recno(), '@0'), 4)		;
			For Not Empty(SortKey)														;
			In (lcDestAlias)
		
		Do While .T.
		
			Update  Dest														;
				Set SortKey = Trim(Dest2.SortKey) + '@@@@'						;
				From (lcDestAlias)        As  Dest								;
					Join (lcDestAlias)    As  Dest2								;
						On Lower(Dest.Parent) = Lower(Dest2.Class)				;
						And Lower(Dest.ClassLoc) = Lower(Dest2.FullName)		;
				Where Empty(Dest.SortKey)										;
					And Not Empty(Dest2.SortKey)
		
			If _Tally = 0
				Exit
			Endif
		
			Replace All																					;
					SortKey	 With  Strtran(SortKey, '@@@@', Right(Transform(Recno(), '@0'), 4))			;
				In (lcDestAlias)
		
		Enddo && While .T.
		
	ENDPROC

	PROCEDURE clookforclass_assign
		lparameters tcLookForClass
		This.cLookForClass = Lower(This.CreateTemplate(tcLookForClass))
		
		
	ENDPROC

	PROCEDURE createdescendants
		Lparameters lcResultsAlias, lcClass, lcFullname, lcDestAlias
		
		Local lcSourceAlias
		lcSourceAlias = 'crsr_AllClasses'
		
		This.ReadAllClasses(lcResultsAlias, lcSourceAlias)
		
		Select  Source.*									;
				  From(lcSourceAlias)    As  Source			;
			Where Lower(FullName) = Lower(lcFullname)		;
				And Lower(Class) = Lower(lcClass)			;
			Into Cursor crsr_Temp Readwrite
		Replace All SortKey With ' '
		
		If _Tally = 0
			Select  Source.*									;
					  From(lcSourceAlias)    As  Source			;
				Where Lower(ClassLoc) = Lower(lcFullname)		;
					And Lower(Parent) = Lower(lcClass)			;
				Order By Class									;
				Into Cursor crsr_Temp Readwrite
			Replace All SortKey With 'Root' + Transform(Recno()) + '\'
		
			If _Tally = 0
				Return
			Endif
		Endif
		
		Select * From crsr_Temp Into Cursor crsr_Parents Readwrite
		
		Do While .T.
			Select  Source.*,																			;
					crsr_Parents.SortKey     As  NewSortKey												;
					  From(lcSourceAlias)    As  Source													;
					Join crsr_Parents																	;
						On Lower(Source.ClassLoc + Source.Parent) = Lower(crsr_Parents.FullName + crsr_Parents.Class) ;
				Order By Source.Class																	;
				Into Cursor crsr_new Readwrite
			Replace All SortKey With Trim(NewSortKey) + Transform(Recno(), '@L 9999')
		
			If _Tally = 0
				Exit
			Endif
		
			Select crsr_Temp
			Append From(Dbf('crsr_New'))
		
			Select * From crsr_new Into Cursor crsr_Parents Readwrite
		
		Enddo && While .T.
		
		Select  *					;
			From crsr_Temp			;
			Order By SortKey		;
			Into Cursor(Evl(lcDestAlias, 'crsr_Descendants')) Readwrite
		
	ENDPROC

	PROCEDURE createhierarchy
		Lparameters lcSourceAlias
		
		Local lcRootAlias
		
		lcRootAlias = 'crsr_RootClasses'
		If Used(lcRootAlias)
			Return
		EndIf
		
		This.GetRootClasses(lcSourceAlias, lcRootAlias)
		This.AddHierarchySubClasses(lcSourceAlias, lcRootAlias)
		
		 
	ENDPROC

	PROCEDURE filesearch
		#Define ccDOUBLEAMPERSANDS '&' + '&'
		
		Lparameters lcFilename, lnSize
		
		Local lcBaseClasas, lcBaseClass, lcClass, lcExt, lcParent, lcParentLoc, lcText, lcValue, llSuccess
		Local lnEndRange, lnI, lnStartRange, loMatch, loMatches, ltTimeStamp
		
		lcExt = Upper(Justext(lcFilename))
		
		Do Case
			Case lcExt = 'VCX'
		
				Select(Select('VCX'))
				Try
					Use(lcFilename) Shared Again Alias VCX
					llSuccess = .T.
				Catch to loException
					llSuccess = .F.
				Endtry
		
				If llSuccess
					Scan For Lower(Reserved1) = 'class' And Not Deleted()
						If Empty(This.cLookForBaseClass) Or Lower(BaseClass) = This.cLookForBaseClass
							If Like(This.cLookForClass, Lower(objname))
								lcBaseClass = Padr(BaseClass, 20)
								This.AddMatch(lcFilename, 0, This.DecodeTimeStamp(Timestamp), objname, Class, ClassLoc, lcBaseClass)
							Endif
						Endif
					Endscan
				Endif && llSuccess
		
				Use
		
			Case lcExt = 'PRG'
				Try
					lcText	  = Filetostr(lcFilename)
					llSuccess = .T.
				Catch to loException
					llSuccess = .F.
				Endtry
		
				If llSuccess
					This.oRegExp.Pattern = '^s*define class.*$'
					loMatches			 = This.oRegExp.Execute(lcText)
		
					ltTimeStamp = Fdate(lcFilename, 1)
		
					If loMatches.Count = 0
						Return
					Endif
		
					For lnI = 1 To loMatches.Count
						loMatch		 = loMatches.Item[lnI - 1]
		
						lcValue		= Chrtran(loMatch.Value, Chr[13] + Chr[10], '  ')
						If (ccDOUBLEAMPERSANDS) $ lcValue
							lcValue = Left(lcValue, At(ccDOUBLEAMPERSANDS, lcValue) - 1)
						EndIf 
						
						lcClass		= Getwordnum(lcValue, 3)
						lcParent	= Getwordnum(lcValue, 5)
						lcParentLoc	= Getwordnum(lcValue, 7)
		
						If Like(This.cLookForClass, Lower(lcClass))
							lnStartRange = loMatch.FirstIndex + At(lcClass, lcValue) - 1
							lnEndRange	 = lnStartRange + Len(lcClass)
							This.AddMatch(lcFilename, lnSize, ltTimeStamp, lcClass, lcParent, lcParentLoc, '', lnStartRange, lnEndRange)
						Endif
					Endfor && lnI = 1 to loMatches.Count
				Endif && llSuccess
		
		Endcase
		
		
	ENDPROC

	PROCEDURE getrootclasses
		Lparameters lcSourceAlias, lcDestAlias
		
		Select  Distinct Iif(Empty(S1.ClassLoc), 'A', 'Z')    As  Base,			;
				S1.Parent,														;
				S1.ClassLoc,													;
				Space(10)                                     As  SortKey		;
			From (lcSourceAlias)                              As  S1			;
				Left Join (lcSourceAlias)                     As  S2			;
					On Lower(S1.Parent) = Lower(S2.Class)						;
					And Lower(S1.ClassLoc) = Lower(S2.FullName)					;
			Where Isnull(S2.Class)												;
			Into Cursor (lcDestAlias) Readwrite
		
		Replace All SortKey With Base + Transform(Recno(), '@L 9999')
		
	ENDPROC

	PROCEDURE Init
		Local loRegExp As 'VBScript.RegExp'
		
		DoDefault()
		
		loRegExp = Createobject('VBScript.RegExp')
		With loRegExp
			.IgnoreCase	= .T.
			.Global		= .T.
			.MultiLine	= .T.
		Endwith
		
		This.oRegExp = loRegExp
		
	ENDPROC

	PROCEDURE pathandclasslibssearch
		Local lcClassLib, lnI
		DoDefault()
		
		This.GetClassLibs()
		For lnI = 1 To Alen(This.aClassLibs)
			lcClassLib = This.aClassLibs[lnI]
			If Ascan(This.aPaths, Justpath(lcClassLib), 1, -1, -1, 7) = 0
				This.FileSearch (lcClassLib)
			Endif
		Endfor
		
	ENDPROC

	PROCEDURE readallclasses
		Lparameters lcResultsAlias, lcDestAlias
		
		Do Case
			Case Used(lcDestAlias)
		
			Case Empty(This.cLookForClass)
				Select  *							;
						  From(lcResultsAlias)		;
					Into Cursor(lcDestAlias) Readwrite
		
			Otherwise
				With This
					.cLookFor	   = ''
					.cLookForClass = ''
					Select  *							;
							  From(lcResultsAlias)		;
						Where .F.						;
						Into Cursor(lcDestAlias) Readwrite
		
					.Search(lcDestAlias, .T.)
		
				Endwith
		Endcase
		
		
	ENDPROC

	PROCEDURE search
		Lparameters tcDestAlias, llLeaveCursors
		
		DoDefault(m.tcDestAlias)
		
		Flock(m.tcDestAlias)
		
		This.UpdateBaseClasses(m.tcDestAlias)
		This.UpdatePRGBasedClasses(m.tcDestAlias)
		
		Unlock In(m.tcDestAlias)
		
		Select  *,									;
				Upper(Class)    As  UpperClass		;
			From (m.tcDestAlias)					;
			Order By UpperClass						;
			Into Cursor (m.tcDestAlias) Readwrite
		
		If m.llLeaveCursors
			Return
		Endif
		
		Use In(Select('crsr_AllClasses'))
		Use In(Select('crsr_RootClasses'))
		
	ENDPROC

	PROCEDURE updatebaseclasses
		Lparameters tcDestAlias
		
		Update  Classes												;
			Set Classes.BaseClass  = BaseClasses.BaseClass,			;
				Classes.Parent     = BaseClasses.BaseClass			;
				  From(tcDestAlias)    As  Classes					;
				Join BaseClasses									;
					On Upper(BaseClasses.BaseClass) = Left(Upper(Classes.Parent), 20)
		
		Update  Classes											;
			Set Classes.BaseClass  = BaseClasses.BaseClass		;
				  From(tcDestAlias)    As  Classes				;
				Join BaseClasses								;
					On Upper(BaseClasses.BaseClass) = Left(Upper(Classes.BaseClass), 20)
		
	ENDPROC

	PROCEDURE updateprgbasedclasses
		Lparameters tcDestAlias
		
		Do While .T.
			Update  Classes																				;
				Set Classes.BaseClass  = ParentClasses.BaseClass,										;
					Classes.ClassLoc  = ParentClasses.FullName											;
				From (m.tcDestAlias)        As  Classes													;
					Join (m.tcDestAlias)    As  ParentClasses											;
						On Upper(ParentClasses.Class) = Upper(Classes.Parent)							;
						And Padr(Justfname(Upper(Evl(ParentClasses.FullName, 'X'))), 60)				;
						= Padr(Justfname(Upper(Evl(Classes.ClassLoc, ParentClasses.FullName))), 60)		;
				Where Empty(Classes.BaseClass)															;
					And Not Empty(ParentClasses.BaseClass)
			If _Tally = 0
				Exit
			Endif
		Enddo
		
		Update  Classes									;
			Set Classes.BaseClass  = '- N/A -'				;
			From (m.tcDestAlias)    As  Classes			;
			Where Empty(Classes.BaseClass)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS cmdfinder AS commandbutton 
 	*< CLASSDATA: Baseclass="commandbutton" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "Command1"
	Height = 27
	Name = "cmdfinder"
	Width = 84

ENDDEFINE

DEFINE CLASS cntfinder AS container 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: setfontsize
		*m: setup
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Height = 200
	Name = "cntfinder"
	Width = 200
	_memberdata = <VFPData>
		<memberdata name="setup" display="Setup"/>
		<memberdata name="setfontsize" display="SetFontSize"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE setfontsize
		lparameters tnFontSize
		This.SetAll('FontSize', tnFontSize)
	ENDPROC

	PROCEDURE setup
		Lparameters lcPanelKey, loPanelProperties, loSearchEngine
		
	ENDPROC

ENDDEFINE

DEFINE CLASS custclasspanel AS custpanel OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	cpanel = BaseClass
	Name = "custclasspanel"
	_memberdata = <VFPData>
		<memberdata name="cpanel" display="cPanel"/>
		</VFPData>

ENDDEFINE

DEFINE CLASS custdragdrop AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addinmethod
		*m: dragdrop		&& Occurs when a drag-and-drop operation is completed.
		*m: dragover		&& Occurs when a control is being dragged over a target object.
		*m: formaddobject
		*m: mousedown		&& Occurs when the user presses the mouse button.
		*m: removetext1fromcolumn
		*p: cbaseclass
		*p: cclass
		*p: cfilename
		*p: lbrowser
		*p: ldragdrop
		*p: lerror
		*p: lformaddobject
		*p: lignoreerrors
		*p: natpos
		*p: nmousebutton
		*p: nshift
		*p: osource
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	cbaseclass = 
	cclass = 
	cfilename = 
	lbrowser = .T.
	ldragdrop = .F.
	lerror = .F.
	lformaddobject = .F.
	lignoreerrors = .F.
	Name = "custdragdrop"
	natpos = 0
	nmousebutton = 0
	nshift = 0
	osource = .NULL.
	_memberdata = <VFPData>
		<memberdata name="dragdrop" display="DragDrop"/>
		<memberdata name="dragover" display="DragOver"/>
		<memberdata name="formaddobject" display="FormAddObject"/>
		<memberdata name="savedraginfo" display="SaveDragInfo"/>
		<memberdata name="cbaseclass" display="cBaseClass"/>
		<memberdata name="cclass" display="cClass"/>
		<memberdata name="cfilename" display="cFileName"/>
		<memberdata name="lbrowser" display="lBrowser"/>
		<memberdata name="ldragdrop" display="lDragDrop"/>
		<memberdata name="lerror" display="lError"/>
		<memberdata name="lformaddobject" display="lFormAddObject"/>
		<memberdata name="lignoreerrors" display="lIgnoreErrors"/>
		<memberdata name="natpos" display="nAtPos"/>
		<memberdata name="nmousebutton" display="nMouseButton"/>
		<memberdata name="nshift" display="nShift"/>
		<memberdata name="osource" display="oSource"/>
		<memberdata name="mousedown" display="MouseDown"/>
		<memberdata name="removetext1fromcolumn" display="RemoveText1FromColumn"/>
		<memberdata name="addinmethod" display="AddInMethod"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE addinmethod
		Lparameters tcMethodName
		
		Return .f.
		
	ENDPROC

	PROCEDURE dragdrop		&& Occurs when a drag-and-drop operation is completed.
		LPARAMETERS oSource, nXCoord, nYCoord, loThis
		LOCAL lnResult,lnLastShift
		
		IF NOT this.lBrowser
			IF ISNULL(this.oItem.oAction)
				RETURN
			ENDIF
			this.oItem.oAction.DragDrop(oSource,nXCoord,nYCoord)
			RETURN
		ENDIF
		*** JRN 2010-04-18 : do nothing!
		IF .T. && TYPE("oSource")#"O" OR this.lReadOnly OR oSource.parent.Name==this.Name OR ;
				NOT LEFT(oSource.parent.Name,12)=="classbrowser" OR ;
				oSource.parent.cFileName==this.cFileName OR ;
				NOT RIGHT(oSource.parent.cFileName,4)==".vcx"
			this.oSource=.NULL.
			RETURN .F.
		ENDIF
		oSource.DragIcon=""
		this.oSource=oSource
		IF this.AddInMethod(PROGRAM())
			this.oSource=.NULL.
			RETURN
		ENDIF
		this.AddClass
		this.oSource=.NULL.
		SET MESSAGE TO
		
		
	ENDPROC

	PROCEDURE dragover		&& Occurs when a control is being dragged over a target object.
		LPARAMETERS oSource, nXCoord, nYCoord, nState, loThis
		LOCAL lcDragIcon
		
		IF TYPE("nState")#"N" OR nState=2 OR TYPE("oSource.parent")#"O" OR ;
				NOT LEFT(oSource.parent.Name,12)=="classbrowser"
			RETURN .F.
		ENDIF
		DO CASE
			CASE nState=1
				oSource.DragIcon=oSource.parent.cDragIcon
				SET MESSAGE TO
			CASE this.lBrowser AND (this.lReadOnly OR oSource.parent.Name==this.Name OR ;
					oSource.parent.cFileName==this.cFileName OR ;
					NOT RIGHT(oSource.parent.cFileName,4)==".vcx")
				oSource.DragIcon="c:\dev\browser\nodrop.cur"
			CASE NOT oSource.parent.lBrowser
				lcDragIcon="c:\dev\browser\dragmove.cur"
			OTHERWISE
				lcDragIcon=IIF(oSource.parent.nShift=2,"dragcopy.cur","dragmove.cur")
				oSource.DragIcon="c:\dev\browser\"+lcDragIcon
				SET MESSAGE TO IIF(oSource.parent.nShift=2,M_DROP_TO_COPY_LOC,M_DROP_TO_MOVE_LOC)+ ;
						[ (]+oSource.parent.cClass+[) ]+M_FROM_LOC+[ "]+oSource.parent.cFileName+ ;
						[" ]+M_TO_LOC+[ "]+this.cFileName+["]
		ENDCASE
		oSource.Refresh
		
		
	ENDPROC

	PROCEDURE formaddobject
		*** JRN 2010-04-19 : from Class Browser, with only minor modifications, as noted
		* all comments are mine, including code that has been commented out
		Lparameters toObject, tnXCoord, tnYCoord, tlActivateForm, tlDesignMode, tlNoShow, tlNoErrors, tlBuilder, toForm
		Local laMembers, laMembersObj, laMouseObj[1], lcBaseClass, lcBaseClass2, lcClass, lcCode, lcFileName
		Local lcFontName, lcKeyBoard, lcMWindow, lcObjName, lcParentObjName, lcParentObjProperty
		Local lcTargetBaseClass, llAddToCommand, llAddToNew, llAddToScreen, llAutoAddForm, llBuilder
		Local llIgnoreErrors, llPixelMode, lnCol, lnColOffset, lnCount, lnCount2, lnFontSize, lnFormCount
		Local lnLastSelect, lnMCol, lnMRow, lnMemberCount, lnRow, lnRowOffset, lnScaleMode
		Local oNewObject, oTemp, tnRow
		
		this.lFormAddObject=.T.
		*!*	IF this.lBrowser
		*!*		IF NOT this.lVCXSCXMode OR this.lFileMode OR this.lSCXMode
		*!*			RETURN .F.
		*!*		ENDIF
			lcClass		= This.cClass
			lcBaseClass	= This.cBaseClass
			lcFileName	= This.cFileName
			*!*	ELSE
		*!*		IF ISNULL(this.oItem) OR NOT PEMSTATUS(this.oItem,"cBaseClass",5)
		*!*			RETURN .F.
		*!*		ENDIF
		*!*		lcClass=LOWER(this.oItem.cClass)
		*!*		lcBaseClass=LOWER(this.oItem.cBaseClass)
		*!*		lcFileName=LOWER(this.oItem.cFileName)
		*!*	ENDIF
		IF this.nAtPos=-.1
			this.nAtPos=-.2
		ENDIF
		llAddToScreen=.F.
		llAddToCommand=.F.
		llAddToNew=.F.
		IF VARTYPE(toObject)#"O"
			DO CASE
				CASE VARTYPE(toObject)#"C"
					RETURN .F.
				CASE LOWER(ALLTRIM(toObject))=="_screen"
					llAddToScreen=.T.
				CASE LOWER(ALLTRIM(toObject))=="command"
					llAddToCommand=.T.
				CASE LOWER(ALLTRIM(toObject))=="new"
					llAddToNew=.T.
				OTHERWISE
					RETURN .F.
			ENDCASE
			toObject=_screen
		ELSE
			IF toObject=_screen
				llAddToScreen=.T.
			ELSE
				DO WHILE .T.
					IF PEMSTATUS(toObject,"AddObject",5) OR VARTYPE(toObject.Parent)#"O" OR ;
							VARTYPE(toObject.Parent.BaseClass)#"C"
						EXIT
					ENDIF
					toObject=toObject.Parent
				ENDDO
			ENDIF
		ENDIF
		lcTargetBaseClass=LOWER(toObject.BaseClass)
		llAutoAddForm=(lcTargetBaseClass=="form" AND VARTYPE(tnXCoord)#"N")
		IF lcTargetBaseClass=="form" AND VARTYPE(toForm)#"O"
			toForm=toObject
		ENDIF
		IF lcTargetBaseClass=="pageframe" AND NOT lcTargetBaseClass=="page"
			FOR lnCount = 1 TO toObject.PageCount
				IF lnCount=toObject.ActivePage
					toObject=toObject.Pages[lnCount]
					lcTargetBaseClass=LOWER(toObject.BaseClass)
					EXIT
				ENDIF
			ENDFOR
		ENDIF
		llPixelMode=(VARTYPE(toForm)=="O" AND TYPE("toForm.ScaleMode")=="N" AND ;
				toForm.ScaleMode=3)
		lnScaleMode=3
		IF VARTYPE(tnXCoord)=="N" AND TYPE("toForm.ScaleMode")=="N" AND NOT llPixelMode
			lnScaleMode=toForm.ScaleMode
			IF NOT PEMSTATUS(toForm,"ScaleMode",0)
				lnScaleMode=-1
			ENDIF
			toForm.ScaleMode=3
			llPixelMode=.T.
			llAutoAddForm=.F.
		ENDIF
		IF llPixelMode
			IF TYPE("toForm.FontName")=="C"
				lcFontName=toForm.FontName
				lnFontSize=toForm.FontSize
			ELSE
				oTemp=CREATEOBJECT("Textbox")
				lcFontName=oTemp.FontName
				lnFontSize=oTemp.FontSize
				oTemp=.NULL.
			ENDIF
		ENDIF
		lcMWindow=" "
		lnRow=0
		lnCol=0
		lnRowOffset=0
		lnColOffset=0
		DO CASE
			CASE llAddToScreen OR llAddToCommand OR llAddToNew
				lcMWindow=""
			CASE llAutoAddForm AND tlDesignMode
				lcMWindow=LOWER(toObject.Caption)
			CASE PARAMETERS()<3 AND NOT llAutoAddForm AND NOT tlDesignMode
				lnCount=-1
				DO WHILE .T.
					lnCount=lnCount+1
					lcParentObjName="toObject"+REPLICATE(".parent",lnCount)
					IF TYPE(lcParentObjName)#"O"
						EXIT
					ENDIF
					lcBaseClass2=LOWER(EVALUATE(lcParentObjName+".BaseClass"))
					IF lcBaseClass2=="form"
						lcMWindow=EVALUATE(lcParentObjName+".Name")
						lcParentObjProperty=lcParentObjName+".ScaleMode"
						llPixelMode=(TYPE(lcParentObjProperty)#"N" OR ;
								EVALUATE(lcParentObjProperty)=3)
						EXIT
					ENDIF
					lcParentObjProperty=lcParentObjName+".Top"
					IF TYPE(lcParentObjProperty)#"N"
						LOOP
					ENDIF
					lnRowOffset=lnRowOffset-EVALUATE(lcParentObjProperty)
					lcParentObjProperty=lcParentObjName+".Left"
					lnColOffset=lnColOffset-EVALUATE(lcParentObjProperty)
					lcParentObjProperty=lcParentObjName+".BaseClass"
					IF LOWER(EVALUATE(lcParentObjProperty))=="pageframe"
						lnRowOffset=-OBJTOCLIENT(toObject,1)
						lnColOffset=-OBJTOCLIENT(toObject,2)
					ENDIF
				ENDDO
			CASE llAutoAddForm
				lcMWindow=LOWER(toObject.Name)
		ENDCASE
		IF VARTYPE(tnYCoord)=="N"
			lnRow=tnYCoord
		ELSE
			IF NOT lcMWindow==" " AND llAutoAddForm AND WEXIST(lcMWindow)
				lnRow=MROW(lcMWindow)
				IF lnRow<0
					RETURN .F.
				ENDIF
				IF llPixelMode
					lnRow=lnRow*FONTMETRIC(1,lcFontName,lnFontSize)
				ENDIF
				lnRow=lnRow+lnRowOffset
			ENDIF
		ENDIF
		IF VARTYPE(tnXCoord)=="N"
			lnCol=tnXCoord
		ELSE
			IF NOT lcMWindow==" " AND llAutoAddForm AND WEXIST(lcMWindow)
				lnCol=MCOL(lcMWindow)
				IF lnCol<0
					RETURN .F.
				ENDIF
				IF llPixelMode
					lnCol=lnCol*FONTMETRIC(6,lcFontName,lnFontSize)
				ENDIF
				lnCol=lnCol+lnColOffset
			ENDIF
		ENDIF
		DIMENSION laMembers[1]
		laMembers=""
		lnMemberCount=AMEMBERS(laMembers,toObject,2)
		FOR lnCount2 = 1 TO lnMemberCount
			laMembers[lnCount2]=LOWER(laMembers[lnCount2])+" "
		ENDFOR
		lnCount=0
		DO WHILE .T.
			lnCount=lnCount+1
			lcObjName=lcClass+ALLTRIM(STR(lnCount))
			IF ASCAN(laMembers,LOWER(lcObjName)+" ")=0
				EXIT
			ENDIF
		ENDDO
		DIMENSION laMembers[1]
		laMembersObj=""
		lnMemberCount=AMEMBERS(laMembers,toObject,1)
		FOR lnCount2 = 1 TO (2*lnMemberCount)
			laMembers[lnCount2]=LOWER(laMembers[lnCount2])+" "
		ENDFOR
		DO WHILE .T.
			IF ASCAN(laMembers,LOWER(lcObjName)+" ")=0
				EXIT
			ENDIF
			lnCount=lnCount+1
			lcObjName=lcClass+ALLTRIM(STR(lnCount))
		ENDDO
		llIgnoreErrors=this.lIgnoreErrors
		this.lIgnoreErrors=tlNoErrors
		lcObjName=PROPER(lcObjName)
		lnFormCount=IIF(lcTargetBaseClass=="formset",toObject.FormCount,0)
		IF llAddToCommand OR llAddToNew OR (llAddToScreen AND ;
				(lcBaseClass=="formset" OR lcBaseClass=="form" OR ;
				lcBaseClass=="toolbar" OR lcBaseClass=="custom"))
			lcObjName="o"+PROPER(lcObjName)
			DO WHILE .T.
				IF TYPE(lcObjName)=="U"
					EXIT
				ENDIF
				lnCount=lnCount+1
				lcObjName="o"+PROPER(lcClass+ALLTRIM(STR(lnCount)))
			ENDDO
			IF llAddToCommand
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				lcKeyboard=[{Ctrl+F2}{Ctrl+END}]+lcObjName+ ;
						[=NEWOBJECT("]+lcClass+[","]+lcFileName+["){ENTER}]
				KEYBOARD (lcKeyboard) PLAIN
				this.lIgnoreErrors=llIgnoreErrors
				RETURN
			ENDIF
			oNewObject=NEWOBJECT(lcClass,lcFileName)
			IF VARTYPE(oNewObject)#"O" OR ISNULL(oNewObject)
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				oNewObject=.NULL.
				this.lError=.F.
				this.lIgnoreErrors=llIgnoreErrors
				RETURN .F.
			ENDIF
			IF llAddToNew
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				this.lError=.F.
				this.lIgnoreErrors=llIgnoreErrors
				RETURN oNewObject
			ENDIF
			PUBLIC (lcObjName)
			lcCode=lcObjname+[=oNewObject]
			&lcCode
			IF NOT lcBaseClass=="formset" AND TYPE("oNewObject.ScaleMode")=="N"
				IF oNewObject.ScaleMode=0
					oTemp=IIF(lcBaseClass=="form",oNewObject,_screen)
					lnRow=lnRow/FONTMETRIC(1,oTemp.FontName,oTemp.FontSize)
					lnCol=lnCol/FONTMETRIC(6,oTemp.FontName,oTemp.FontSize)
					oTemp=.NULL.
				ENDIF
				oNewObject.Top=lnRow
				oNewObject.Left=lnCol
			ENDIF
			lnLastSelect=SELECT()
		*!*	IF this.lBrowser
		*!*		this.RefreshRecNo
		*!*		SELECT (this.cAlias)
		*!*		IF NOT llAddToNew AND NOT tlNoShow AND ;
		*!*				ATC(CR_LF+"Visible = .F.",CR_LF+Properties)=0 AND ;
		*!*				PEMSTATUS(oNewObject,"Show",5) AND ;
		*!*				PEMSTATUS(oNewObject,"Show",3)=="Method"
		*!*			oNewObject.Show
		*!*		ENDIF
		*!*	ELSE
				IF PEMSTATUS(oNewObject,"Show",5) AND ;
						PEMSTATUS(oNewObject,"Show",3)=="Method"
					oNewObject.Show
				ENDIF
		*!*	ENDIF
			SELECT (lnLastSelect)
			this.oSource=oNewObject
			this.lError=.F.
			this.lIgnoreErrors=llIgnoreErrors
			IF this.AddInMethod(PROGRAM())
				this.oSource=.NULL.
				this.AutoRefresh
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				RETURN
			ENDIF
			this.oSource=.NULL.
			this.AutoRefresh
			DO CASE
				CASE lnScaleMode=-1
					toForm.ResetToDefault("ScaleMode")
				CASE lnScaleMode=0
					toForm.ScaleMode=0
			ENDCASE
			RETURN
		ELSE
			toObject.NewObject(lcObjName,lcClass,lcFileName)
		ENDIF
		oNewObject=.NULL.
		IF TYPE("toObject."+lcObjName)#"O"
			DO CASE
				CASE lnScaleMode=-1
					toForm.ResetToDefault("ScaleMode")
				CASE lnScaleMode=0
					toForm.ScaleMode=0
			ENDCASE
			this.lError=.F.
			this.lIgnoreErrors=llIgnoreErrors
			RETURN .F.
		ENDIF
		oNewObject=toObject.&lcObjName
		oNewObject.Name=lcObjName
		
		*{123} MJP -- 05/16/2013 12:01:21 PM - Begin
		This.RemoveText1FromColumn(lcTargetBaseClass, toObject, lcObjName)
		*} MJP -- 05/16/2013 12:01:21 PM - End
		
		IF PEMSTATUS(oNewObject, "Top", 5) and not PEMSTATUS(oNewObject, "Top", 1)
			oNewObject.Top=lnRow
		ENDIF
		IF PEMSTATUS(oNewObject, "Left", 5) and not PEMSTATUS(oNewObject, "Left", 1)
			oNewObject.Left=lnCol
		ENDIF
		IF tlDesignMode
			toObject.Refresh
		ELSE
			IF NOT tlNoShow AND TYPE("oNewObject.Visible")=="L"
				*!*	lnLastSelect=SELECT()
				*!*	IF this.lBrowser
				*!*		this.RefreshRecNo
				*!*		SELECT (this.cAlias)
				*!*		IF ATC(CR_LF+"Visible = .F.",CR_LF+Properties)=0 AND ;
				*!*				GETPEM(oNewObject.Class,"Visible")
				*!*			oNewObject.Visible=.T.
				*!*		ENDIF
				*!*	ELSE
				*!*		oNewObject.Visible=.T.
				*!*	ENDIF
				*!*	SELECT (lnLastSelect)
			ENDIF
			IF llAddToScreen
				_screen.Refresh
			ENDIF
		ENDIF
		this.lIgnoreErrors=llIgnoreErrors
		this.lError=.F.
		this.oSource=oNewObject
		*!*	IF this.AddInMethod(PROGRAM())
		*!*		DO CASE
		*!*			CASE lnScaleMode=-1
		*!*				toForm.ResetToDefault("ScaleMode")
		*!*			CASE lnScaleMode=0
		*!*				toForm.ScaleMode=0
		*!*		ENDCASE
		*!*		this.oSource=.F.
		*!*		this.oSource=.NULL.
		*!*		RETURN
		*!*	ENDIF
		this.oSource=.NULL.
		llBuilder=(tlBuilder AND ;
				((TYPE("oNewObject.BuilderX")=="C" AND NOT EMPTY(oNewObject.BuilderX)) OR ;
					(TYPE("oNewObject.Builder")=="C" AND NOT EMPTY(oNewObject.Builder))) AND ;
					NOT EMPTY(_builder) AND FILE(_builder))
		IF NOT tlNoShow AND tlActivateForm
			*!* ******************** Removed 5/11/2013 *****************
			*!* IF this.lBrowser AND this.Visible
			*!* 	this.cmdClassIcon.SetFocus
			*!* ENDIF
			oTemp=toObject
			DO WHILE NOT LOWER(oTemp.BaseClass)=="form"
				IF TYPE("oTemp.parent")#"O"
					EXIT
				ENDIF
				oTemp=oTemp.parent
			ENDDO
			IF LOWER(oTemp.BaseClass)=="form"
				oTemp.Show
			ENDIF
			oTemp=.NULL.
		ENDIF
		IF NOT tlDesignMode
			DO CASE
				CASE lnScaleMode=-1
					toForm.ResetToDefault("ScaleMode")
				CASE lnScaleMode=0
					toForm.ScaleMode=0
			ENDCASE
			IF llBuilder
				DOEVENTS
				DO (_builder) WITH (oNewObject)
			ENDIF
			RETURN oNewObject
		ENDIF
		IF lcTargetBaseClass=="formset"
			DO CASE
				CASE lnScaleMode=-1
					toForm.ResetToDefault("ScaleMode")
				CASE lnScaleMode=0
					toForm.ScaleMode=0
			ENDCASE
			IF lnFormCount=1
				DOEVENTS
				CLEAR TYPEAHEAD
				KEYBOARD "{Alt+M}C" PLAIN
			ENDIF
			IF llBuilder
				DOEVENTS
				DO (_builder) WITH (oNewObject)
			ENDIF
			RETURN oNewObject
		ENDIF
		lcMWindow=toObject.Name
		IF NOT WEXIST(lcMWindow)
			IF TYPE("toObject.Caption")#"C"
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				IF llBuilder
					DOEVENTS
					DO (_builder) WITH (oNewObject)
				ENDIF
				RETURN oNewObject
			ENDIF
			lcMWindow=toObject.Caption
			IF NOT WEXIST(lcMWindow)
				DO CASE
					CASE lnScaleMode=-1
						toForm.ResetToDefault("ScaleMode")
					CASE lnScaleMode=0
						toForm.ScaleMode=0
				ENDCASE
				IF llBuilder
					DOEVENTS
					DO (_builder) WITH (oNewObject)
				ENDIF
				RETURN oNewObject
			ENDIF
		ENDIF
		CLEAR TYPEAHEAD
		*** JRN 2010-04-19 : new code to attempt to click on the newly added object
		*!*	lnMRow = Mrow('',3)
		*!*	lnMCol = MCol('',3)
		*!*	Mouse At lnMRow + 4, lnMCol + 2 Pixels
		*!*	IF AMOUSEOBJ(laMouseObj) >= 4 				;
		*!*			AND VARTYPE(laMouseObj[2])=="O" 	;
		*!*			and laMouseObj(2) = oNewObject
		*!*		Mouse Click Shift Control
		*!*	Else
		*!*		?laMouseObj(2).Name, lnMRow, lnMCol
		*!*	ENDIF
		*!*	Mouse At lnMRow, lnMCol Pixels
		
		IF NOT llBuilder AND NOT EMPTY(lcMWindow)
			DOEVENTS
			IF llPixelMode
				MOUSE CLICK ;
						AT lnRow+4,lnCol+2 PIXELS ;
						WINDOW (lcMWindow)
			ELSE
				MOUSE CLICK ;
						AT lnRow+.25,lnCol+.5 ;
						WINDOW (lcMWindow)
			ENDIF
			DOEVENTS
		ENDIF
		DO CASE
			CASE lnScaleMode=-1
				toForm.ResetToDefault("ScaleMode")
			CASE lnScaleMode=0
				toForm.ScaleMode=0
		ENDCASE
		IF llBuilder
			DOEVENTS
			DO (_builder) WITH (oNewObject)
		EndIf
		
		RETURN oNewObject
		
	ENDPROC

	PROCEDURE mousedown		&& Occurs when the user presses the mouse button.
		LPARAMETERS nButton, nShift, nXCoord, nYCoord, loThis
		
		Local laMouseObj[1], laSelObj[1], lcBaseClass, lcMWindow, llDesignMode, llDesignModeCheck
		Local llRunModeCheck, lnMCol, lnMRow, lnSeconds, lnXCoord, lnYCoord, loObject
		Local oForm, oNewObject, oObject
		
		lnMRow					= Mrow()
		lnMCol					= Mcol()
		lnSeconds				= Seconds()
		This.lDragDrop		= .F.
		This.nMouseButton	= Iif(Type('nButton') == 'N', nButton, 0)
		This.nShift			= nShift
		This.lFormAddObject	= .F.
		
		*!* ******************** Removed 5/11/2013 *****************
		*!* IF This.lBrowser AND NOT This.lVCXSCXMode
		*!* 	RETURN
		*!* ENDIF
		IF nButton=2
			DO WHILE ABS(SECONDS()-lnSeconds)<_dblclick
				IF NOT MDOWN()
					RETURN
				ENDIF
				*!* ******************** Removed 6/3/2013 *****************
				*!* IF ABS(MROW(This.Name,3)-lnMRow)>=loThis.Height OR ;
				*!* 		ABS(MCOL(This.Name,3)-lnMCol)>=loThis.Height
				*!* 	EXIT
				*!* ENDIF
			ENDDO
		ENDIF
		llDesignModeCheck=.T.
		llRunModeCheck=.F.
		*** JRN 2010-04-18 : commented out
		*!*	lcStatusBarText=loThis.StatusBarText
		*!*	loThis.StatusBarText=""
		lcBaseClass=This.cBaseClass
		*!*	loThis.DragIcon="c:\dev\browser\control.cur"
		*!*	This.cDragIcon=loThis.DragIcon
		*!*	IF This.lBrowser AND (This.lSCXMode OR This.lFileMode)
		*!*		llDesignModeCheck=.F.
		*!*		loThis.DragIcon="c:\dev\browser\nodrop.cur"
		*!*	ENDIF
		*!*	llError=This.lError
		*!*	This.lError=.F.
		This.nAtPos=-.1
		
		*** JRN 2010-04-18 : Finally!! loThis.Drag below!
		IF nButton>=0
			IF nButton # 2 and NOT MDOWN()
				This.lDragDrop=.F.
				RETURN
			ENDIF
			loThis.Drag
		ENDIF
		****************************************************************
		****************************************************************
		oObject=.NULL.
		lnXCoord=0
		lnYCoord=0
		oForm=.NULL.
		lcMWindow=LOWER(ALLTRIM(MWINDOW()))
		
		If Amouseobj (laMouseObj) >= 4 And Vartype (laMouseObj[2]) == 'O'
			oObject = laMouseObj[2]
			lnXCoord   = laMouseObj[3]
			lnYCoord   = laMouseObj[4]
			laMouseObj = .Null.
			If Amouseobj (laMouseObj, 1) >= 4
				oForm = laMouseObj[2]
			Endif
		
			* Inserted 07/20/2011 / JRN
			If Type ('_oPEMEditor.oUtils.oPEMEditor.oObject') = 'O'
				Local loObject
				loObject = oObject
				Do While .T.
					Do Case
						Case loObject = _oPEMEditor.oUtils.oPEMEditor
							oObject  = _oPEMEditor.oUtils.oPEMEditor.oObject
							lnXCoord = 0
							lnYCoord = 0
							oForm    = _oPEMEditor.oUtils.oPEMEditor.oTopOfForm
							Exit
						Case Type ('loobject.Parent') = 'O'
							loObject = loObject.Parent
						Otherwise
							Exit
					Endcase
				Enddo While .T.
			Endif Type ('_oPEMEditor.oUtils.oPEMEditor.oObject') = 'O'
		
		Endif 
			
		*** JRN 2010-04-18 : following lines not needed
		*!*	loThis.StatusBarText=lcStatusBarText
		*!*	IF NOT This.lBrowser AND (ISNULL(This.oItem) OR ISNULL(This.oItem.oAction))
		*!*		RETURN
		*!*	ENDIF
		IF TYPE("oObject")#"O" OR ISNULL(oObject)
			oObject=.NULL.
		ENDIF
		IF ISNULL(oObject)
			*!*	lnCount=LEN(M_PROJECT_MANAGER_LOC+" - ")
			*!*	IF LOWER(LEFT(lcMWindow,lnCount))==LOWER(M_PROJECT_MANAGER_LOC+" - ")
			*!*		IF This.lBrowser
			*!*			lcFileName=This.cFileName
			*!*		ELSE
			*!*			lcFileName=This.oItem.cFileName
			*!*		ENDIF
			*!*		IF EMPTY(lcFileName) OR NOT FILE(lcFileName)
			*!*			RETURN
			*!*		ENDIF
			*!*		lcProjectFile=LOWER(FORCEEXT(ALLTRIM(SUBSTR(lcMWindow,lnCount+1)),"pjx"))
			*!*		FOR lnCount = 1 TO _vfp.Projects.Count
			*!*			IF LOWER(JUSTFNAME(_vfp.Projects[lnCount].Name))==lcProjectFile
			*!*				_vfp.Projects[lnCount].Files.Add(lcFileName)
			*!*				EXIT
			*!*			ENDIF
			*!*		ENDFOR
			*!*		RETURN
			*!*	ENDIF
			RETURN
		ELSE
			DO WHILE .T.
				IF PEMSTATUS(oObject,"AddObject",5) OR TYPE("oObject.Parent")#"O" OR ;
						TYPE("oObject.Parent.BaseClass")#"C"
					EXIT
				ENDIF
				oObject=oObject.Parent
			ENDDO
		ENDIF
		IF NOT ISNULL(oForm) AND oForm=thisform
			RETURN
		ENDIF
		*** JRN 2010-04-18 : not needed
		*!*	IF NOT This.lBrowser
		*!*		This.oItem.oAction.DragDrop2(oObject,lnXCoord,lnYCoord)
		*!*		RETURN
		*!*	ENDIF
		*!*	IF This.lDragDrop OR ISNULL(oObject)
		*!*		This.lDragDrop=.F.
		*!*		This.lFormAddObject=.F.
		*!*		IF NOT lcMWindow=="command"
		*!*			RETURN
		*!*		ENDIF
		*!*	ENDIF
		*!*	IF EMPTY(lcMWindow)
		*!*		IF MROW(This.Name)>0 AND MCOL(This.Name)>0
		*!*			lcMWindow=This.Name
		*!*		ELSE
		*!*			FOR lnCount = _screen.FormCount TO 1 STEP -1
		*!*				oForm=_screen.Forms[lnCount]
		*!*				IF NOT oForm.Name==This.Name AND ;
		*!*						oForm.Class==This.Class AND ;
		*!*						LOWER(LEFT(oForm.Name,12))=="classbrowser" AND ;
		*!*						TYPE("oForm.cBrowserTable")#"U" AND ;
		*!*						MROW(oForm.Name)>0 AND MCOL(oForm.Name)>0
		*!*					lcMWindow=oForm.Name
		*!*					EXIT
		*!*				ENDIF
		*!*			ENDFOR
		*!*		ENDIF
		*!*	ENDIF
		*!*	loThis.DragIcon=This.cDragIcon
		*!*	IF This.lError OR This.nAtPos=-.2 OR NOT llDesignModeCheck
		*!*		This.cDragIcon=""
		*!*		This.lFormAddObject=.F.
		*!*		This.nAtPos=0
		*!*		IF llError
		*!*			This.lError=llError
		*!*		ENDIF
		*!*		RETURN
		*!*	ENDIF
		*!*	This.lError=llError
		*!*	This.cDragIcon=""
		*!*	This.nAtPos=0
		*!*	IF lcMWindow==LOWER(This.Name)
		*!*		This.lFormAddObject=.F.
		*!*		RETURN
		*!*	ENDIF
		llDesignMode=.F.
		DO CASE
			CASE lcMWindow=="command"
				oObject="command"
			CASE EMPTY(lcMWindow) AND oObject=_screen
				oObject="_screen"
			CASE TYPE("oObject.lFormAddObject")#"L" OR NOT oObject.lFormAddObject
				llDesignMode=.T.
				DIMENSION laSelObj[1]
				IF ASELOBJ(laSelObj,1)=0 OR (TYPE("oObject.BaseClass")=="C" AND ;
						(LOWER(oObject.BaseClass)=="container" OR ;
						LOWER(oObject.BaseClass)=="column" OR ;
						LOWER(oObject.BaseClass)=="page"))
					llRunModeCheck=.T.
				ELSE
					oObject=laSelObj[1]
					RELEASE laSelObj
					IF LOWER(oObject.BaseClass)=="form"
						IF TYPE("oObject.Caption")#"C" OR NOT lcMWindow==LOWER(ALLTRIM(oObject.Caption))
							llRunModeCheck=.T.
							thisform.lFormAddObject=.F.
						ENDIF
					ELSE
						IF NOT lcMWindow==LOWER(ALLTRIM(oObject.Name))
							llRunModeCheck=.T.
							thisform.lFormAddObject=.F.
						ENDIF
					ENDIF
					IF NOT llRunModeCheck AND (lcBaseClass=="form" OR lcBaseClass=="toolbar")
						oObject=oObject.parent
					ENDIF
				ENDIF
		ENDCASE
		IF llRunModeCheck AND NOT thisform.lFormAddObject
			llDesignMode=.F.
		ENDIF
		thisform.lFormAddObject=.F.
		
		*** JRN 2010-04-18 : modified slightly
		*RETURN This.FormAddObject(oObject,lnXCoord,lnYCoord,.T.,llDesignMode, ;
				(nShift=1),(NOT This.lDragDropErrors AND nShift#2),(nButton=2),oForm)
		oNewObject = This.FormAddObject(oObject,lnXCoord,lnYCoord,.T.,llDesignMode, ;
				(nShift=1),(nShift#2),(nButton=2),oForm)
		
		*** JRN 2010-04-30 : Update PEM Editor
		If Type('_oPEMEditor.oUtils') = 'O' and Vartype(_oPEMEditor.oUtils) = 'O'
			_oPEMEditor.oUtils.SetCurrentSelectedObject (oNewObject)
		EndIf 
		
		Return oNewObject
	ENDPROC

	PROCEDURE removetext1fromcolumn
		#Define ccPROMPT  'Remove the default Text1 control from this column?'
		
		Lparameters lcTargetBaseClass, toObject, lcObjName
		*{123} MJP -- 05/16/2013 12:01:21 PM - Begin
		*-- This code was leveraged from the VFP Toolbox source code.
		*-- If the object was just added to a column, check if the column contains
		*-- the default Text1 textbox.  If that textbox exists, ask the user if
		*-- they want to replace it with the object that was just added.  If yes,
		*-- remove Text1, and make the new object the current (default) control
		*-- for the column.
		*-- PLEASE NOTE that the Toolbox engine includes a property to indicate
		*-- whether the user should be prompted to remove Text1, and another
		*-- property to indicate whether the CurrentControl setting should be
		*-- changed.  Something like that could be done here if Finder needed to
		*-- be that configurable.
		Local lnCount2
		If m.lcTargetBaseClass == 'column'
			For lnCount2 = 1 To m.toObject.ControlCount
				If m.toObject.Controls(m.lnCount2).Name == 'Text1'
					*-- PLEASE NOTE: The prompt and caption used by Toolbox are
					*-- defined in a #DEFINE.  I would probably be a good idea to
					*-- do something similar here, rather than using explicit text.
					If Messagebox(ccPROMPT, 4 + 32 + 256, 'Finder' ) = 6	&& Yes
						toObject.RemoveObject( 'Text1' )
		
						*-- This property setting is wrapped in TRY..CATCH in the
						*-- Toolbox code, so do the same here.  I don't know what
						*-- might cause this to fail.
						Try
							toObject.CurrentControl = m.lcObjName
						Catch to loException
						Endtry
					Endif
					Exit
				Endif
			Endfor
		Endif
		*} MJP -- 05/16/2013 12:01:21 PM - End
		
	ENDPROC

ENDDEFINE

DEFINE CLASS custfilepanel AS custpanel OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	cpanel = FileType
	Name = "custfilepanel"

ENDDEFINE

DEFINE CLASS custpanel AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: getclassfilename
		*m: getvalues
		*m: setvalues
		*p: ccolumninfo
		*p: cpanel
		*p: cpanelfilter
		*p: cpanelkey
		*p: cpropertieslist
		*p: csortorder
		*p: lsubdirectories
		*p: lusepanel
		*p: npage
		*p: npanelwidth
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	ccolumninfo = 
	cpanel = 
	cpanelfilter = 
	cpanelkey = 
	cpropertieslist = cPanel, cPanelFilter, cPanelKey, lUsePanel, nPanelWidth, cSortOrder, cColumnInfo, lSubDirectories, nPage
	csortorder = |COLFILENAME|
	lsubdirectories = .F.
	lusepanel = .T.
	Name = "custpanel"
	npage = 1
	npanelwidth = 175
	_memberdata = <VFPData>
		<memberdata name="cpanel" display="cPanel"/>
		<memberdata name="cpanelfilter" display="cPanelFilter"/>
		<memberdata name="cpanelkey" display="cPanelKey"/>
		<memberdata name="npanelwidth" display="nPanelWidth"/>
		<memberdata name="setvalues" display="SetValues"/>
		<memberdata name="getvalues" display="GetValues"/>
		<memberdata name="cpropertieslist" display="cPropertiesList"/>
		<memberdata name="csortorder" display="cSortOrder"/>
		<memberdata name="ccolumninfo" display="cColumnInfo"/>
		<memberdata name="lsubdirectories" display="lSubDirectories"/>
		<memberdata name="lusepanel" display="lUsePanel"/>
		<memberdata name="getclassfilename" display="GetClassFileName"/>
		<memberdata name="npage" display="nPage"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE getclassfilename
		Lparameters tcClassLoc, tcPath
		
		*** JRN 02/24/2009 : per Doug ... handles cases of absolute paths and relative to current directory
		
		Do Case
			Case ':' $ tcClassLoc
				Return tcClassLoc
		
			Case File( Fullpath( m.tcClassLoc, m.tcPath ) )
				Return Fullpath(tcClassLoc, tcPath)
		
			Otherwise
				Return Fullpath( m.tcClassLoc )
		Endcase
		
	ENDPROC

	PROCEDURE getvalues
		#Define CRLF Chr[13] + Chr[10]
		
		Local laProperties[1], lcProperty, lcResult, lnCount, lnI
		lcResult = ''
		lnCount	 = Alines(laProperties, This.cPropertiesList , 5, ',')
		For lnI = 1 To lnCount
			lcProperty = laProperties[lnI]
			lcResult   = lcResult + lcProperty + ' = ' + Transform(Getpem(This, lcProperty)) + CRLF
		Endfor
		Return lcResult
	ENDPROC

	PROCEDURE setvalues
		Lparameters lcProperties
		
		Local laProperties[1], lcName, lcProperty, lcValue, lnCount, lnI, lnPos
		
		lnCount = Alines(laProperties, lcProperties, 5)
		For lnI = 1 To lnCount
			lcProperty = laProperties[lnI]
			lnPos	   = At('=', lcProperty)
			If lnPos > 0
				lcName	= Left(lcProperty, lnPos - 2)
				lcValue	= Substr(lcProperty, lnPos + 2)
				Do Case
					Case Not PemStatus(This, lcName, 5)
					
					Case Left(lcName, 1) = 'n'
						This.&lcName = Val(lcValue)
					Case Left(lcName, 1) = 'l'
						This.&lcName = Atc('.T.', lcValue) # 0
					Otherwise 
						This.&lcName = lcValue
				Endcase
			Endif && lnPos > 0
		Endfor && lnI = 1 To lnCount
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS filecontextmenu AS basecontextmenu OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "filecontextmenu"
	_memberdata = <VFPData>

		</VFPData>
	
	PROCEDURE createmenuitems
		Lparameters loGrid, loContextMenu, loRecord
		
		Local lcClass, lcEXT, lcFileName, lcFolder, lnI, loClasses
		lcFileName = Alltrim(loRecord.FullName)
		lcFolder   = Alltrim(loRecord.Folder)
		lcEXT	   = Upper(Justext(lcFileName))
		
		Do Case
			Case Inlist(lcEXT, 'PRG', 'FXP')
				loContextMenu.AddMenuItem('\<Open', , , 'Dbl-Click', 'EditSourceX PRG')
				loContextMenu.AddMenuItem('\<Run', , , , 'Run PRG')
				
				loClasses = This.GetClassesFromPRG(lcFileName)
				Do Case
					Case loClasses.Count > 1
						loContextMenu.AddSubMenu('Modify Class')
						For lnI = 1 To loClasses.Count
							lcClass = Trim(loClasses.Item[lnI].Class)
							loContextMenu.AddMenuItem (lcClass, , , , 'Modify PRG Class', loClasses.Item[lnI])
						Endfor
						loContextMenu.EndSubMenu
					Case loClasses.Count = 1
						lcClass = Trim(loClasses.Item[1].Class)
						loContextMenu.AddMenuItem ('Modify Class ' + lcClass, , , , 'Modify PRG Class', loClasses.Item[1])
				Endcase
				
		
			Case Inlist(lcEXT, 'SCX', 'SCT')
				loContextMenu.AddMenuItem('\<Open', , , 'Dbl-Click', 'EditSourceX SCX')
				loContextMenu.AddMenuItem('Open with \<HackCX', , , , 'HackCX SCX')
				loContextMenu.AddMenuItem()
				loContextMenu.AddMenuItem('\<Run', , , , 'Run Form')
				loContextMenu.AddMenuItem('\<Pack', , , , 'Pack SCX')
		
			Case Inlist(lcEXT, 'VCX', 'VCT')
				loContextMenu.AddMenuItem('\<Open', , , 'Dbl-Click', 'EditSourceX VCX')
				loContextMenu.AddMenuItem('Open with \<HackCX', , , , 'HackCX VCX')
		
				loClasses = This.GetClassesFromVCX(lcFileName)
				Do Case
					Case loClasses.Count > 1
						loContextMenu.AddSubMenu('Modify Class')
						For lnI = 1 To loClasses.Count
							lcClass = Trim(loClasses.Item[lnI])
							loContextMenu.AddMenuItem (lcClass, , , , 'Open Class ' + lcClass)
						Endfor
						loContextMenu.EndSubMenu
					Case loClasses.Count = 1
						lcClass = Trim(loClasses.Item[1])
						loContextMenu.AddMenuItem ('Modify Class ' + lcClass, , , , 'Open Class ' + lcClass)
				Endcase
		
				loContextMenu.AddMenuItem('\<Pack', , , , 'Pack VCX')
		
			Case Inlist(lcEXT, 'FRX', 'FRT')
				loContextMenu.AddMenuItem('\<Open', , , 'Dbl-Click', 'EditSourceX FRX')
				loContextMenu.AddMenuItem('\<Run', , , , 'Run FRX')
				loContextMenu.AddMenuItem('\<Pack', , , , 'Pack FRX')
		
			Case Inlist(lcEXT, 'DBF', 'CDX', 'FPT')
				loContextMenu.AddMenuItem('\<Open with SuperBrowse', , , 'Dbl-Click', 'Open DBF')
				loContextMenu.AddMenuItem('Open w/o \<Browse', , , , 'Open w/o Browse')
				loContextMenu.AddMenuItem('Open with \<Alias', , , , 'Open with Alias')
				loContextMenu.AddMenuItem()
				loContextMenu.AddMenuItem('\<Pack', , , , 'Pack DBF')
				loContextMenu.AddMenuItem('\<Modify Structure', , , , 'Modify Structure')
				loContextMenu.AddMenuItem('\<ReIndex', , , , 'ReIndex')
		
			Otherwise
				loContextMenu.AddMenuItem('\<Open', , , 'Dbl-Click', 'EditSourceX')
		
		Endcase
		
		DoDefault(loGrid, loContextMenu, lcFileName, lcEXT)
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS filteronlycontextmenu AS basecontextmenu OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	Name = "filteronlycontextmenu"
	
	PROCEDURE createmenuitems
		Lparameters loGrid, loContextMenu, lcFileName, lcEXT
		
		This.AddFilters(loGrid, loContextMenu)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS finderengine AS custom 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: addmatch
		*m: createfiletemplates
		*m: createresultscursor
		*m: createtemplate
		*m: cskippedfolders_assign
		*m: decodetimestamp
		*m: excludefolder
		*m: excludeprojectfolder
		*m: filesearch
		*m: getclassfilename
		*m: getclasslibs
		*m: getfiletimestamp
		*m: getpaths
		*m: pathandclasslibssearch
		*m: processfolder
		*m: processproject
		*m: projectsearch
		*m: search
		*p: cdestalias
		*p: chomedir
		*p: clookfor
		*p: cresultsstem
		*p: cresultstable
		*p: cscope
		*p: cskippedextensions
		*p: cskippedfolders
		*p: lcloseproject
		*p: lpathandclasslibs
		*p: lprojecthomedirectory
		*p: lsearchforclass
		*p: lskipextensions
		*p: lskipfolders
		*p: lsubdirectories
		*p: nskippedfolders
		*p: ntemplatecount
		*a: aclasslibs[1,0]
		*a: apaths[1,0]
		*a: askippedfolders[1,0]
		*a: atemplates[1,0]
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	cdestalias = 
	chomedir = 
	clookfor = 
	cresultsstem = FileResults-V1
	cresultstable = 
	cscope = 
	cskippedextensions = BAK FXP VCT SCT PJT FRT CDX FPT TBK
	cskippedfolders = 
	lcloseproject = .F.
	lpathandclasslibs = .F.
	lprojecthomedirectory = .F.
	lsearchforclass = .F.
	lskipextensions = .T.
	lskipfolders = .T.
	lsubdirectories = .F.
	Name = "finderengine"
	nskippedfolders = 0
	ntemplatecount = 0
	_memberdata = <VFPData>
		<memberdata name="cscope" display="cScope"/>
		<memberdata name="clookfor" display="cLookFor"/>
		<memberdata name="lprojecthomedirectory" display="lProjectHomeDirectory"/>
		<memberdata name="lsubdirectories" display="lSubDirectories"/>
		<memberdata name="createresultstable" display="CreateResultsTable"/>
		<memberdata name="openresultstable" display="OpenResultsTable"/>
		<memberdata name="getfinderhome" display="GetFinderHome"/>
		<memberdata name="atemplates" display="aTemplates"/>
		<memberdata name="createfiletemplates" display="CreateFileTemplates"/>
		<memberdata name="ntemplatecount" display="nTemplateCount"/>
		<memberdata name="lsearchforclass" display="lSearchForClass"/>
		<memberdata name="search" display="Search"/>
		<memberdata name="processfolder" display="ProcessFolder"/>
		<memberdata name="addmatch" display="AddMatch"/>
		<memberdata name="filesearch" display="FileSearch"/>
		<memberdata name="cresultsstem" display="cResultsStem"/>
		<memberdata name="cresultstable" display="cResultsTable"/>
		<memberdata name="projectsearch" display="ProjectSearch"/>
		<memberdata name="processproject" display="ProcessProject"/>
		<memberdata name="zapresultstable" display="ZapResultsTable"/>
		<memberdata name="chomedir" display="cHomeDir"/>
		<memberdata name="cskippedextensions" display="cSkippedExtensions"/>
		<memberdata name="decodetimestamp" display="DecodeTimeStamp"/>
		<memberdata name="getfiletimestamp" display="GetFileTimeStamp"/>
		<memberdata name="lskipextensions" display="lSkipExtensions"/>
		<memberdata name="cskippedfolders" display="cSkippedFolders"/>
		<memberdata name="lskipfolders" display="lSkipFolders"/>
		<memberdata name="askippedfolders" display="aSkippedFolders"/>
		<memberdata name="cskippedfolders_assign" display="cSkippedFolders_Assign"/>
		<memberdata name="nskippedfolders" display="nSkippedFolders"/>
		<memberdata name="createtemplate" display="CreateTemplate"/>
		<memberdata name="cdestalias" display="cDestAlias"/>
		<memberdata name="getclassfilename" display="GetClassFileName"/>
		<memberdata name="createresultscursor" display="CreateResultsCursor"/>
		<memberdata name="lpathandclasslibs" display="lPathAndClassLibs"/>
		<memberdata name="pathandclasslibssearch" display="PathAndClassLibsSearch"/>
		<memberdata name="getpaths" display="GetPaths"/>
		<memberdata name="apaths" display="aPaths"/>
		<memberdata name="aclasslibs" display="aClassLibs"/>
		<memberdata name="getclasslibs" display="GetClassLibs"/>
		<memberdata name="lcloseproject" display="lCloseProject"/>
		<memberdata name="excludeprojectfolder" display="ExcludeProjectFolder"/>
		<memberdata name="excludefolder" display="ExcludeFolder"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE addmatch
		Lparameters tcFileName, tnSize, ttTimeStamp, tcClass, tcParentClass, tcClassLoc, tcBaseClass, tnStartRange, tnEndRange
		
		Local lcClassLoc
		
		If Empty(Evl(tcClassLoc, ''))
			lcClassLoc		= ''
		Else
			lcClassLoc		= Lower(This.GetClassFileName(tcClassLoc, tcFileName))
		Endif
		
		Insert Into (This.cDestAlias) (									;
			  FullName,													;
			  Folder,													;
			  FileName,													;
			  Size,														;
			  Timestamp,												;
			  Class,													;
			  Parent,													;
			  ClassLoc,													;
			  BaseClass,												;
			  StartRange,												;
			  EndRange													;
			  )															;
			Values														;
			(															;
			  tcFileName,												;
			  Justpath(tcFileName),										;
			  Justfname(tcFileName),									;
			  Evl(tnSize, 0),											;
			  Evl(ttTimeStamp, This.GetFileTimeStamp(tcFileName)),		;
			  Evl(tcClass, ''),											;
			  Evl(tcParentClass, ''),									;
			  lcClassLoc,												;
			  Evl(tcBaseClass, ''),										;
			  Evl(tnStartRange, 0),										;
			  Evl(tnEndRange, 0)										;
			  )
	ENDPROC

	PROCEDURE createfiletemplates
		Local laPatterns[1], lcExtension, lcFileTypes, lcTemplate, lcTemplates, lnI, lnPatternCount, lnPos
		
		lnPatternCount = Alines(laPatterns, This.cLookFor, 3, '|')
		lcTemplates	   = ''
		For lnI = 1 To lnPatternCount
			lcTemplate	= laPatterns[lnI]
			If '.' $ lcTemplate
				lnPos		= At('.', lcTemplate)
				lcExtension	= Substr(lcTemplate, lnPos + 1)
				lcTemplate	= Left(lcTemplate, lnPos - 1)
			Else
				lcExtension	= ''
			Endif
		
			lcTemplate	= This.CreateTemplate(lcTemplate)
		
			Do Case
				Case Not Empty(lcExtension)
					lcFileTypes = '|' + Chrtran(Upper(lcExtension), ';,.', '|||')
				Case This.lSearchForClass
					lcFileTypes = '|VCX|PRG'
				Otherwise
					lcFileTypes = '|*'
			Endcase
		
			lcTemplates = lcTemplates + Strtran(lcFileTypes, '|', '|' + lcTemplate + '.')
		Endfor
		
		Dimension This.Atemplates[1]
		This.nTemplateCount = Alines(This.Atemplates, Upper(Substr(Strtran(lcTemplates, '\', '*\*'), 2)), 5, '|')
	ENDPROC

	PROCEDURE createresultscursor
		Lparameters tcAlias
		
		Create Cursor (tcAlias) 	(		;
			  FullName		C(240),			;
			  Folder		C(120),			;
			  Filename		C(120),			;
			  Size			I,				;
			  Timestamp		T,				;
			  Class			C(60),			;
			  Parent		C(60),			;
			  ClassLoc		C(240),			;
			  BaseClass		C(20),			;
			  StartRange    I,				;
			  EndRange      I,				;
			  SortKey		C(200)			;
			  )
		
		
	ENDPROC

	PROCEDURE createtemplate
		Lparameters lcTemplate
		
		Local lcExtension, lcFileTypes, lnPos
		lcTemplate = Alltrim(lcTemplate)
		
		* ------------------------------------------------------------
		Do Case
			Case Left(lcTemplate, 1) = '*'
		
			Case Left(lcTemplate, 1) = '^'
				lcTemplate = Substr(lcTemplate, 2)
			Otherwise
				lcTemplate = '*' + lcTemplate
		Endcase
		
		Do Case
			Case Right(lcTemplate, 1) = '*'
		
			Case Right(lcTemplate, 1) = '$'
				lcTemplate = Left(lcTemplate, Len(lcTemplate) - 1)
			Otherwise
				lcTemplate = lcTemplate	+ '*'
		EndCase
		
		*-- if ! is present means exact match (case insensitive) M. Slay 2013-12-27 ----
		If '!' $ lcTemplate
			lcTemplate = Chrtran(lcTemplate, '!*', '')
		Endif
		
		Return lcTemplate
		
	ENDPROC

	PROCEDURE cskippedfolders_assign
		Lparameters tcSkippedFolders
		Local lcFolder, lnCount, lnI
		This.cSkippedFolders = tcSkippedFolders
		
		lnCount = Alines(This.aSkippedFolders, Lower(tcSkippedFolders), 5, '|', ';', Chr[13], Chr[10])
		For lnI = lnCount To 1 Step - 1
			lcFolder = Alltrim(This.aSkippedFolders[lnI])
			Do Case
				Case lcFolder = '*'
					Adel(This.aSkippedFolders, lnI)
					lnCount = lnCount - 1
				Case ':' $ lcFolder
				
				Case lcFolder = '\'
				
				Otherwise 
					This.aSkippedFolders[lnI] = '\' + lcFolder
			Endcase
		Endfor
		
		This.nSkippedFolders = lnCount
		
		
		 
	ENDPROC

	PROCEDURE decodetimestamp
		Lparameters nTimestamp
		
		Local loException, ltDateTime
		Local nDate, nDay, nHr, nMin, nMonth, nSec, nTime, nYear
		
		nDate = Bitrshift(nTimestamp, 16)
		nTime = Bitand(nTimestamp, 2^16 - 1)
		
		nYear  = Bitand(Bitrshift(nDate, 9), 2^8 - 1) + 1980
		nMonth = Bitand(Bitrshift(nDate, 5), 2^4 - 1)
		nDay   = Bitand(nDate, 2^5 - 1)
		
		nHr	 = Bitand(Bitrshift(nTime, 11), 2^5 - 1)
		nMin = Bitand(Bitrshift(nTime, 5), 2^6 - 1)
		nSec = Bitand(nTime, 2^5 - 1)
		
		Try
		    ltDateTime = Datetime(nYear, nMonth, nDay, nHr, nMin, nSec)
		Catch To loException
		    ltDateTime = Datetime(1900, 1, 1)
		Endtry
		
		Return ltDateTime
	ENDPROC

	PROCEDURE excludefolder
		Lparameters tcFolder
		
		Local lcFolder, lcSkipFolder, lnI
		If This.lSkipFolders
			lcFolder = Lower(tcFolder)
			For lnI = 1 To This.nSkippedFolders
				lcSkipFolder = This.Askippedfolders[lnI]
				If Right(lcFolder, Len(lcSkipFolder)) == lcSkipFolder
					Return .T.
				Endif
			Endfor
		Endif && This.lSkipFolders
		
		Return .F.
	ENDPROC

	PROCEDURE excludeprojectfolder
		Lparameters tcFolder
		
		Local lcFolder, lcSkipFolder, lnI
		
		If This.lSkipFolders
			lcFolder = Lower(tcFolder)
			For lnI = 1 To This.nSkippedFolders
				lcSkipFolder = This.Askippedfolders[lnI]
				If Atc(lcSkipFolder + '\', tcFolder + '\') # 0
					Return .T.
				Endif
			Endfor
		Endif
		
		Return .F.
	ENDPROC

	PROCEDURE filesearch
		Lparameters lcFilename, lnSize
		
		This.AddMatch(lcFileName, lnSize)
	ENDPROC

	PROCEDURE getclassfilename
		Lparameters tcClassLoc, tcPath
		
		*** JRN 02/24/2009 : per Doug ... handles cases of absolute paths and relative to current directory
		
		Do Case
			Case ':' $ tcClassLoc
				Return tcClassLoc
		
			Case File( Fullpath( m.tcClassLoc, m.tcPath ) )
				Return Fullpath(tcClassLoc, tcPath)
		
			Otherwise
				Return Fullpath( m.tcClassLoc )
		Endcase
		
	ENDPROC

	PROCEDURE getclasslibs
		Local lcClassLib, lnI
		Alines(This.aClassLibs, Set('ClassLib'), 5, ';', ',', Chr[13], Chr[10])
		* --------------------------------------------------------------------------------
		For lnI = 1 To Alen(This.aClassLibs)
			lcClassLib			 = This.aClassLibs[lnI]
			lcClassLib			 = Alltrim(Left(lcClassLib, Atc(' ALIAS ', lcClassLib)), 1, ' ', '"')
			This.aClassLibs[lnI] = lcClassLib
		Endfor
		
		
	ENDPROC

	PROCEDURE getfiletimestamp
		Lparameters tcFileName
		
		Local laMaxDateTime[1], lcCursor, lcDateTime, lcFileDate, ldFileDate, lnSelect, loException
		Local ltTimeStamp
		ltTimeStamp = Fdate(tcFileName, 1)
		
		If Inlist(Upper(Justext(tcFileName)), 'SCX', 'VCX', 'FRX')
		
			lnSelect = Select()
			Select 0
		
			lcCursor = Sys(2015)
			Try
				Use (tcFileName) Again Shared Alias (lcCursor)
				Select Max(Timestamp) From (lcCursor) Into Array laMaxDateTime
				If laMaxDateTime > 0
					ltTimeStamp = This.DecodeTimeStamp(laMaxDateTime)
				Endif
			Catch To loException
		
			Endtry
		
			Use In (Select(lcCursor))
			Select(lnSelect)
		
		Endif
		
		Return ltTimeStamp
	ENDPROC

	PROCEDURE getpaths
		Local lcFullPath, lnI
		
		Alines(This.aPaths, Curdir() + ';' + Set('Path'), 5, ';', ',', Chr[13], Chr[10])
		* --------------------------------------------------------------------------------
		For lnI = 1 To Alen(This.aPaths)
			lcFullPath		 = Fullpath(This.aPaths[lnI])
			This.aPaths[lnI] = lcFullPath
		Endfor
		* --------------------------------------------------------------------------------
		* Removing duplicates
		For lnI = 2 To Alen(This.aPaths)
			lcFullPath = This.aPaths[lnI]
			If Ascan(This.aPaths, lcFullPath, 1, lnI - 1, -1, 7) # 0
				This.aPaths[lnI] = ''
			Endif
		Endfor
	ENDPROC

	PROCEDURE pathandclasslibssearch
		Local lnI
		
		This.lSubDirectories = .F.
		This.GetPaths()
		For lnI = 1 To Alen(This.aPaths)
			This.ProcessFolder(This.aPaths[lnI])
		Endfor
		
	ENDPROC

	PROCEDURE processfolder
		Lparameters tcFolder
		
		Local laFileList[1], laFolderList[1], lcFilename, lcFolder, lcFolderName, llSuccess, lnFileCnt
		Local lnFileSize, lnFolderCnt, lnI, lnJ
		lcFolder = Addbs(tcFolder)
		
		llSuccess = .T.
		
		For lnI = 1 To This.nTemplateCount
			Try
				lnFileCnt = Adir(laFileList, lcFolder + This.aTemplates[lnI], '', 1)
			Catch to loException
				lnFileCnt = 0
			Endtry
			For lnJ = 1 To lnFileCnt
				lcFilename = laFileList[lnJ, 1]
		
				If Not ((Justext(This.aTemplates[lnI]) == '*') And (' ' + + Upper(Justext(lcFilename)) + ' ') $ This.cSkippedExtensions)
					lnFileSize = laFileList[lnJ, 2]
					If Not This.FileSearch(lcFolder + lcFilename, lnFileSize)
						Exit
					Endif
				Endif
			Endfor
		Endfor
		
		* Process any sub-directories
		If This.lSubDirectories
			Try
				lnFolderCnt = Adir(laFolderList, lcFolder + '*.*', 'D', 1)
			Catch to loException
				lnFolderCnt = 0
			Endtry
			For lnI = 1 To lnFolderCnt
				lcFolderName = laFolderList[lnI, 1]
				If Not lcFolderName == '.'							;
						And Not lcFolderName == '..'				;
						And 'D' $ laFolderList[lnI, 5]				;
						And Directory(lcFolder + lcFolderName)		;
						And Not This.ExcludeFolder(lcFolder + lcFolderName)
					This.ProcessFolder(lcFolder + lcFolderName)
				Endif
			Endfor
		Endif
		
		Return llSuccess
	ENDPROC

	PROCEDURE processproject
		Lparameters toProjectRef
		
		Local lSuccess, laDir[1], lcFilename, lcFullName, lcHomeDir, lcTemplate, lnJ, loFileRef
		
		lcHomeDir	  = Addbs(Upper(toProjectRef.HomeDir))
		This.cHomeDir = lcHomeDir
		
		* now process each file in the project that matches our filetypes
		For Each loFileRef In toProjectRef.Files
			If(Not This.lProjectHomeDirectory Or Addbs(Upper(Justpath(loFileRef.Name))) = lcHomeDir)
				lcFullName = loFileRef.Name
				lcFilename = Justfname(lcFullName)
				If Not This.ExcludeProjectFolder(Justpath(lcFullName))
					For lnJ = 1 To This.nTemplateCount
						lcTemplate = This.aTemplates[lnJ]
						If Like(lcTemplate, Upper(Iif('\' $ lcTemplate, lcFullName, lcFilename)))
							Adir(laDir, lcFullName, '', 1)
							This.FileSearch(Addbs(Justpath(lcFullName)) + laDir[1], laDir[2])
							Exit
						Endif
					Endfor
				Endif && Not This.ExcludeFolder(Justpath(lcFullName))
			Endif
		Endfor
		
	ENDPROC

	PROCEDURE projectsearch
		Lparameters lcProjectFile
		
		Local llOpened, llResult, loErr, loProjectRef
		For Each loProjectRef In Application.Projects
			If Upper(loProjectRef.Name) == Upper(lcProjectFile)
				Return This.ProcessProject(loProjectRef)
			Endif
		Endfor
		
		* We get here if project is not open
		Try
			Modify Project(lcProjectFile) Nowait NoShow
			llOpened = .T.
		Catch To loErr
			Messagebox('Unable to open project file' + Chr[13] + Chr[13] + loErr.Message, 16, 'Failure')
			llOpened = .F.
		Endtry
		
		If llOpened
			loProjectRef = Application.ActiveProject
			llResult	 = This.ProcessProject(loProjectRef)
			If This.lCloseProject
				loProjectRef.Close()
			Endif
			Return llResult
		Else
			Return .F.
		Endif
		
		
		
		
	ENDPROC

	PROCEDURE search
		Lparameters tcDestAlias
		
		Local lAutoYield, lcScope, llSuccess
		
		This.cDestAlias = tcDestAlias
		
		lAutoYield	   = _vfp.AutoYield
		_vfp.AutoYield = .T.
		
		This.CreateFileTemplates()
		This.cSkippedExtensions = Upper(Iif(This.lSkipExtensions, ' ' + Alltrim(Chrtran(This.cSkippedExtensions, ';,.', '   ')) + ' ', ''))
		
		lcScope = This.cScope
		Do Case
			Case This.lPathAndClassLibs 
				llSuccess = This.PathAndClassLibsSearch()
			Case File(lcScope) And 'PJX' == Upper(Justext(lcScope))
				llSuccess = This.ProjectSearch(lcScope)
			Case Directory(lcScope)
				llSuccess	  = This.ProcessFolder(lcScope)
				This.cHomeDir = lcScope
			Otherwise
				llSuccess = .F.
		Endcase
		
		_vfp.AutoYield = lAutoYield
		
		Return llSuccess
	ENDPROC

ENDDEFINE

DEFINE CLASS frmdescendants AS baseform OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdResults" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgClassIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClassIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oDragDrop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClassSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGridClassIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cntTree" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: setpanelfilter
		*m: setrecordsource
		*m: setupsplitter
		*p: cscope
		*p: cscreenpropertyname
		*p: lsearchingenabled
		*p: lstayopen
		*p: ntreewidth
	*</DefinedPropArrayMethod>

	BindControls = .F.
	Caption = "Descendants"
	cscope = .F.
	cscreenpropertyname = 
	DataSession = 2
	DoCreate = .T.
	Height = 155
	ladddescendants = .F.
	Left = 0
	lsearchclass = .T.
	lsearchingenabled = .F.
	lstayopen = .T.
	Name = "frmdescendants"
	ntreewidth = 200
	Top = 0
	Visible = .T.
	Width = 600
	_memberdata = <VFPData>
		<memberdata name="setrecordsource" display="SetRecordSource"/>
		<memberdata name="setupsplitter" display="SetupSplitter"/>
		<memberdata name="ntreewidth" display="nTreeWidth"/>
		<memberdata name="setpanelfilter" display="SetPanelFilter"/>
		<memberdata name="cscope" display="cScope"/>
		<memberdata name="lsearchingenabled" display="lSearchingEnabled"/>
		<memberdata name="lstayopen" display="lStayOpen"/>
		<memberdata name="cscreenpropertyname" display="cScreenPropertyName"/>
		</VFPData>

	ADD OBJECT 'cmdClassIcon' AS commandbutton WITH ;
		Caption = "", ;
		DragIcon = ..\apps\pem editor\images\control.cur, ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 134, ;
		Name = "cmdClassIcon", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 4, ;
		TabStop = .F., ;
		ToolTipText = "", ;
		Top = 4, ;
		Width = 16
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdClassSearch' AS cmdfinder WITH ;
		Caption = "\<Class Search", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 246, ;
		Name = "cmdClassSearch", ;
		TabIndex = 3, ;
		Top = -42, ;
		Width = 87, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGridClassIcon' AS commandbutton WITH ;
		Caption = "", ;
		DragIcon = ..\apps\pem editor\images\control.cur, ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = -92, ;
		Name = "cmdGridClassIcon", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 5, ;
		TabStop = .F., ;
		ToolTipText = "", ;
		Top = -92, ;
		Width = 16
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cntTree' AS paneldescendants WITH ;
		Height = 127, ;
		Left = 4, ;
		Name = "cntTree", ;
		TabIndex = 2, ;
		Top = 24, ;
		oTree.Height = 114, ;
		oTree.Left = 6, ;
		oTree.Name = "oTree", ;
		oTree.Top = 6, ;
		oTree.Width = 188
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="container" />

	ADD OBJECT 'grdResults' AS grdfinder WITH ;
		Height = 147, ;
		Left = 219, ;
		Name = "grdResults", ;
		TabIndex = 1, ;
		Top = 4, ;
		Width = 375, ;
		colClass.Header1.Name = "Header1", ;
		colClass.Name = "colClass", ;
		colClass.Text1.Name = "Text1", ;
		colFileName.Header1.Name = "Header1", ;
		colFileName.Name = "colFileName", ;
		colFileName.Text1.Name = "Text1", ;
		colFolder.Header1.Name = "Header1", ;
		colFolder.Name = "colFolder", ;
		colFolder.Text1.Name = "Text1", ;
		colParentClass.Header1.Name = "Header1", ;
		colParentClass.Name = "colParentClass", ;
		colParentClass.Text1.Name = "Text1", ;
		colClassLoc.Header1.Name = "Header1", ;
		colClassLoc.Name = "colClassLoc", ;
		colClassLoc.Text1.Name = "Text1", ;
		colBaseClass.Header1.Name = "Header1", ;
		colBaseClass.Name = "colBaseClass", ;
		colBaseClass.Text1.Name = "Text1", ;
		colBaseClass.Width = 0, ;
		colTimeStamp.Header1.Name = "Header1", ;
		colTimeStamp.Name = "colTimeStamp", ;
		colTimeStamp.Text1.Name = "Text1", ;
		colSize.Header1.Name = "Header1", ;
		colSize.Name = "colSize", ;
		colSize.Text1.Name = "Text1", ;
		colExt.Header1.Name = "Header1", ;
		colExt.Name = "colExt", ;
		colExt.Text1.Name = "Text1"
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="grid" />

	ADD OBJECT 'imgClassIcon' AS image WITH ;
		BackStyle = 0, ;
		Height = 16, ;
		Left = 134, ;
		Name = "imgClassIcon", ;
		Picture = ..\apps\pem editor\images\clibrary.ico, ;
		Stretch = 1, ;
		Top = 4, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'oDragDrop' AS custdragdrop WITH ;
		Height = 17, ;
		Left = 339, ;
		Name = "oDragDrop", ;
		Top = 0, ;
		Width = 28
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="custom" />
	
	PROCEDURE Destroy
		RemoveProperty(_Screen, This.cScreenPropertyName)
		
		This.nDockable	 = This.Dockable
		This.cColumnInfo = This.grdResults.GetColumnInfo()
		This.nTreeWidth	 = This.cntTree.Width
		
		This.oSettings.Save(This)
		
		This.oSettings = Null
		This.oTools	   = Null
		
	ENDPROC

	PROCEDURE getallsettings
		Local lcProperties
		
		Text To lcProperties Noshow Pretext 15
		cColumnInfo
		nTreeWidth
		cSortOrder
		Endtext
		
		Return Chrtran(lcProperties, ' ', ',')
	ENDPROC

	PROCEDURE Init
		* tools home page = http://vfpx.codeplex.com/wikipage?title=thor%20tools%20object
		* ThorFormSettings home page = http://vfpx.codeplex.com/wikipage?title=Thor%20Framework%20FormSettings
		
		Local loContextMenu As ContextMenu Of 'C:\VISUAL FOXPRO\PROGRAMS\MyThor\Thor\Source\Thor_Menu.vcx'
		Local loSettings As Thor_Form_Settings Of 'C:\VISUAL FOXPRO\PROGRAMS\MyThor\Thor\Source\Thor_FoxResource.vcx'
		Local lcClassLibrary
		
		With This
			.LockScreen = .T.
		
			Use(Execscript(_Screen.cThorDispatcher, 'Full Path=THOR_PROC_FileTypes.DBF')) 	Again In 0 Alias FileTypes
			Use(Execscript(_Screen.cThorDispatcher, 'Full Path=THOR_PROC_BaseClasses.DBF')) Again In 0 Alias BaseClasses
		
			.oTools	   = Execscript(_Screen.cThorDispatcher, 'Class= tools from pemeditor')
			.oSettings = Execscript(_Screen.cThorDispatcher, 'Class= ThorFormSettings', 'Descendants')
		
			.oSettings.Restore(Thisform, 'nDockable')
			.Dockable = .nDockable && since this makes the form visible
			.oSettings.Restore(Thisform, 'Height, Width, Top, Left')
		
			.oSettings.Restore(Thisform, .GetAllSettings())
		
			.grdResults.SetColumnInfo(This.cColumnInfo)
			.LockScreen = .F.
		
		Endwith
		
	ENDPROC

	PROCEDURE setpanelfilter
		Lparameters lcPanelFilter
		
		If Thisform.cPanelFilter == lcPanelFilter
			Return
		Endif
		
		Thisform.cPanelFilter = lcPanelFilter
		Thisform.RefreshResults()
		
		
	ENDPROC

	PROCEDURE setrecordsource
		Lparameters lcXML
		
		XMLToCursor(lcXML, 'crsr_Results')
		Goto top in crsr_Results
		Select * from crsr_Results into cursor crsr_SearchResults Readwrite 
		
		This.cntTree.LoadTree()
		Goto top in crsr_Results
		
		This.Caption = 'Descendants of class ' + Trim(crsr_Results.Class)
		This.BindControls = .T.
		
		This.SetupSplitter(This.nTreeWidth)
		
	ENDPROC

	PROCEDURE setupsplitter
		Lparameters lnPanelWidth
		
		#Define cnMARGIN 4
		
		Local lnAnchor, loGrid, loTree
		
		loGrid = This.grdResults
		loTree = This.cntTree
		With loTree
			.Left	 = 6
			.Visible = .T.
			.Height	 = loGrid.Top + loGrid.Height - loTree.Top
			.Width	 = lnPanelWidth
			.Anchor	 = 5
		Endwith
		
		This.Newobject('oSplitterH', 'Thor_SFSplitterH', Execscript(_Screen.cThorDispatcher, 'Full Path=THOR_SFSPLITTER.VCX'))
		With This.oSplitterH
			.lShowGripper	 = .T.
			.cObject1Name	 = 'cntTree'
			.cObject2Name	 = 'grdResults'
			.nObject1MinSize = 150
			.nObject2MinSize = 100
			.BackColor		 = Rgb(192, 192, 192)
			.BackStyle		 = 1
			.Top			 = loTree.Top
			.Height			 = loTree.Height
			.Left			 = loTree.Left + loTree.Width + cnMARGIN
			.Anchor			 = 5
			.Visible		 = .T.
		Endwith
		
		With loGrid
			lnAnchor = .Anchor
			.Anchor	 = 0
			.Left	 = This.oSplitterH.Left + This.oSplitterH.Width + cnMARGIN
			.Width	 = This.Width - .Left - 7
			.Anchor	 = lnAnchor
		Endwith
		
		
		
	ENDPROC

	PROCEDURE cmdClassIcon.DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.oDragDrop.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdClassIcon.DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.oDragDrop.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

	PROCEDURE cmdClassIcon.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		Thisform.oDragDrop.MouseDown(nButton, nShift, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdClassIcon.Refresh
		Local llEnabled
		llEnabled = Not Empty (Thisform.oDragDrop.cClass) and Not Empty (Thisform.oDragDrop.cBaseClass)
		
		This.Visible = llEnabled
		This.Enabled = llEnabled
		Thisform.imgClassIcon.Visible = llEnabled
		Thisform.imgClassIcon.Enabled = llEnabled
		
	ENDPROC

	PROCEDURE cmdClassIcon.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.oDragDrop.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.oDragDrop.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		Thisform.oDragDrop.MouseDown(nButton, nShift, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.Refresh
		Local llEnabled
		llEnabled = Not Empty (Thisform.oDragDrop.cClass) and Not Empty (Thisform.oDragDrop.cBaseClass)
		
		This.Visible = llEnabled
		This.Enabled = llEnabled
		Thisform.imgClassIcon.Visible = llEnabled
		Thisform.imgClassIcon.Enabled = llEnabled
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE cntTree.Resize
		#Define cnOffset 10
		
		Thisform.cmdClassIcon.Left = This.Width - cnOffset
		Thisform.imgClassIcon.Left = This.Width - cnOffset
		
	ENDPROC

	PROCEDURE imgClassIcon.DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE imgClassIcon.DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmfinder AS baseform OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chklProjectHomeDirectory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblLookFor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblSearching" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboLookFor" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkStayOpen" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVideo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdHideFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgHelp" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClassSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklSubDirectories" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdOptions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdFileSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklActiveProject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklCurrentDirectory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklPathAndClassLibs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBuild" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBrowseProject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBrowseDir" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklSkipExtensions" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblVersion" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklSkipFolders" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdVFPX" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdShowFilter" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line2" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgClassIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClassIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oDragDrop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGridClassIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdResults" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: addmrusubmenu
		*m: addpanel
		*m: ccolumninfo_access
		*m: ccolumninfo_assign
		*m: chdirtoscope
		*m: cimagefolder_access
		*m: clookfor_assign
		*m: createmrucontextmenu
		*m: createresultscursor
		*m: cresultsfilename_access
		*m: cscope_assign
		*m: csortorder_access
		*m: csortorder_assign
		*m: descendants
		*m: getdirfromscope
		*m: getfinderscope
		*m: getresultsfilename
		*m: getscopetype
		*m: getsettingsfilename
		*m: highlightlookfor
		*m: highlightpreviousgridrow
		*m: multipleinstances
		*m: opanelproperties_access
		*m: openresultscursor
		*m: osearchengine_access
		*m: panelinit
		*m: panelwidthchanged
		*m: removepanel
		*m: resourcefile
		*m: restoreallproperties
		*m: restorecolumninfo
		*m: restoredocking
		*m: savedockinfo
		*m: savemrulists
		*m: search
		*m: searchinit
		*m: selectpanelfilter
		*m: setfontsize
		*m: setoptions
		*m: setpanelfilter
		*m: showpathclasslibs
		*m: togglefilter
		*m: transferpropertiestoengine
		*m: updatemrulist
		*m: whereused
		*p: cclasspanelproperties
		*p: cdirectorymrus
		*p: cdockwindow
		*p: cfavoriteslist
		*p: cfilepanelproperties
		*p: cimagefolder
		*p: clookfor
		*p: clookformrus
		*p: cpathandclasslibs
		*p: cprojectmrus
		*p: cresultsfilename
		*p: cscope
		*p: cscreenproperty
		*p: csearchengineclass
		*p: csearchengineclasslibrary
		*p: csearchproperties
		*p: cskippedextensions
		*p: cskippedfolders
		*p: cversion
		*p: lactiveproject
		*p: lclasssearchasdefault
		*p: lcurrentdirectory
		*p: ldocked
		*p: lpathandclasslibs
		*p: lprojecthomedirectory
		*p: lsearching
		*p: lsearchingenabled
		*p: lskipextensions
		*p: lskipfolders
		*p: lstayopen
		*p: lsubdirectories
		*p: ndockposition
		*p: nfontsize
		*p: ngridrecno
		*p: nmousebutton
		*p: nmrudisplaycount
		*p: oclasspanelproperties
		*p: oclasssearchengine
		*p: ofilepanelproperties
		*p: ofilesearchengine
		*p: opanelproperties
		*p: osearchengine
	*</DefinedPropArrayMethod>

	AllowOutput = .F.
	BindControls = .F.
	Caption = "Finder"
	cclasspanelproperties = 
	cdirectorymrus = 
	cdockwindow = 
	cfavoriteslist = 
	cfilepanelproperties = 
	cimagefolder = 
	clookfor = 
	clookformrus = 
	cpathandclasslibs = << Path or ClassLibs >>
	cprojectmrus = 
	cresultsfilename = FinderResults
	cscope = 
	cscreenproperty = 
	csearchengineclass = 
	csearchengineclasslibrary = 
	csearchproperties = cLookFor cScope lProjectHomeDirectory lSubDirectories lSkipExtensions cSkippedExtensions lSkipFolders cSkippedFolders lPathAndClassLibs
	cskippedextensions = BAK CDX DCT DCX ERR FPT FRT FXP MNT MPR MPX PJT SCT TBK VCT
	cskippedfolders = .Hg
	cversion = V1.1.19 (2014/11/26)
	DataSession = 2
	DoCreate = .T.
	FontSize = 8
	Height = 253
	lactiveproject = .F.
	ladddescendants = .T.
	lclasssearchasdefault = .F.
	lcurrentdirectory = .T.
	ldocked = .F.
	Left = 0
	lformaddobject = .F.
	lpathandclasslibs = .F.
	lprojecthomedirectory = .F.
	lsearching = .F.
	lsearchingenabled = .T.
	lskipextensions = .T.
	lskipfolders = .T.
	lstayopen = .F.
	lsubdirectories = .T.
	MinHeight = 253
	MinWidth = 580
	Name = "frmfinder"
	ndockposition = 0
	nfontsize = 8
	ngridrecno = 0
	nmousebutton = 0
	nmrudisplaycount = 8
	oclasspanelproperties = .NULL.
	oclasssearchengine = .NULL.
	ofilepanelproperties = .NULL.
	ofilesearchengine = .NULL.
	opanelproperties = .NULL.
	osearchengine = .NULL.
	ShowTips = .T.
	Top = 0
	Width = 580
	WindowState = 2
	_memberdata = <VFPData>
		<memberdata name="csortorder" display="cSortOrder"/>
		<memberdata name="cscope" display="cScope"/>
		<memberdata name="lprojecthomedirectory" display="lProjectHomeDirectory"/>
		<memberdata name="lsubdirectories" display="lSubDirectories"/>
		<memberdata name="lstayopen" display="lStayOpen"/>
		<memberdata name="lactiveproject" display="lActiveProject"/>
		<memberdata name="lcurrentdirectory" display="lCurrentDirectory"/>
		<memberdata name="clookfor" display="cLookFor"/>
		<memberdata name="cscope_assign" display="cScope_Assign"/>
		<memberdata name="otools" display="oTools"/>
		<memberdata name="ndockable" display="nDockable"/>
		<memberdata name="csearchengineclass" display="cSearchEngineClass"/>
		<memberdata name="osearchengine" display="oSearchEngine"/>
		<memberdata name="csearchengineclasslibrary" display="cSearchEngineClassLibrary"/>
		<memberdata name="refreshresults" display="RefreshResults"/>
		<memberdata name="selectresults" display="SelectResults"/>
		<memberdata name="setsortorder" display="SetSortOrder"/>
		<memberdata name="ccolumninfo" display="cColumnInfo"/>
		<memberdata name="restorecolumninfo" display="RestoreColumnInfo"/>
		<memberdata name="chomedir" display="cHomeDir"/>
		<memberdata name="search" display="Search"/>
		<memberdata name="getrelativepath" display="GetRelativePath"/>
		<memberdata name="clookfor_assign" display="cLookFor_Assign"/>
		<memberdata name="editsourcefile" display="EditSourceFile"/>
		<memberdata name="clookformrus" display="cLookForMRUs"/>
		<memberdata name="updatemrulist" display="UpdateMRUList"/>
		<memberdata name="searchinit" display="SearchInit"/>
		<memberdata name="cprojectmrus" display="cProjectMRUs"/>
		<memberdata name="cdirectorymrus" display="cDirectoryMRUs"/>
		<memberdata name="gridcontextmenu" display="GridContextMenu"/>
		<memberdata name="griddoubleclick" display="GridDoubleClick"/>
		<memberdata name="transferpropertiestoengine" display="TransferPropertiesToEngine"/>
		<memberdata name="savemrulists" display="SaveMRULists"/>
		<memberdata name="cfavoriteslist" display="cFavoritesList"/>
		<memberdata name="cskippedextensions" display="cSkippedExtensions"/>
		<memberdata name="lskipextensions" display="lSkipExtensions"/>
		<memberdata name="lskipfolders" display="lSkipFolders"/>
		<memberdata name="cskippedfolders" display="cSkippedFolders"/>
		<memberdata name="setoptions" display="SetOptions"/>
		<memberdata name="lsearching" display="lSearching"/>
		<memberdata name="highlightlookfor" display="HighlightLookFor"/>
		<memberdata name="ccolumnfilter" display="cColumnFilter"/>
		<memberdata name="setcolumnfilter" display="SetColumnFilter"/>
		<memberdata name="ngridrecno" display="nGridRecno"/>
		<memberdata name="osettings" display="oSettings"/>
		<memberdata name="getallsettings" display="GetAllSettings"/>
		<memberdata name="oclasssearchengine" display="oClassSearchEngine"/>
		<memberdata name="ofilesearchengine" display="oFileSearchEngine"/>
		<memberdata name="lsearchclass" display="lSearchClass"/>
		<memberdata name="lclasssearchasdefault" display="lClassSearchAsDefault"/>
		<memberdata name="savedraginfo" display="SaveDragInfo"/>
		<memberdata name="nmousebutton" display="nMouseButton"/>
		<memberdata name="lformaddobject" display="lFormAddObject"/>
		<memberdata name="createresultscursor" display="CreateResultsCursor"/>
		<memberdata name="openresultscursor" display="OpenResultsCursor"/>
		<memberdata name="cresultsfilename" display="cResultsFileName"/>
		<memberdata name="getresultsfilename" display="GetResultsFileName"/>
		<memberdata name="getdirfromscope" display="GetDirFromScope"/>
		<memberdata name="nmrudisplaycount" display="nMRUDisplayCount"/>
		<memberdata name="resourcefile" display="ResourceFile"/>
		<memberdata name="createmrucontextmenu" display="CreateMRUContextMenu"/>
		<memberdata name="addmrusubmenu" display="AddMRUSubMenu"/>
		<memberdata name="chdirtoscope" display="ChDirToScope"/>
		<memberdata name="ncolumnfiltercount" display="nColumnFilterCount"/>
		<memberdata name="acolumnfilters" display="aColumnFilters"/>
		<memberdata name="ccolumnfilters" display="cColumnFilters"/>
		<memberdata name="getcolumnfilters" display="GetColumnFilters"/>
		<memberdata name="setcolumnfilters" display="SetColumnFilters"/>
		<memberdata name="panelinit" display="PanelInit"/>
		<memberdata name="removepanel" display="RemovePanel"/>
		<memberdata name="addpanel" display="AddPanel"/>
		<memberdata name="panelwidthchanged" display="PanelWidthChanged"/>
		<memberdata name="togglefilter" display="ToggleFilter"/>
		<memberdata name="setpanelfilter" display="SetPanelFilter"/>
		<memberdata name="opanelproperties" display="oPanelProperties"/>
		<memberdata name="oclasspanelproperties" display="oClassPanelProperties"/>
		<memberdata name="ofilepanelproperties" display="oFilePanelProperties"/>
		<memberdata name="cclasspanelproperties" display="cClassPanelProperties"/>
		<memberdata name="cfilepanelproperties" display="cFilePanelProperties"/>
		<memberdata name="opanelproperties_access" display="oPanelProperties_Access"/>
		<memberdata name="osearchengine_access" display="oSearchEngine_Access"/>
		<memberdata name="selectpanelfilter" display="SelectPanelFilter"/>
		<memberdata name="csortorder_access" display="cSortOrder_Access"/>
		<memberdata name="csortorder_assign" display="cSortOrder_Assign"/>
		<memberdata name="ccolumninfo_access" display="cColumnInfo_Access"/>
		<memberdata name="ccolumninfo_assign" display="cColumnInfo_Assign"/>
		<memberdata name="cversion" display="cVersion"/>
		<memberdata name="lsearchingenabled" display="lSearchingEnabled"/>
		<memberdata name="highlightpreviousgridrow" display="HighlightPreviousGridRow"/>
		<memberdata name="descendants" display="Descendants"/>
		<memberdata name="csearchproperties" display="cSearchProperties"/>
		<memberdata name="whereused" display="WhereUsed"/>
		<memberdata name="height" display="Height"/>
		<memberdata name="width" display="Width"/>
		<memberdata name="lpathandclasslibs" display="lPathAndClassLibs"/>
		<memberdata name="getscopetype" display="GetScopeType"/>
		<memberdata name="cpathandclasslibs" display="cPathAndClassLibs"/>
		<memberdata name="savedockinfo" display="SaveDockInfo"/>
		<memberdata name="ldocked" display="lDocked"/>
		<memberdata name="ndockposition" display="nDockPosition"/>
		<memberdata name="cdockwindow" display="cDockWindow"/>
		<memberdata name="restoredocking" display="RestoreDocking"/>
		<memberdata name="showpathclasslibs" display="ShowPathClassLibs"/>
		<memberdata name="caption" display="Caption"/>
		<memberdata name="restoreallproperties" display="RestoreAllProperties"/>
		<memberdata name="multipleinstances" display="MultipleInstances"/>
		<memberdata name="getsettingsfilename" display="GetSettingsFileName"/>
		<memberdata name="getfinderscope" display="GetFinderScope"/>
		<memberdata name="cresultsfilename_access" display="cResultsFileName_Access"/>
		<memberdata name="cscreenproperty" display="cScreenProperty"/>
		<memberdata name="nfontsize" display="nFontSize"/>
		<memberdata name="setfontsize" display="SetFontSize"/>
		<memberdata name="cimagefolder" display="cImageFolder"/>
		<memberdata name="cimagefolder_access" display="cImageFolder_Access"/>
		</VFPData>

	ADD OBJECT 'cboLookFor' AS cbofinder WITH ;
		DisplayCount = 25, ;
		FontSize = 8, ;
		Format = "", ;
		Height = 21, ;
		Left = 78, ;
		Name = "cboLookFor", ;
		Style = 0, ;
		TabIndex = 2, ;
		Top = 5, ;
		Width = 193, ;
		ZOrderSet = 3
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="combobox" />

	ADD OBJECT 'cboScope' AS cbofinder WITH ;
		Anchor = 10, ;
		DisabledForeColor = 0,0,0, ;
		DisplayCount = 25, ;
		FontSize = 8, ;
		Format = "", ;
		Height = 21, ;
		Left = 78, ;
		MaxLength = 254, ;
		Name = "cboScope", ;
		Style = 0, ;
		TabIndex = 7, ;
		Top = 34, ;
		Width = 191, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="combobox" />

	ADD OBJECT 'chklActiveProject' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 8, ;
		AutoSize = .T., ;
		Caption = "\<Active Project", ;
		ControlSource = "ThisForm.lActiveProject", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 285, ;
		Name = "chklActiveProject", ;
		TabIndex = 8, ;
		Top = 35, ;
		Width = 90, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklCurrentDirectory' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 8, ;
		AutoSize = .T., ;
		Caption = "Cu\<rrent Dir.", ;
		ControlSource = "ThisForm.lCurrentDirectory", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 382, ;
		Name = "chklCurrentDirectory", ;
		TabIndex = 9, ;
		Top = 35, ;
		Width = 81, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklPathAndClassLibs' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 8, ;
		AutoSize = .T., ;
		Caption = "Path/Class\<Libs", ;
		ControlSource = "ThisForm.lPathAndClassLibs", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 470, ;
		Name = "chklPathAndClassLibs", ;
		TabIndex = 9, ;
		ToolTipText = "Searches current path and, for Class Search, classlibs", ;
		Top = 35, ;
		Width = 103, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklProjectHomeDirectory' AS chkfinder WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Home directory and sub-directories only", ;
		ControlSource = "ThisForm.lProjectHomeDirectory", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 78, ;
		Name = "chklProjectHomeDirectory", ;
		TabIndex = 12, ;
		Top = 60, ;
		Visible = .F., ;
		Width = 211, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklSkipExtensions' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 6, ;
		AutoSize = .T., ;
		Caption = "Ignore specified \<extensions", ;
		ControlSource = "ThisForm.lSkipExtensions", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 210, ;
		Name = "chklSkipExtensions", ;
		TabIndex = 16, ;
		ToolTipText = 'Determines whether files with extensions in the "Extensions to ignore" list (see the Options form) are excluded from the search.', ;
		Top = 231, ;
		Width = 169, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklSkipFolders' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 6, ;
		AutoSize = .T., ;
		Caption = "\<Ignore specified folders", ;
		ControlSource = "ThisForm.lSkipFolders", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 398, ;
		Name = "chklSkipFolders", ;
		TabIndex = 17, ;
		ToolTipText = 'Determines whether folders in the "Folders to ignore" list (see the Options form) are excluded from the search.', ;
		Top = 231, ;
		Width = 147, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklSubDirectories' AS chkfinder WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Searc\<h sub-directories", ;
		ControlSource = "ThisForm.lSubDirectories", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 78, ;
		Name = "chklSubDirectories", ;
		TabIndex = 13, ;
		Top = 60, ;
		Width = 129, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chkStayOpen' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 6, ;
		AutoSize = .T., ;
		Caption = "\<Stay open", ;
		ControlSource = "ThisForm.lStayOpen", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 128, ;
		Name = "chkStayOpen", ;
		TabIndex = 18, ;
		ToolTipText = "Determines whether this form remains open after opening a file or executing an item from a file's context menu.", ;
		Top = 231, ;
		Width = 72, ;
		ZOrderSet = 4
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdBrowseDir' AS cmdfinder WITH ;
		Anchor = 8, ;
		Caption = "Browse \<Dir.", ;
		Default = .F., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 427, ;
		Name = "cmdBrowseDir", ;
		TabIndex = 11, ;
		Top = 55, ;
		Width = 80, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdBrowseProject' AS cmdfinder WITH ;
		Anchor = 8, ;
		Caption = "\<Browse Project", ;
		Default = .F., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 321, ;
		Name = "cmdBrowseProject", ;
		TabIndex = 10, ;
		Top = 55, ;
		Width = 97, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdBuild' AS cmdfinder WITH ;
		Anchor = 8, ;
		Caption = "Build", ;
		Default = .F., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 260, ;
		Name = "cmdBuild", ;
		TabIndex = 10, ;
		Top = 56, ;
		Width = 52, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS cmdfinder WITH ;
		Anchor = 6, ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = -100, ;
		Name = "cmdCancel", ;
		TabIndex = 5, ;
		Top = -100, ;
		Width = 68, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdClassIcon' AS commandbutton WITH ;
		Caption = "", ;
		DragIcon = ..\apps\pem editor\images\control.cur, ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 9, ;
		Name = "cmdClassIcon", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 14, ;
		TabStop = .F., ;
		ToolTipText = "", ;
		Top = 8, ;
		Width = 16
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdClassSearch' AS cmdfinder WITH ;
		Caption = "\<Class Search", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 370, ;
		Name = "cmdClassSearch", ;
		TabIndex = 1, ;
		Top = 4, ;
		Width = 87, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdFileSearch' AS cmdfinder WITH ;
		Caption = "\<File Search", ;
		Default = .T., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 280, ;
		Name = "cmdFileSearch", ;
		TabIndex = 1, ;
		Top = 4, ;
		Width = 76, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGridClassIcon' AS commandbutton WITH ;
		Caption = "", ;
		DragIcon = ..\apps\pem editor\images\control.cur, ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = -100, ;
		Name = "cmdGridClassIcon", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 14, ;
		TabStop = .F., ;
		ToolTipText = "", ;
		Top = -100, ;
		Width = 16
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdHideFilter' AS cmdfinder WITH ;
		Anchor = 0, ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 6, ;
		Name = "cmdHideFilter", ;
		Picture = left.bmp, ;
		PicturePosition = 13, ;
		SpecialEffect = 2, ;
		TabIndex = 15, ;
		ToolTipText = "Hides the pageframe panel.", ;
		Top = 59, ;
		Width = 24, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdOptions' AS cmdfinder WITH ;
		Anchor = 6, ;
		Caption = "\<Options", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 44, ;
		Name = "cmdOptions", ;
		TabIndex = 5, ;
		Top = 228, ;
		Width = 68, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdScope' AS cmdfinder WITH ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 49, ;
		Name = "cmdScope", ;
		Picture = ..\images\folder.bmp, ;
		PicturePosition = 13, ;
		SpecialEffect = 2, ;
		TabIndex = 15, ;
		Top = 33, ;
		Width = 21, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdShowFilter' AS cmdfinder WITH ;
		Anchor = 0, ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 6, ;
		Name = "cmdShowFilter", ;
		Picture = right.bmp, ;
		PicturePosition = 13, ;
		SpecialEffect = 2, ;
		TabIndex = 15, ;
		ToolTipText = "Shows the pageframe panel.", ;
		Top = 59, ;
		Width = 24, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdVFPX' AS cmdfinder WITH ;
		Anchor = 12, ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 22, ;
		Left = 480, ;
		Name = "cmdVFPX", ;
		Picture = ..\images\vfpxpoweredby_alternative.gif, ;
		PicturePosition = 13, ;
		SpecialEffect = 2, ;
		TabIndex = 15, ;
		Top = 228, ;
		Width = 94, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdVideo' AS cmdfinder WITH ;
		Anchor = 8, ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 523, ;
		Name = "cmdVideo", ;
		Picture = ..\images\video.png, ;
		PicturePosition = 13, ;
		SpecialEffect = 2, ;
		TabIndex = 15, ;
		ToolTipText = "Introductory video for Finder", ;
		Top = 5, ;
		Width = 21, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'grdResults' AS grdfinder WITH ;
		Height = 138, ;
		Left = 6, ;
		Name = "grdResults", ;
		Top = 84, ;
		Width = 567, ;
		colClass.Header1.Name = "Header1", ;
		colClass.Name = "colClass", ;
		colClass.Text1.Name = "Text1", ;
		colFileName.Header1.Name = "Header1", ;
		colFileName.Name = "colFileName", ;
		colFileName.Text1.Name = "Text1", ;
		colFolder.Header1.Name = "Header1", ;
		colFolder.Name = "colFolder", ;
		colFolder.Text1.Name = "Text1", ;
		colParentClass.Header1.Name = "Header1", ;
		colParentClass.Name = "colParentClass", ;
		colParentClass.Text1.Name = "Text1", ;
		colClassLoc.Header1.Name = "Header1", ;
		colClassLoc.Name = "colClassLoc", ;
		colClassLoc.Text1.Name = "Text1", ;
		colBaseClass.Header1.Name = "Header1", ;
		colBaseClass.Name = "colBaseClass", ;
		colBaseClass.Text1.Name = "Text1", ;
		colTimeStamp.Header1.Name = "Header1", ;
		colTimeStamp.Name = "colTimeStamp", ;
		colTimeStamp.Text1.Name = "Text1", ;
		colSize.Header1.Name = "Header1", ;
		colSize.Name = "colSize", ;
		colSize.Text1.Name = "Text1", ;
		colExt.Header1.Name = "Header1", ;
		colExt.Name = "colExt", ;
		colExt.Text1.Name = "Text1"
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="grid" />

	ADD OBJECT 'imgClassIcon' AS image WITH ;
		BackStyle = 0, ;
		Height = 16, ;
		Left = 9, ;
		Name = "imgClassIcon", ;
		Picture = ..\images\clibrary.ico, ;
		Stretch = 1, ;
		Top = 8, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'imgHelp' AS cmdfinder WITH ;
		Anchor = 8, ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 551, ;
		Name = "imgHelp", ;
		Picture = ..\images\refhelp.bmp, ;
		PicturePosition = 13, ;
		SpecialEffect = 2, ;
		TabIndex = 15, ;
		ToolTipText = "VFPX home page for Finder.", ;
		Top = 5, ;
		Width = 21, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblLookFor' AS lblfinder WITH ;
		Alignment = 1, ;
		Caption = "Search:", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 30, ;
		Name = "lblLookFor", ;
		TabIndex = 4, ;
		Top = 9, ;
		Width = 41, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="label" />

	ADD OBJECT 'lblScope' AS lblfinder WITH ;
		Alignment = 1, ;
		Caption = "Sco\<pe:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 5, ;
		Name = "lblScope", ;
		TabIndex = 6, ;
		Top = 38, ;
		Width = 40, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="label" />

	ADD OBJECT 'lblSearching' AS lblfinder WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "... Searching ...", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 469, ;
		Name = "lblSearching", ;
		TabIndex = 3, ;
		Top = 9, ;
		Width = 75, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="label" />

	ADD OBJECT 'lblVersion' AS lblfinder WITH ;
		Alignment = 0, ;
		Anchor = 12, ;
		AutoSize = .T., ;
		Caption = "... Searching ...", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 363, ;
		Name = "lblVersion", ;
		TabIndex = 3, ;
		Top = 232, ;
		Width = 82, ;
		ZOrderSet = 2
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		Anchor = 10, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line1", ;
		Top = 30, ;
		Width = 586
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'Line2' AS line WITH ;
		Anchor = 14, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line2", ;
		Top = 225, ;
		Width = 586
		*< END OBJECT: BaseClass="line" />

	ADD OBJECT 'oDragDrop' AS custdragdrop WITH ;
		Height = 17, ;
		Left = 119, ;
		Name = "oDragDrop", ;
		Top = 47, ;
		Width = 28
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="custom" />
	
	PROCEDURE Activate
		Set Talk Off
		This.Refresh()
		
	ENDPROC

	PROCEDURE addmrusubmenu
		Lparameters loContextMenu, lcCaption, lcType
		
		Local laDir[1], lcClass, lcFile, lcFileInfo, lcFileName, lcHomeDir, lcKeystroke, lnI, loMRUList
		loMRUList = This.oTools.GetMRUList(lcType)
		If loMRUList.Count = 0
			Return
		Endif
		
		loContextMenu.AddSubMenu(lcCaption)
		lcHomeDir =  Addbs(Thisform.cHomeDir)
		For lnI = 1 To Min(loMRUList.Count, Thisform.nMRUDisplayCount)
			lcFileInfo = loMRUList[lnI]
			lcFile	   = Getwordnum(lcFileInfo, 1, '|')
			lcClass	   = Getwordnum(lcFileInfo, 2, '|')
		
			If 0 # Adir(laDir, lcFile, '', 1)
				lcFileName = laDir[1, 1]
			Else
				lcFileName = Justfname(lcFile)
			Endif
		
			lcCaption = Thisform.GetRelativePath(lcFile, lcHomeDir)
			If Upper(lcCaption) == Upper(lcFileName)
				lcCaption	= lcFileName
			Else
				lcCaption	= lcFileName + ' from ' + Lower(Justpath(lcCaption))
			Endif
		
			If Not Empty(lcClass)
				lcCaption = Lower(lcClass) + ' of ' + lcCaption
			Endif
		
			loContextMenu.AddMenuItem(lcCaption, , , , , lcFileInfo)
		Endfor
		loContextMenu.EndSubMenu(lcCaption)
		
		
	ENDPROC

	PROCEDURE addpanel
		Lparameters lcNewClass, lnPage, lcPanelKey
		
		#Define cnMARGIN 0
		
		Local lnAnchor, loGrid
		
		loGrid = This.grdResults
		
		This.Newobject('oPanel', m.lcNewClass, This.ClassLibrary)
		With This.oPanel
			.Top	 = m.loGrid.Top
			.Left	 = 6
			.Visible = .T.
			.Height	 = m.loGrid.Height
			.Width	 = This.oPanelProperties.nPanelWidth
			.Anchor	 = 5
		
			.Setup(This.oPanelProperties, This.oSearchEngine, This.nFontSize)
			.ActivePage = m.lnPage
			.HightlightPreviousSelection(lcPanelKey)
		Endwith
		
		This.Newobject('oSplitterH', 'Thor_SFSplitterH', Execscript(_Screen.cThorDispatcher, 'Full Path=THOR_SFSPLITTER.VCX'))
		With This.oSplitterH
			.lShowGripper	 = .T.
			.cObject1Name	 = 'oPanel'
			.cObject2Name	 = 'grdResults'
			.nObject1MinSize = 100
			.nObject2MinSize = 100
			.BackColor		 = Rgb(192, 192, 192)
			.BackStyle		 = 1
			.Top			 = m.loGrid.Top
			.Height			 = m.loGrid.Height
			.Left			 = This.oPanel.Left + This.oPanel.Width + cnMARGIN + 2
			.Anchor			 = 5
			.Visible		 = .T.
		Endwith
		
		With m.loGrid
			lnAnchor = .Anchor
			.Anchor	 = 0
			.Left	 = This.oSplitterH.Left + This.oSplitterH.Width + cnMARGIN + 4
			.Width	 = This.Width - .Left - 12
			.Anchor	 = m.lnAnchor
		Endwith
		
		Bindevent(This.oPanel, 'Width', This, 'PanelWidthChanged')
		
	ENDPROC

	PROCEDURE ccolumninfo_access
		return This.oPanelProperties.cColumnInfo
		
	ENDPROC

	PROCEDURE ccolumninfo_assign
		lparameters tcColumnInfo
		This.oPanelProperties.cColumnInfo = tcColumnInfo
		
	ENDPROC

	PROCEDURE chdirtoscope
		Local lcScope
		lcScope	 = Thisform.cScope
		lcScopeType = Thisform.GetScopeType()
		
		Do Case
			Case lcScopeType = 'Project'
				Cd (Justpath(lcScope))
			Case lcScopeType = 'Folder'
				Cd (Justpath(lcScope))
		Endcase
		
		
	ENDPROC

	PROCEDURE cimagefolder_access
		Return Justpath(Justpath(This.ClassLibrary)) + '\Images\'
	ENDPROC

	PROCEDURE clookfor_assign
		Lparameters tcLookFor
		
		If Upper(This.cLookFor) == Upper(tcLookFor)
			Return
		Endif
		
		This.cLookFor = tcLookFor
		
		If Upper(Thisform.cboLookFor.DisplayValue) == Upper(tcLookFor)
			Return
		Endif
		
		Thisform.cboLookFor.DisplayValue = tcLookFor
		
	ENDPROC

	PROCEDURE createmrucontextmenu
		Lparameters lcType
		
		Local lcClass, lcFile, lcParameter, loContextMenu
		
		If Not Thisform.ResourceFile()
			Return
		Endif
		
		* ContextMenu home page = http://vfpx.codeplex.com/wikipage?title=Thor%20Framework%20ContextMenu
		loContextMenu = Execscript(_Screen.cThorDispatcher, 'Class= ContextMenu')
		
		With This
			If lcType = 'Files'
				.AddMRUSubMenu(loContextMenu, '\<Forms', 'SCX')
				.AddMRUSubMenu(loContextMenu, '\<PRGs', 'PRG')
				.AddMRUSubMenu(loContextMenu, '\<Reports', 'FRX')
				.AddMRUSubMenu(loContextMenu, '\<Tables', 'DBF')
		
				loContextMenu.AddMenuItem()
		
				.AddMRUSubMenu(loContextMenu, 'Pro\<jects', 'PJX')
				.AddMRUSubMenu(loContextMenu, '\<Menus', 'MNX')
				.AddMRUSubMenu(loContextMenu, 'Te\<xt Files', 'XXX')
			Else
				.AddMRUSubMenu(loContextMenu, 'Class \<Libraries', 'MRU2')
				.AddMRUSubMenu(loContextMenu, '\<Classes', 'VCX')
			Endif && lcType = 'Files'
		Endwith
		
		If loContextMenu.Activate()
			lcParameter	= loContextMenu.Parameters
			lcFile		= Getwordnum(lcParameter, 1, '|')
			lcClass		= Getwordnum(lcParameter, 2, '|')
			Thisform.EditSourceFile(lcFile, lcClass)
		Endif
		
	ENDPROC

	PROCEDURE createresultscursor
		Lparameters tcAlias
		
		Create Cursor (tcAlias) 	(		;
			  FullName		C(240),			;
			  Folder		C(120),			;
			  Filename		C(120),			;
			  Size			I,				;
			  Timestamp		T,				;
			  Class			C(60),			;
			  Parent		C(60),			;
			  ClassLoc		C(240),			;
			  BaseClass		C(20),			;
			  StartRange    I,				;
			  EndRange      I,				;
			  SortKey		C(200)			;
			  )
		
		
	ENDPROC

	PROCEDURE cresultsfilename_access
		Local lcFileName
		lcFileName = Thisform.GetSettingsFileName(, 'Results')
		Return lcFileName
		
	ENDPROC

	PROCEDURE cscope_assign
		Lparameters tcScope
		
		Local lcCaption, lcScope
		If Upper(This.cScope) == Upper(tcScope)
			Return
		Endif
		
		This.cScope	= tcScope
		lcScope		= Trim(This.oTools.DiskFileName(tcScope))
		If Right(lcScope, 1) = '\'
			lcScope = Left(lcScope, Len(lcScope) - 1)
		Endif
		
		lcCaption = Justfname(lcScope)
		If Empty(lcCaption)
			lcCaption = Justfname(Justpath(lcScope))
		Endif
		
		This.Caption = 'Finder - ' + Evl(lcCaption, lcScope)
		
		If Upper(Thisform.cboScope.DisplayValue) == Upper(tcScope)
			Return
		Endif
		
		Thisform.cboScope.DisplayValue = lcScope
		
	ENDPROC

	PROCEDURE csortorder_access
		return This.oPanelProperties.cSortOrder
		
	ENDPROC

	PROCEDURE csortorder_assign
		lparameters tcSortOrder
		This.oPanelProperties.cSortOrder = tcSortOrder
		
	ENDPROC

	PROCEDURE descendants
		Lparameters lcClass, lcFullName
		
		Local lcPropertyName, lcXML, lnRecno, lnSelect, loDescendants
		
		lnSelect		= Select()
		This.LockScreen	= .T.
		
		This.TransferPropertiesToEngine(This.oSearchEngine)
		This.oSearchEngine.CreateDescendants('crsr_Results', lcClass, lcFullName, 'crsr_Descendants')
		
		Select('crsr_Descendants')
		lcXML	= ''
		Cursortoxml(Alias(), 'lcXml', 1, 0, 0, '1')
		
		Select(lnSelect)
		This.LockScreen = .F.
		
		loDescendants		   = Newobject('frmDescendants', This.ClassLibrary)
		loDescendants.cHomeDir = Thisform.cHomeDir
		loDescendants.cScope   = Thisform.cScope
		
		lcPropertyName					  = '_Descendants' + Sys(2015)
		loDescendants.cScreenPropertyName = lcPropertyName
		_Screen.AddProperty(lcPropertyName, loDescendants)
		
		loDescendants.SetRecordSource(lcXML)
		loDescendants.Show()
		
		
	ENDPROC

	PROCEDURE Destroy
		Local lcColumnInfo, lcFName, lcFileName, lcFolder, lcToolFolder, llMultipleInstances, lnI, loColumn
		Local loColumnInfo, loException
		
		RemoveProperty(_screen, This.cScreenProperty)
		
		If Used('crsr_SearchResults')
			lcFileName = This.GetResultsFileName()
			Try
				Erase (lcFileName)
				Select  *							;
					From crsr_SearchResults			;
					Into Table (lcFileName)
				Use
			Catch To loException
		
			Endtry
		Endif
		
		This.SaveDockInfo()
		
		If Used('crsr_Results')
			This.nGridRecno = Recno('crsr_Results')
		Else
			This.nGridRecno = 0
		Endif
		
		This.cColumnInfo	= This.grdResults.GetColumnInfo()
		This.cColumnFilters	= This.GetColumnFilters()
		
		This.cClassPanelProperties = This.oClassPanelProperties.GetValues()
		This.cFilePanelProperties  = This.oFilePanelProperties.GetValues()
		
		* --------------------------------------------------------------------------------
		Erase This.oSettings.cxResultFilename
		*!* ******************** Removed 11/14/2014 *****************
		*!* lcFileName = ThisForm.GetSettingsFileName()
		*!* This.oSettings.SetResourceFile(lcFileName, .T.)
		
		This.oSettings.Save(This)
		
		* --------------------------------------------------------------------------------
		
		This.oFileSearchEngine	= Null
		This.oClassSearchEngine	= Null
		
		This.oFilePanelProperties  = Null
		This.oClassPanelProperties = Null
		
		This.oSettings = Null
		This.oTools	   = Null
		
	ENDPROC

	PROCEDURE getallsettings
		Local lcProperties
		
		Text To lcProperties Noshow Pretext 15
		cLookFor
		cLookForMRUs
		cScope
		cProjectMRUs
		cDirectoryMRUs
		lActiveProject
		lCurrentDirectory
		lProjectHomeDirectory
		lStayOpen
		lSubDirectories
		lPathAndClassLibs
		cHomeDir
		lSkipExtensions 
		cSkippedExtensions 
		lSkipFolders 
		cSkippedFolders
		cFavoritesList 
		nGridRecno 
		lSearchClass
		lClassSearchAsDefault
		cColumnFilter 
		nMRUDisplayCount
		nColumnFilterCount
		cColumnFilters
		cClassPanelProperties
		cFilePanelProperties
		nFontSize
		Endtext
		
		Return Chrtran(lcProperties, ' ', ',')
	ENDPROC

	PROCEDURE getdirfromscope
		Local lcScope, lcScopeType
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		
		Do Case
			Case lcScopeType = 'Project'
				Return lcScope
			Case lcScopeType = 'Folder'
				Return Justpath(lcScope)
			Case lcScopeType = 'Path'
				Return Sys(5) + Curdir()
			Otherwise
				Return ''
		Endcase
		
	ENDPROC

	PROCEDURE getfinderscope
		Return This.cScope
		
	ENDPROC

	PROCEDURE getresultsfilename
		Return ForceExt(This.cResultsFileName, 'DBF')
		
	ENDPROC

	PROCEDURE getscopetype
		Local lcScope
		lcScope		  = Thisform.cScope
		Do Case
			Case This.lPathAndClassLibs
				Return 'Path'
			Case Upper(Justext(lcScope)) == 'PJX'
				Return 'Project'
			Case Directory(lcScope)
				Return 'Folder'
			Otherwise
				Return 'None'
		Endcase
		
		
	ENDPROC

	PROCEDURE getsettingsfilename
		Lparameters lcProjectName, lcSuffix
		
		Local lcFName, lcFileName, lcFolder, llMultipleInstances
		
		llMultipleInstances = Nvl(Thisform.MultipleInstances(), .F.)
		Do Case
		
			Case llMultipleInstances And Not Empty(lcProjectName)
				lcFName = 'Finder-' + JustStem(lcProjectName) + '-PJX' + IIF(Empty(lcSuffix), '', '-' + lcSuffix) 
		
			Case llMultipleInstances And Thisform.GetScopeType() = 'Project'
				lcFName = 'Finder-' + JustStem(This.cScope) + '-PJX' + IIF(Empty(lcSuffix), '', '-' + lcSuffix) 
		
			Otherwise
				lcFName = 'Finder' + Evl(lcSuffix, '')
		Endcase
		
		lcFolder   = Execscript(_Screen.cThorDispatcher, 'Tool Folder=') + '\My Tools\Settings\'
		lcFileName = lcFolder + lcFName + '.dbf'
		
		Return lcFileName
		
	ENDPROC

	PROCEDURE highlightlookfor
		With This.cboLookFor
			.SetFocus()
			.SelStart  = 0
			.SelLength = Len(Trim(.DisplayValue))
		Endwith
	ENDPROC

	PROCEDURE highlightpreviousgridrow
		If Between(This.nGridRecno, 1, Reccount('crsr_Results'))
			Goto(This.nGridRecno) In crsr_Results
			This.nGridRecno = 0
		Endif
		
	ENDPROC

	PROCEDURE Init
		* tools home page = http://vfpx.codeplex.com/wikipage?title=thor%20tools%20object
		* ThorFormSettings home page = http://vfpx.codeplex.com/wikipage?title=Thor%20Framework%20FormSettings
		
		Lparameters tcProject
		Local loContextMenu As ContextMenu Of 'C:\VISUAL FOXPRO\PROGRAMS\MyThor\Thor\Source\Thor_Menu.vcx'
		Local loSettings As Thor_Form_Settings Of 'C:\VISUAL FOXPRO\PROGRAMS\MyThor\Thor\Source\Thor_FoxResource.vcx'
		Local lcClassLibrary
		
		With This
			.LockScreen = .T.
		
			Use(Execscript(_Screen.cThorDispatcher, 'Full Path=THOR_PROC_FileTypes.DBF')) 	Again In 0 Alias FileTypes
			Use(Execscript(_Screen.cThorDispatcher, 'Full Path=THOR_PROC_BaseClasses.DBF')) Again In 0 Alias BaseClasses
		
			lcClassLibrary		   = Evl(This.cSearchEngineClassLibrary, This.ClassLibrary)
			.oFileSearchEngine	   = Newobject('FinderEngine', lcClassLibrary)
			.oClassSearchEngine	   = Newobject('ClassFinderEngine', lcClassLibrary)
			.oClassPanelProperties = Newobject('custClassPanel', lcClassLibrary)
			.oFilePanelProperties  = Newobject('custFilePanel', lcClassLibrary)
		
			.oTools	   = Execscript(_Screen.cThorDispatcher, 'Class= tools from pemeditor')
		
			.RestoreAllProperties(tcProject)
			.OpenResultsCursor()
		
			.oClassPanelProperties.SetValues(.cClassPanelProperties)
			.oFilePanelProperties.SetValues(.cFilePanelProperties)
		
			Do Case
				Case .lActiveProject And _vfp.Projects.Count # 0
					.cScope = _vfp.Projects[1].Name
				Case .lActiveProject And _vfp.Projects.Count = 0
					.lActiveProject = .F.
				Case .lCurrentDirectory
					.cScope			= Sys(5) + Curdir()
			Endcase
		
			This.grdResults.SetColumnInfo(This.cColumnInfo)
			This.SetColumnFilters(This.cColumnFilters)
		
			This.cboLookFor.Requery()
			This.cboScope.Requery()
		
			.SetFontSize(Thisform.nFontSize)
			.BindControls = .T.
			.Refresh()
			.RefreshResults()
			.HighlightLookFor()
			.LockScreen = .F.
		
			.HighlightPreviousGridRow()
		
		Endwith
		
		This.cScreenProperty = 'Finder' + Sys(2015)
		_Screen.AddProperty(This.cScreenProperty, This)
		
	ENDPROC

	PROCEDURE Load
		Set Talk Off 
		DoDefault()
		
	ENDPROC

	PROCEDURE multipleinstances
		Return Nvl(Execscript(_Screen.cThorDispatcher, 'Get Option=', 'Multiple Instances', 'Finder'), .F.)
	ENDPROC

	PROCEDURE opanelproperties_access
		If This.lSearchClass
			Return This.oClassPanelProperties
		Else
			Return This.oFilePanelProperties
		Endif
		
		
	ENDPROC

	PROCEDURE openresultscursor
		Local lcFileName
		
		This.CreateResultsCursor('crsr_SearchResults')
		
		lcFileName = Thisform.GetResultsFileName()
		If File(lcFileName)
			Try
				Append From (lcFileName)
			Catch to loException
		
			Endtry
		Endif
		
		Select * From crsr_SearchResults Into Cursor crsr_Results Readwrite
	ENDPROC

	PROCEDURE osearchengine_access
		If This.lSearchClass
			Return This.oClassSearchEngine
		Else
			Return This.oFileSearchEngine
		Endif
		
		
	ENDPROC

	PROCEDURE panelinit
		Local lcNewClass, lcPanel, lcPanelKey, llPanel, lnPage
		
		llPanel	   = Thisform.oPanelProperties.lUsePanel
		lcPanel	   = Thisform.oPanelProperties.CPanel
		lcPanelKey = Thisform.oPanelProperties.cPanelKey
		lnPage     = Evl(Thisform.oPanelProperties.nPage, 1)
		
		Do Case
			Case Not m.llPanel
				lcNewClass = ''
			Case This.lSearchClass
				lcNewClass = 'pgfClasses'
			Otherwise
				lcNewClass = 'pgfFiles'
		Endcase
		
		Thisform.LockWindow(.T.)
		Do Case
			Case Empty(m.lcNewClass)
				This.RemovePanel()
			Case Type('This.oPanel') = 'O' And Not This.oPanel.Class == m.lcNewClass
				This.RemovePanel()
				This.AddPanel(m.lcNewClass, m.lnPage, lcPanelKey)
			Otherwise
				This.AddPanel(m.lcNewClass, m.lnPage, lcPanelKey)
		Endcase
		
		Thisform.LockWindow(.F.)
		
	ENDPROC

	PROCEDURE panelwidthchanged
		This.oPanelProperties.nPanelWidth = This.oPanel.Width
		
	ENDPROC

	PROCEDURE removepanel
		Local lnAnchor, loGrid
		
		If Type('This.oPanel') = 'O'
			This.RemoveObject('oPanel')
			This.RemoveObject('oSplitterH')
		
			loGrid		  = This.grdResults
			lnAnchor	  = loGrid.Anchor
			loGrid.Anchor = 0
			loGrid.Left	  = 6
			loGrid.Width  = This.Width - loGrid.Left - 7
			loGrid.Anchor = lnAnchor
		Endif
		
	ENDPROC

	PROCEDURE Resize
		This.cmdVFPX.Refresh()
		This.lblVersion.Refresh()
		
		
	ENDPROC

	PROCEDURE resourcefile
		Return not Empty(Set("Resource",1))
	ENDPROC

	PROCEDURE restoreallproperties
		Lparameters tcProject
		
		Local lcFileName, lcSettingsFileName, lnLeft
		With This
		
			lcSettingsFileName = Thisform.GetSettingsFileName(tcProject)
			If _vfp.Projects.Count # 0
				lcFileName = Thisform.GetSettingsFileName(_vfp.ActiveProject.Name)
				If File(lcFileName)
					lcSettingsFileName = lcFileName
				Endif
			Endif
		
			.oSettings = Execscript(_Screen.cThorDispatcher, 'Class= ThorFormSettings', lcSettingsFileName)
		
			.oSettings.Restore(Thisform, 'nDockable, lDocked, nDockPosition, cDockWindow')
			If .nDockable # 1
				.Dockable = 2
				.oSettings.Restore(Thisform, 'Height, Width, Top, Left')
			Else
				* Setting Dockable = 1 makes the form instantly visible, so we set .Left to force
				* the form initially outside of visible screen, and then restore .Left last
				.oSettings.Restore(Thisform, 'Height, Width')
				* move off screen so it does not move/flicker when top/left restored
				.Left = -2468
				.RestoreDocking()
				lnLeft = .Left
				.oSettings.Restore(Thisform, 'Top, Left')
				If lnLeft = .Left
					.Left = 0
				Endif
			Endif
		
			.oSettings.Restore(Thisform, .GetAllSettings())
		
			* Following is necessary if there was not already a settings file for the
			* indicated project
			If _vfp.Projects.Count # 0 And Nvl(Thisform.MultipleInstances(), .F.) = .T.
				Thisform.lActiveProject	   = .F.
				Thisform.lCurrentDirectory = .F.
				Thisform.lPathAndClassLibs = .F.
				Thisform.cScope			   = _vfp.ActiveProject.Name
			Endif
		
		Endwith
		
	ENDPROC

	PROCEDURE restorecolumninfo
		Local laColumnInfo[1], lnCount, lnI, loColumn
		lnCount = Alines(laColumnInfo, This.cColumnInfo, 5, ',')
		
		For lnI = 1 To Min(This.grdResults.ColumnCount, lnCount)
			loColumn			 = This.grdResults.Columns[lnI]
			loColumn.ColumnOrder = Val(Getwordnum(laColumnInfo[lnI], 1))
			loColumn.Width		 = Val(Getwordnum(laColumnInfo[lnI], 2))
		Endfor
		
	ENDPROC

	PROCEDURE restoredocking
		Local lcDockWindow, llDocked, lnDockPosition
		With This
			If .Dockable # .nDockable
				.Dockable = .nDockable && since this makes the form visible
			EndIf
			
			llDocked	   = .lDocked
			lnDockPosition = .nDockPosition
			lcDockWindow   = .cDockWindow
			If .Dockable = 1 And llDocked
				*** JRN 12/24/2008 : Tab docking
				Do Case
					Case Not Empty(lcDockWindow)
						Try
							Dock Name Thisform position 4 Window &lcDockWindow
						Catch
		
						Endtry
					Case  Between(lnDockPosition, 0, 3)
						.Dock(lnDockPosition)
				Endcase
				*** JRN 12/24/2008
			Endif .Dockable = 1 ...
		Endwith
		
	ENDPROC

	PROCEDURE savedockinfo
		*** JRN 12/24/2008 : Save all docking info; called by AfterDock and UnDock
		
		Local laDock[1], lnRow, lnRowDocked
		With This
		
			* Persist the docking information.
		
			.nDockable	   = .Dockable
			.lDocked	   = .Docked
			.nDockPosition = -1
			.cDockWindow   = ''
			If .Docked
				Adockstate(laDock)
				lnRow = Ascan(laDock, .Caption, -1, -1, 1, 15)
				*** JRN 12/24/2008 : Remember window that we're docked to
				If lnRow > 0
					.nDockPosition = laDock[lnRow, 3]
					If laDock[lnRow, 4] # _Screen.Caption And Not Empty(laDock[lnRow, 4])
						.cDockWindow = laDock[lnRow, 4]
					Else
						lnRowDocked = Ascan(laDock, .Caption, -1, -1, 4, 15)
						If lnRowDocked > 0
							.cDockWindow = laDock[lnRowDocked, 1]
						Endif
					Endif
				Endif lnRow > 0
			Endif .Docked
		
		Endwith
		
	ENDPROC

	PROCEDURE savemrulists
		Local lcScopeType
		
		With Thisform
			* --------------------------------------------------------------------------------
			.cLookForMRUs = .UpdateMRUList(.cLookForMRUs, .cLookFor)
			.cboLookFor.Requery()
		
			* --------------------------------------------------------------------------------
			lcScope = This.oTools.DiskFileName(Fullpath(.cScope))
			lcScopeType = Thisform.GetScopeType()
			Do Case
				Case lcScopeType = 'Project'
					.cProjectMRUs = .UpdateMRUList(.cProjectMRUs, lcScope)
				Case lcScopeType = 'Folder'
					.cDirectoryMRUs = .UpdateMRUList(.cDirectoryMRUs, lcScope)
			Endcase
			.cboScope.Requery()
		
		Endwith && Thisform
		
	ENDPROC

	PROCEDURE search
		Lparameters tlSearchClass
		
		If This.lSearchingEnabled
			With Thisform
				.SearchInit(tlSearchClass)
		
				.lSearching = .T.
				.lblSearching.Refresh()
		
				This.CreateResultsCursor('crsr_SearchResults')
				.oSearchEngine.Search('crsr_SearchResults')
		
				.lSearching	= .F.
				.cHomeDir	= .oSearchEngine.cHomeDir
		
				.oPanelProperties.cPanelFilter = ''
				.oPanelProperties.cPanelKey	   = ''
		
				.RefreshResults()
				.PanelInit()
				
				With .cboLookFor
					.SetFocus()
					.SelStart = 0
					.SelLength = Len(Trim(.DisplayValue))
				Endwith
				.Refresh()
				
			Endwith
		Endif && This.lSearchingEnabled
		
		
		
		
	ENDPROC

	PROCEDURE searchinit
		Lparameters tlSearchClass
		
		If Thisform.lSearchClass # tlSearchClass
			* cColumnInfo changes depending on lSearchClass. 
			* See oColumnInfo_Access and oColumnInfo_Assign
			This.cColumnInfo	  = This.grdResults.GetColumnInfo()
			Thisform.lSearchClass = tlSearchClass
			This.grdResults.SetColumnInfo(This.cColumnInfo)
		Endif
		
		Thisform.SaveMRULists()
		Thisform.TransferPropertiesToEngine(This.oSearchEngine)
		Thisform.cColumnFilter		= ''
		Thisform.nColumnFilterCount	= 0
		
	ENDPROC

	PROCEDURE selectpanelfilter
		* ContextMenu home page = http://vfpx.codeplex.com/wikipage?title=Thor%20Framework%20ContextMenu
		Local loContextMenu As ContextMenu Of 'C:\VISUAL FOXPRO\PROGRAMS\MyThor\Thor\Source\Thor_Menu.vcx'
		Local lcPanel, llUsePanel
		loContextMenu = Execscript(_Screen.cThorDispatcher, 'Class= ContextMenu')
		
		lcPanel	   = Thisform.oPanelProperties.CPanel
		llUsePanel = Thisform.oPanelProperties.lUsePanel
		
		loContextMenu.AddMenuItem('None', , , , 'None', , Not llUsePanel)
		If thisform.lSearchClass 
			loContextMenu.AddMenuItem('Base Class', , , , 'BaseClass', , llUsePanel And lcPanel = 'BaseClass')
			loContextMenu.AddMenuItem('Hierarchy', , , , 'Hierarchy', , llUsePanel And lcPanel = 'Hierarchy')
		Else
			loContextMenu.AddMenuItem('File Type', , , , 'FileType', , llUsePanel And lcPanel = 'FileType')
		Endif
		
		loContextMenu.AddMenuItem('Folders', , , , 'Folders', , llUsePanel And lcPanel = 'Folders')
		
		If loContextMenu.Activate()
			If loContextMenu.Keyword = 'None'
				Thisform.oPanelProperties.lUsePanel	= .F.
			Else
				Thisform.oPanelProperties.lUsePanel	= .T.
				Thisform.oPanelProperties.CPanel	= loContextMenu.Keyword
			Endif
			Thisform.PanelInit()
		Endif
		
	ENDPROC

	PROCEDURE setfontsize
		Lparameters lnFontSize
		
		This.SetAll('FontSize', lnFontSize)
		If 'O' = Type('This.oPanel')
			This.oPanel.SetFontSize(This.nFontSize)
		Endif
		
	ENDPROC

	PROCEDURE setoptions
		Local laa[1], lcBodyMarkup, llCheckOutSCC, loForm
		
		Private paClassPanels[1], paFilePanels[1], pcClassPanel, pcFilePanel, pcFilter
		Private loThisForm, plMultipleInstances
		
		loForm	   = Execscript(_Screen.cThorDispatcher, 'Class= DynamicFormDeskTop')
		loThisForm = Thisform
		
		plMultipleInstances = Nvl(ExecScript(_Screen.cThorDispatcher, "Get Option=", 'Multiple Instances', 'Finder'), .F.)
		
		Alines(paFilePanels, 'None, FileType, Folders', 5, ',')
		pcFilePanel = Iif(This.oFilePanelProperties.lUsePanel, This.oFilePanelProperties.cPanel, 'None')
		Alines(paClassPanels, 'None, BaseClass, Folders', 5, ',')
		pcClassPanel = Iif(This.oClassPanelProperties.lUsePanel, This.oClassPanelProperties.cPanel, 'None')
		
		llCheckOutSCC = _oPEMEditor.oPrefs.lCheckOutSCC
		Execscript(_Screen.cThorDispatcher, 'PEMEditor_StartIDETools')
		
		With loForm
			.Caption	 = 'Finder Options'
			.MinWidth	 = 275
			.MinHeight	 = 100
			.MinButton	 = .F.
			.MaxButton	 = .F.
			.BorderStyle = 3
		
			.cHeading					= ''
			.cSaveButtonCaption			= 'Apply'
			.oRenderEngine.nControlLeft	= 160
			.oRenderEngine.nVerticalSpacing = 4
		Endwith
		
		Text To loForm.cBodyMarkup Noshow Textmerge
			loThisForm.lClassSearchAsDefault .class 	= 'CheckBox'
						.Width				= 350
						.caption			= '[Enter] performs Class Search (instead of File Search)'
						|
			_oPEMEditor.oPrefs.lCheckOutSCC .class 	= 'CheckBox'
						.Width				= 300
						.caption			= 'Check out files using Source Control'
						|
			plMultipleInstances		.class 	= 'CheckBox'
						.Caption			= 'Multiple instances of Finder (one per project)'
						.Width				= 350
						|
			loThisForm.nFontSize			.class      = 'Spinner'
						.Caption			= 'Font Size'
						.Width				= 60
						.KeyboardLowValue	= 7
						.KeyboardHighValue	= 12
						.SpinnerLowValue	= 7
						.SpinnerHighValue	= 12
						|
			loThisForm.nMRUDisplayCount		.class      = 'Spinner'
						.Caption			= 'MRU Display Count'
						.Width				= 60
						.KeyboardLowValue	= 4
						.KeyboardHighValue	= 24
						.SpinnerLowValue	= 4
						.SpinnerHighValue	= 24
						.row-increment 		= 0				
						.left				= (.left + 36)
						|
			loThisForm.cSkippedExtensions 	.class 		= 'EditBox'
						.caption			= 'Extensions to ignore'
						.Width = 300
						.Anchor = 10
						.Height = 50
						.FontSize  = 8
						|
			loThisForm.cSkippedFolders 	.class 				= 'EditBox'
						.caption			= 'Folders to ignore **'
						.Width = 300
						.Anchor = 10
						.Height = 65
						.FontSize  = 8
						|
			loThisForm.cFavoritesList 	.class 				= 'EditBox'
						.caption			= 'Favorite projects/folders **'
						.Width = 300
						.Anchor = 15
						.Height = 65
						.FontSize  = 8
						|
						.class = 'Label'
						.Caption = "** Enter one folder / project per line and/or use ';' as a delimiter"
						.Width = 400
						.Anchor = 6
						.margin-left = -50
		Endtext
		
		loForm.Render()
		* loForm.Setall('FontSize', 8)
		loForm.Show(1, Thisform)
		
		*
		If pcFilePanel = 'None'
			This.oFilePanelProperties.lUsePanel = .F.
		Else
			This.oFilePanelProperties.lUsePanel	= .T.
			This.oFilePanelProperties.cPanel	= pcFilePanel
		Endif
		
		*
		If pcClassPanel = 'None'
			This.oClassPanelProperties.lUsePanel = .F.
		Else
			This.oClassPanelProperties.lUsePanel	= .T.
			This.oClassPanelProperties.cPanel	= pcClassPanel
		Endif
		
		*
		If llCheckOutSCC # _oPEMEditor.oPrefs.lCheckOutSCC
			_oPEMEditor.oPrefs.SaveValues()
		Endif
		
		ExecScript(_Screen.cThorDispatcher, "Set Option=", 'Multiple Instances', 'Finder', plMultipleInstances)
		
		Thisform.SetFontSize(Thisform.nFontSize)
		Thisform.cboScope.Requery()
		
		
	ENDPROC

	PROCEDURE setpanelfilter
		Lparameters lcPanelFilter, lcPanelKey
		
		If Thisform.oPanelProperties.cPanelFilter == lcPanelFilter
			Return
		Endif
		
		Thisform.oPanelProperties.cPanelFilter = lcPanelFilter
		Thisform.oPanelProperties.cPanelKey	   = lcPanelKey
		
		Thisform.RefreshResults()
		
		
	ENDPROC

	PROCEDURE Show
		LPARAMETERS nStyle
		
		DoDefault(nStyle)
		
		This.PanelInit()
	ENDPROC

	PROCEDURE showpathclasslibs
		#Define crlf  Chr(13)
		
		Private pcClassLibs, pcPath
		Local laClassLibs[1], lcLine, lnCount, lnI, lnPos, loForm
		
		pcPath = Strtran (Lower(Set ('PATH')), ';', crlf, 1)
		pcPath = Strtran (pcPath, ',', crlf, 1)
		
		lnCount		= Alines(laClassLibs, Lower(Set('Classlib')), 5, ',')
		pcClassLibs	= ''
		For lnI = 1 To lnCount
			lcLine = laClassLibs[lnI]
			lnPos  = Atc(' alias ', lcLine)
			If lnPos > 0
				lcLine = Left(lcLine, lnPos - 1)
			Endif
			pcClassLibs = pcClassLibs + Iif(Empty(pcClassLibs), '', crlf) + Chrtran(lcLine, ['"'], [])
		Endfor
		
		loForm	   = Execscript(_Screen.cThorDispatcher, 'Class= DynamicFormDeskTop')
		With loForm
			.Caption	 = 'Current Path and ClassLibs'
			.MinWidth	 = 275
			.MinHeight	 = 100
			.MinButton	 = .F.
			.MaxButton	 = .F.
			.BorderStyle = 3
		
			.cHeading					= ''
			.cSaveButtonCaption			= 'Apply'
			.oRenderEngine.nControlLeft	= 160
		Endwith
		
		Text To loForm.cBodyMarkup Noshow Textmerge
		 	.lLabelsAbove = .t. 
						|
			pcPath 	.class 				= 'EditBox'
					.Caption  = '  Path'
					.Width	  = 500
					.Left	  = 20
					.Anchor	  = 10
					.Height	  = 108
					.FontSize = 8
					.ReadOnly = .T.
					.IntegralHeight = .t.
						|
			pcClassLibs 	.class 				= 'EditBox'
					.Caption  = '  ClassLibs'
					.Width	  = 500
					.Left	  = 20
					.Anchor	  = 15
					.Height	  = 108
					.FontSize = 8
					.ReadOnly = .T.
					.IntegralHeight = .t.
		Endtext
		
		Text To loForm.cFooterMarkup Noshow Textmerge
				
				    .Class	= 'DF_HorizontalLine'
				    .Name	= 'lineFooter'
				    .Left	= 10
				    .Anchor	= 14
				    |
				    .Class = 'DF_CancelButton'
				    .Name  = 'cmdCancel'
				    .Caption = 'OK'
				    .Width = 80
				    .Left  = (This.oContainer.Width - 100)
				    .Anchor = 12
				    |
				    (This.oContainer.lineFooter.Anchor = 14) |
				    			
		Endtext
		
		
		loForm.Render()
		* loForm.Setall('FontSize', 8)
		loForm.Show(1, Thisform)
		
		
	ENDPROC

	PROCEDURE togglefilter
		Thisform.oPanelProperties.lUsePanel = Not Thisform.oPanelProperties.lUsePanel
		Thisform.PanelInit()
		Thisform.RefreshResults()
		
	ENDPROC

	PROCEDURE transferpropertiestoengine
		Lparameters loSearchEngine
		
		Local lcProperties, lcProperty, lnI
		
		lcProperties = Thisform.cSearchProperties 
		
		With Thisform
			For lnI = 1 To Getwordcount(lcProperties)
				lcProperty					= Getwordnum(lcProperties, lnI)
				loSearchEngine.&lcProperty.	= .&lcProperty.
			Endfor
		
			If Thisform.lSearchClass
				loSearchEngine.cLookFor		 = ''
				loSearchEngine.cLookForClass = .cLookFor
			Endif
		Endwith && Thisform
		
		
	ENDPROC

	PROCEDURE updatemrulist
		Lparameters lcMRUList, lcNewItem, lnMaxItems
		Local lcNewMRUs
		
		lcNewMRUs = lcNewItem + '|' + lcMRUList
		lcNewMRUs = Strtran(lcNewMRUs, '|' + lcNewItem + '|', '|', 1, 1, 1)
		lnMaxItems = Evl(lnMaxItems, Thisform.nMRUDisplayCount)
		If Occurs('|', lcNewMRUs) > lnMaxItems
			lcNewMRUs = Left(lcNewMRUs, At('|', lcNewMRUs, lnMaxItems))
		Endif
		
		Return lcNewMRUs 
	ENDPROC

	PROCEDURE whereused
		Lparameters lcClass, lcFullName
		
		Local lcClassLibrary, lcPropertyName, lcXML, lnRecno, lnSelect, loDescendants, loWhereUsed
		Local loWhereUsedSearchEngine
		
		lnSelect		= Select()
		This.LockScreen	= .T.
		
		This.TransferPropertiesToEngine(This.oSearchEngine)
		This.oSearchEngine.CreateDescendants('crsr_Results', lcClass, lcFullName, 'crsr_Descendants')
		
		lcClassLibrary			= Evl(This.cSearchEngineClassLibrary, This.ClassLibrary)
		loWhereUsedSearchEngine	= Newobject('WhereUsedFinderEngine', lcClassLibrary)
		This.TransferPropertiesToEngine(loWhereUsedSearchEngine)
		
		If Not Used('crsr_AllReferences')
			Select  *						;
				From crsr_AllClasses		;
				Into Cursor crsr_AllReferences Readwrite
			loWhereUsedSearchEngine.Search('crsr_AllReferences')
		Endif
		
		loWhereUsedSearchEngine.CreateWhereUsed('crsr_WhereUsed')
		
		Select('crsr_WhereUsed')
		lcXML	= ''
		Cursortoxml(Alias(), 'lcXml', 1, 0, 0, '1')
		
		Select(lnSelect)
		This.LockScreen = .F.
		
		loWhereUsed			 = Newobject('frmWhereUsed', This.ClassLibrary)
		loWhereUsed.cHomeDir = Thisform.cHomeDir
		loWhereUsed.cScope	 = Thisform.cScope
		
		lcPropertyName					= '_WhereUsed' + Sys(2015)
		loWhereUsed.cScreenPropertyName	= lcPropertyName
		_Screen.AddProperty(lcPropertyName, loWhereUsed)
		
		loWhereUsed.SetRecordSource(lcXML, lcClass)
		loWhereUsed.Show()
		
		
	ENDPROC

	PROCEDURE cboLookFor.Init
		Text to This.ToolTipText noshow textmerge
		Enter all or part of a name to search for. You may also use:  
		    ? or *
		    ^  at the beginning, to indicate the start of a name
		    $  at the end, to indicate the end of a name
		    !  at the beginning or end, to indicate exact match on name
		    |   to separate multiple search terms (means OR)
		To specify file extensions, enter one or more of them, separated by dots (no spaces). Wildcards work, too.   
		Endtext
	ENDPROC

	PROCEDURE cboLookFor.InteractiveChange
		If Upper(Thisform.cLookFor) == Upper(This.DisplayValue)
			Return
		Endif
		
		Thisform.cLookFor = This.DisplayValue
	ENDPROC

	PROCEDURE cboLookFor.Requery
		Local laLines[1], lnCount, lnI
		This.Clear()
		lnCount = Alines(laLines, Thisform.cLookForMRUs, 5, '|')
		For lnI = 1 To Min(lnCount, Thisform.nMRUDisplayCount)
			This.AddItem(laLines[lnI])
		Endfor
		
	ENDPROC

	PROCEDURE cboScope.InteractiveChange
		Local lPathAndClassLibs
		If Upper(Thisform.cScope) == Upper(This.DisplayValue)
			Return
		Endif
		
		With Thisform
			.lActiveProject	   = .F.
			.lCurrentDirectory = .F.
			.lPathAndClassLibs = Trim(This.DisplayValue) == Thisform.cPathAndClassLibs
			.cScope			   = This.DisplayValue
		
			.chklActiveProject.Refresh()
			.chklCurrentDirectory.Refresh()
			.chklProjectHomeDirectory.Refresh()
			.chklSubDirectories.Refresh()
			.chklPathAndClassLibs.Refresh()
		
			.cmdFileSearch.Refresh()
			.cmdClassSearch.Refresh()
			.cmdscope.Refresh()
		Endwith
		
		
	ENDPROC

	PROCEDURE cboScope.Requery
		Local laLines[1], lcCurDir, lcProjectMRUs, lnCount, lnI
		
		This.Clear()
		lcCurDir = Curdir()
		
		* --------------------------------------------------------------------------------
		lcProjectMRUs = Thisform.cProjectMRUs
		For lnI = _vfp.Projects.Count To 1 Step - 1
			lcProjectMRUs = Thisform.UpdateMRUList(lcProjectMRUs, _vfp.Projects[lnI].Name)
		Endfor
		
		* --------------------------------------------------------------------------------
		This.AddItem('\ ----- Projects -----')
		lnCount = Alines(laLines, lcProjectMRUs, 5, '|')
		For lnI = 1 To Min(lnCount, Thisform.nMRUDisplayCount)
			This.AddItem(Thisform.oTools.DiskFileName(laLines[lnI]))
		Endfor
		
		* --------------------------------------------------------------------------------
		This.AddItem('\-')
		This.AddItem('\ ----- Folders -----')
		lnCount = Alines(laLines, Thisform.cDirectoryMRUs, 5, '|')
		For lnI = 1 To Min(lnCount, Thisform.nMRUDisplayCount)
			This.AddItem(Thisform.oTools.DiskFileName(laLines[lnI]))
		Endfor
		
		* --------------------------------------------------------------------------------
		lnCount = Alines(laLines, Thisform.cFavoritesList, 5, '|', ';', Chr[13], Chr[10])
		If lnCount > 0
			This.AddItem('\-')
			This.AddItem('\ ----- Favorites -----')
			For lnI = 1 To lnCount
				This.AddItem(Thisform.oTools.DiskFileName(Fullpath(laLines[lnI])))
			Endfor
		Endif
		
		This.AddItem('\-')
		This.AddItem(Thisform.cPathAndClassLibs)
		
	ENDPROC

	PROCEDURE cboScope.Valid
		Thisform.Refresh()
		
	ENDPROC

	PROCEDURE chklActiveProject.Refresh
		This.Enabled = _vfp.Projects.Count # 0
		
	ENDPROC

	PROCEDURE chklActiveProject.Valid
		If This.Value
			Thisform.lCurrentDirectory = .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			   = _vfp.Projects[1].Name
			Thisform.Refresh()
		Endif
		
	ENDPROC

	PROCEDURE chklCurrentDirectory.Valid
		If This.Value
			Thisform.lActiveProject	= .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			= Sys(5) + Curdir()
			Thisform.Refresh()
		Endif
		
	ENDPROC

	PROCEDURE chklPathAndClassLibs.Valid
		If This.Value
			Thisform.lActiveProject	   = .F.
			Thisform.lCurrentDirectory = .F.
			Thisform.cScope			   = Thisform.cPathAndClassLibs
			Thisform.Refresh()
		Endif
		
	ENDPROC

	PROCEDURE chklProjectHomeDirectory.Refresh
		This.Visible = Thisform.GetScopeType() = 'Project'
		 
	ENDPROC

	PROCEDURE chklProjectHomeDirectory.Valid
		Thisform.Search(Thisform.lSearchClass)
	ENDPROC

	PROCEDURE chklSubDirectories.Refresh
		This.Visible = Thisform.GetScopeType() = 'Folder'
		
	ENDPROC

	PROCEDURE chklSubDirectories.Valid
		Thisform.Search(Thisform.lSearchClass)
	ENDPROC

	PROCEDURE cmdBrowseDir.Click
		Local lcCurdir, lcFolder
		
		lcFolder = Getdir(Thisform.GetDirFromScope(), 'Select a folder to search', 'Finder', 1 + 16 + 32 + 64 + 512)
		
		If Not Empty(lcFolder)
			Thisform.lActiveProject	   = .F.
			Thisform.lCurrentDirectory = .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			   = lcFolder
			Thisform.Refresh()
		Endif
	ENDPROC

	PROCEDURE cmdBrowseProject.Click
		Local lcCurdir, lcProject
		
		lcCurdir = Sys(5) + Curdir()
		ThisForm.ChDirToScope()
		
		lcProject = Getfile('PJX', 'Project')
		Cd (lcCurdir)
		
		If Not Empty(lcProject)
			Thisform.lActiveProject	   = .F.
			Thisform.lCurrentDirectory = .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			   = lcProject
			Thisform.Refresh()
		Endif
	ENDPROC

	PROCEDURE cmdBuild.Click
		ExecScript(_Screen.cThorDispatcher, 'Thor_Proc_BuildProject', FullPath(Thisform.cScope))
		
		
	ENDPROC

	PROCEDURE cmdBuild.Refresh
		Local lcScope, lcScopeType, llEnabled
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		If lcScopeType = 'Project'
			llEnabled = File(lcScope)
		Else
			llEnabled = .F.
		Endif
		
		This.Enabled = llEnabled
		This.Visible = llEnabled
		
	ENDPROC

	PROCEDURE cmdCancel.Click
		ThisForm.Release()
		
	ENDPROC

	PROCEDURE cmdClassIcon.DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.oDragDrop.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdClassIcon.DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.oDragDrop.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

	PROCEDURE cmdClassIcon.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		Thisform.oDragDrop.MouseDown(nButton, nShift, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdClassIcon.Refresh
		Local llEnabled
		llEnabled = Not Empty (Thisform.oDragDrop.cClass) and Not Empty (Thisform.oDragDrop.cBaseClass)
		
		This.Visible = llEnabled
		This.Enabled = llEnabled
		Thisform.imgClassIcon.Visible = llEnabled
		Thisform.imgClassIcon.Enabled = llEnabled
		
	ENDPROC

	PROCEDURE cmdClassIcon.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE cmdClassSearch.Click
		ThisForm.Search(.T.)
		
	ENDPROC

	PROCEDURE cmdClassSearch.Refresh
		This.Enabled = Thisform.GetScopeType() # 'None'
		This.Default = Thisform.lClassSearchAsDefault 
		
		If thisform.ResourceFile()
			This.ToolTipText = 'Right click for MRU lists of classes and class libraries'
		Else
			This.ToolTipText = ''
		Endif
		
	ENDPROC

	PROCEDURE cmdClassSearch.RightClick
		ThisForm.CreateMRUContextMenu('Classes')
		
	ENDPROC

	PROCEDURE cmdFileSearch.Click
		ThisForm.Search(.F.)
		
	ENDPROC

	PROCEDURE cmdFileSearch.Refresh
		This.Enabled = Thisform.GetScopeType() # 'None'
		This.Default = Not Thisform.lClassSearchAsDefault
		
		If thisform.ResourceFile()
			This.ToolTipText = 'Right click for MRU lists of files'
		Else
			This.ToolTipText = ''
		Endif
		
	ENDPROC

	PROCEDURE cmdFileSearch.RightClick
		ThisForm.CreateMRUContextMenu('Files')
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.oDragDrop.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.oDragDrop.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		Thisform.oDragDrop.MouseDown(nButton, nShift, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.Refresh
		Local llEnabled
		llEnabled = Not Empty (Thisform.oDragDrop.cClass) and Not Empty (Thisform.oDragDrop.cBaseClass)
		
		This.Visible = llEnabled
		This.Enabled = llEnabled
		Thisform.imgClassIcon.Visible = llEnabled
		Thisform.imgClassIcon.Enabled = llEnabled
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE cmdHideFilter.Click
		Thisform.ToggleFilter()
		This.Parent.cmdHideFilter.Refresh()
		This.Parent.cmdShowFilter.Refresh()
		
	ENDPROC

	PROCEDURE cmdHideFilter.Refresh
		This.Picture = Thisform.cImageFolder + 'Left.bmp'
		This.Visible = Thisform.oPanelProperties.lUsePanel = .T.
		
	ENDPROC

	PROCEDURE cmdOptions.Click
		ThisForm.SetOptions()
		
	ENDPROC

	PROCEDURE cmdScope.Click
		Local lcImageFolder, lcScope, lcScopeType, llEnabled
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		Do Case
			Case lcScopeType = 'Project'
				Modify Project (lcScope) Nowait
			Case lcScopeType = 'Folder'
				Execscript(_Screen.cThorDispatcher, 'Thor_Proc_OpenExplorer', lcScope)
			Case lcScopeType = 'Path'
				Thisform.ShowPathClassLibs()
		Endcase
		
		
	ENDPROC

	PROCEDURE cmdScope.Refresh
		Local lcImageFolder, lcScope, lcScopeType, llEnabled
		lcScope		  = Thisform.cScope
		lcScopeType	  = Thisform.GetScopeType()
		lcImageFolder = Thisform.cImageFolder
		Do Case
			Case lcScopeType = 'Project'
				llEnabled		 = File(lcScope)
				This.Picture	 = lcImageFolder + 'Project.bmp'
				This.ToolTipText = 'Click to open this project' + Chr(13) + 'Right-click to open Project folder in Explorer'
			Case lcScopeType = 'Folder'
				llEnabled		 = .T.
				This.Picture	 = lcImageFolder + 'Folder.bmp'
				This.ToolTipText = 'Click to open this folder in Explorer'
			Case lcScopeType = 'Path'
				llEnabled		 = .T.
				This.Picture	 = lcImageFolder + 'Event.bmp'
				This.ToolTipText = 'Click to display current Path and ClassLibs'
			Otherwise
				llEnabled = .F.
		Endcase
		
		This.Enabled = llEnabled
		This.Visible = llEnabled
		
	ENDPROC

	PROCEDURE cmdScope.RightClick
		Local lcImageFolder, lcScope, lcScopeType, llEnabled
		
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		
		If lcScopeType = 'Project'
				Execscript(_Screen.cThorDispatcher, 'Thor_Proc_OpenExplorer', lcScope)
		Endif
		
		
	ENDPROC

	PROCEDURE cmdShowFilter.Click
		Thisform.ToggleFilter()
		This.Parent.cmdHideFilter.Refresh()
		This.Parent.cmdShowFilter.Refresh()
		
	ENDPROC

	PROCEDURE cmdShowFilter.Refresh
		This.Picture = Thisform.cImageFolder + 'Right.bmp'
		This.Visible = Thisform.oPanelProperties.lUsePanel = .F.
		
	ENDPROC

	PROCEDURE cmdVFPX.Refresh
		This.Visible = This.Left >= 530
		
	ENDPROC

	PROCEDURE cmdVideo.Click
		ExecScript(_Screen.cThorDispatcher, 'Thor_Proc_Shell', 'http://youtu.be/uL4a9gsCLlk')
	ENDPROC

	PROCEDURE imgClassIcon.DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE imgClassIcon.DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

	PROCEDURE imgHelp.Click
		ExecScript(_Screen.cThorDispatcher, 'Thor_Proc_Shell', 'https://vfpx.codeplex.com/wikipage?title=Finder')
	ENDPROC

	PROCEDURE lblSearching.Refresh
		Local lnCount
		Do Case
			Case Thisform.lSearching
				This.Caption   = '... Searching ...'
				This.ForeColor = Rgb(255, 0, 0)
			Case Used('crsr_Results')
				lnCount = Reccount('crsr_Results')
				If lnCount = 0
					This.Caption   = 'None found'
				Else
					This.Caption   = Alltrim(Transform(lnCount, '999,999') + ' found') 
				Endif
				This.ForeColor = Rgb(0, 0, 0)
			Otherwise
				This.Caption = ''
		Endcase
		
	ENDPROC

	PROCEDURE lblVersion.Refresh
		#Define SPACING 15
		This.Caption = Thisform.cVersion
		This.Visible = This.Left > This.Parent.chklSkipFolders.Left + This.Parent.chklSkipFolders.Width + SPACING
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmscopefinder AS baseform OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="chklProjectHomeDirectory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="lblScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cboScope" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklPathAndClassLibs" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklCurrentDirectory" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklActiveProject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chklSubDirectories" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBrowseDir" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdBrowseProject" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdCancel" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGo" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Line1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: chdirtoscope
		*m: cscope_assign
		*m: getdirfromscope
		*m: getscopetype
		*m: savemrulists
		*m: updatemrulist
		*p: ccaption
		*p: cdirectorymrus
		*p: cpathandclasslibs
		*p: cprojectmrus
		*p: cscope
		*p: cscreenproperty
		*p: lactiveproject
		*p: lcurrentdirectory
		*p: lpathandclasslibs
		*p: lprojecthomedirectory
		*p: lsubdirectories
		*p: nmrudisplaycount
		*p: oscope
	*</DefinedPropArrayMethod>

	AllowOutput = .F.
	BindControls = .F.
	Caption = "Scope Processor"
	ccaption = 
	cdirectorymrus = 
	cpathandclasslibs = << Path or ClassLibs >>
	cprojectmrus = 
	cscope = 
	cscreenproperty = 
	DataSession = 2
	DoCreate = .T.
	FontSize = 8
	Height = 150
	lactiveproject = .F.
	ladddescendants = .T.
	lcurrentdirectory = .F.
	Left = 0
	lformaddobject = .F.
	lpathandclasslibs = .F.
	lprojecthomedirectory = .F.
	lsubdirectories = .F.
	MaxHeight = 150
	Name = "frmscopefinder"
	nmrudisplaycount = 6
	oscope = .NULL.
	ShowTips = .T.
	Top = 0
	Width = 429
	_memberdata = <VFPData>
		<memberdata name="csortorder" display="cSortOrder"/>
		<memberdata name="cscope" display="cScope"/>
		<memberdata name="lprojecthomedirectory" display="lProjectHomeDirectory"/>
		<memberdata name="lsubdirectories" display="lSubDirectories"/>
		<memberdata name="lstayopen" display="lStayOpen"/>
		<memberdata name="lactiveproject" display="lActiveProject"/>
		<memberdata name="lcurrentdirectory" display="lCurrentDirectory"/>
		<memberdata name="clookfor" display="cLookFor"/>
		<memberdata name="cscope_assign" display="cScope_Assign"/>
		<memberdata name="otools" display="oTools"/>
		<memberdata name="ndockable" display="nDockable"/>
		<memberdata name="csearchengineclass" display="cSearchEngineClass"/>
		<memberdata name="osearchengine" display="oSearchEngine"/>
		<memberdata name="csearchengineclasslibrary" display="cSearchEngineClassLibrary"/>
		<memberdata name="refreshresults" display="RefreshResults"/>
		<memberdata name="selectresults" display="SelectResults"/>
		<memberdata name="setsortorder" display="SetSortOrder"/>
		<memberdata name="ccolumninfo" display="cColumnInfo"/>
		<memberdata name="restorecolumninfo" display="RestoreColumnInfo"/>
		<memberdata name="chomedir" display="cHomeDir"/>
		<memberdata name="search" display="Search"/>
		<memberdata name="getrelativepath" display="GetRelativePath"/>
		<memberdata name="clookfor_assign" display="cLookFor_Assign"/>
		<memberdata name="editsourcefile" display="EditSourceFile"/>
		<memberdata name="clookformrus" display="cLookForMRUs"/>
		<memberdata name="updatemrulist" display="UpdateMRUList"/>
		<memberdata name="searchinit" display="SearchInit"/>
		<memberdata name="cprojectmrus" display="cProjectMRUs"/>
		<memberdata name="cdirectorymrus" display="cDirectoryMRUs"/>
		<memberdata name="gridcontextmenu" display="GridContextMenu"/>
		<memberdata name="griddoubleclick" display="GridDoubleClick"/>
		<memberdata name="transferpropertiestoengine" display="TransferPropertiesToEngine"/>
		<memberdata name="savemrulists" display="SaveMRULists"/>
		<memberdata name="cfavoriteslist" display="cFavoritesList"/>
		<memberdata name="cskippedextensions" display="cSkippedExtensions"/>
		<memberdata name="lskipextensions" display="lSkipExtensions"/>
		<memberdata name="lskipfolders" display="lSkipFolders"/>
		<memberdata name="cskippedfolders" display="cSkippedFolders"/>
		<memberdata name="setoptions" display="SetOptions"/>
		<memberdata name="lsearching" display="lSearching"/>
		<memberdata name="highlightlookfor" display="HighlightLookFor"/>
		<memberdata name="ccolumnfilter" display="cColumnFilter"/>
		<memberdata name="setcolumnfilter" display="SetColumnFilter"/>
		<memberdata name="ngridrecno" display="nGridRecno"/>
		<memberdata name="osettings" display="oSettings"/>
		<memberdata name="getallsettings" display="GetAllSettings"/>
		<memberdata name="oclasssearchengine" display="oClassSearchEngine"/>
		<memberdata name="ofilesearchengine" display="oFileSearchEngine"/>
		<memberdata name="lsearchclass" display="lSearchClass"/>
		<memberdata name="lclasssearchasdefault" display="lClassSearchAsDefault"/>
		<memberdata name="savedraginfo" display="SaveDragInfo"/>
		<memberdata name="nmousebutton" display="nMouseButton"/>
		<memberdata name="lformaddobject" display="lFormAddObject"/>
		<memberdata name="createresultscursor" display="CreateResultsCursor"/>
		<memberdata name="openresultscursor" display="OpenResultsCursor"/>
		<memberdata name="cresultsfilename" display="cResultsFileName"/>
		<memberdata name="getresultsfilename" display="GetResultsFileName"/>
		<memberdata name="getdirfromscope" display="GetDirFromScope"/>
		<memberdata name="nmrudisplaycount" display="nMRUDisplayCount"/>
		<memberdata name="resourcefile" display="ResourceFile"/>
		<memberdata name="createmrucontextmenu" display="CreateMRUContextMenu"/>
		<memberdata name="addmrusubmenu" display="AddMRUSubMenu"/>
		<memberdata name="chdirtoscope" display="ChDirToScope"/>
		<memberdata name="ncolumnfiltercount" display="nColumnFilterCount"/>
		<memberdata name="acolumnfilters" display="aColumnFilters"/>
		<memberdata name="ccolumnfilters" display="cColumnFilters"/>
		<memberdata name="getcolumnfilters" display="GetColumnFilters"/>
		<memberdata name="setcolumnfilters" display="SetColumnFilters"/>
		<memberdata name="panelinit" display="PanelInit"/>
		<memberdata name="removepanel" display="RemovePanel"/>
		<memberdata name="addpanel" display="AddPanel"/>
		<memberdata name="panelwidthchanged" display="PanelWidthChanged"/>
		<memberdata name="togglefilter" display="ToggleFilter"/>
		<memberdata name="setpanelfilter" display="SetPanelFilter"/>
		<memberdata name="opanelproperties" display="oPanelProperties"/>
		<memberdata name="oclasspanelproperties" display="oClassPanelProperties"/>
		<memberdata name="ofilepanelproperties" display="oFilePanelProperties"/>
		<memberdata name="cclasspanelproperties" display="cClassPanelProperties"/>
		<memberdata name="cfilepanelproperties" display="cFilePanelProperties"/>
		<memberdata name="opanelproperties_access" display="oPanelProperties_Access"/>
		<memberdata name="osearchengine_access" display="oSearchEngine_Access"/>
		<memberdata name="selectpanelfilter" display="SelectPanelFilter"/>
		<memberdata name="csortorder_access" display="cSortOrder_Access"/>
		<memberdata name="csortorder_assign" display="cSortOrder_Assign"/>
		<memberdata name="ccolumninfo_access" display="cColumnInfo_Access"/>
		<memberdata name="ccolumninfo_assign" display="cColumnInfo_Assign"/>
		<memberdata name="cversion" display="cVersion"/>
		<memberdata name="lsearchingenabled" display="lSearchingEnabled"/>
		<memberdata name="highlightpreviousgridrow" display="HighlightPreviousGridRow"/>
		<memberdata name="descendants" display="Descendants"/>
		<memberdata name="csearchproperties" display="cSearchProperties"/>
		<memberdata name="whereused" display="WhereUsed"/>
		<memberdata name="height" display="Height"/>
		<memberdata name="width" display="Width"/>
		<memberdata name="lpathandclasslibs" display="lPathAndClassLibs"/>
		<memberdata name="getscopetype" display="GetScopeType"/>
		<memberdata name="cpathandclasslibs" display="cPathAndClassLibs"/>
		<memberdata name="savedockinfo" display="SaveDockInfo"/>
		<memberdata name="ldocked" display="lDocked"/>
		<memberdata name="ndockposition" display="nDockPosition"/>
		<memberdata name="cdockwindow" display="cDockWindow"/>
		<memberdata name="restoredocking" display="RestoreDocking"/>
		<memberdata name="showpathclasslibs" display="ShowPathClassLibs"/>
		<memberdata name="caption" display="Caption"/>
		<memberdata name="restoreallproperties" display="RestoreAllProperties"/>
		<memberdata name="multipleinstances" display="MultipleInstances"/>
		<memberdata name="getsettingsfilename" display="GetSettingsFileName"/>
		<memberdata name="getfinderscope" display="GetFinderScope"/>
		<memberdata name="cresultsfilename_access" display="cResultsFileName_Access"/>
		<memberdata name="cscreenproperty" display="cScreenProperty"/>
		<memberdata name="nfontsize" display="nFontSize"/>
		<memberdata name="setfontsize" display="SetFontSize"/>
		<memberdata name="oscope" display="oScope"/>
		<memberdata name="ccaption" display="cCaption"/>
		</VFPData>

	ADD OBJECT 'cboScope' AS cbofinder WITH ;
		Anchor = 10, ;
		DisabledForeColor = 0,0,0, ;
		DisplayCount = 25, ;
		FontSize = 8, ;
		Format = "", ;
		Height = 21, ;
		Left = 78, ;
		MaxLength = 254, ;
		Name = "cboScope", ;
		Style = 0, ;
		TabIndex = 7, ;
		Top = 58, ;
		Width = 330, ;
		ZOrderSet = 7
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="combobox" />

	ADD OBJECT 'chklActiveProject' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "\<Active Project", ;
		ControlSource = "ThisForm.lActiveProject", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 15, ;
		Name = "chklActiveProject", ;
		TabIndex = 8, ;
		Top = 6, ;
		Width = 90, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklCurrentDirectory' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "\<Current Dir.", ;
		ControlSource = "ThisForm.lCurrentDirectory", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 164, ;
		Name = "chklCurrentDirectory", ;
		TabIndex = 9, ;
		Top = 6, ;
		Width = 81, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklPathAndClassLibs' AS chkfinder WITH ;
		Alignment = 0, ;
		Anchor = 0, ;
		AutoSize = .T., ;
		Caption = "\<Path/ClassLibs", ;
		ControlSource = "ThisForm.lPathAndClassLibs", ;
		FontSize = 9, ;
		Height = 17, ;
		Left = 304, ;
		Name = "chklPathAndClassLibs", ;
		TabIndex = 9, ;
		ToolTipText = "Searches current path and, for Class Search, classlibs", ;
		Top = 6, ;
		Width = 103, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklProjectHomeDirectory' AS chkfinder WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Home directory and sub-directories only", ;
		ControlSource = "ThisForm.lProjectHomeDirectory", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 78, ;
		Name = "chklProjectHomeDirectory", ;
		TabIndex = 12, ;
		Top = 84, ;
		Visible = .F., ;
		Width = 211, ;
		ZOrderSet = 0
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'chklSubDirectories' AS chkfinder WITH ;
		Alignment = 0, ;
		AutoSize = .T., ;
		Caption = "Searc\<h sub-directories", ;
		ControlSource = "ThisForm.lSubDirectories", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 78, ;
		Name = "chklSubDirectories", ;
		TabIndex = 13, ;
		Top = 84, ;
		Width = 129, ;
		ZOrderSet = 8
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="checkbox" />

	ADD OBJECT 'cmdBrowseDir' AS cmdfinder WITH ;
		Anchor = 0, ;
		Caption = "Browse \<Dir.", ;
		Default = .F., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 164, ;
		Name = "cmdBrowseDir", ;
		TabIndex = 11, ;
		Top = 29, ;
		Width = 80, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdBrowseProject' AS cmdfinder WITH ;
		Anchor = 0, ;
		Caption = "\<Browse Project", ;
		Default = .F., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 11, ;
		Name = "cmdBrowseProject", ;
		TabIndex = 10, ;
		Top = 29, ;
		Width = 97, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdCancel' AS cmdfinder WITH ;
		Anchor = 6, ;
		Cancel = .T., ;
		Caption = "Cancel", ;
		FontSize = 8, ;
		Height = 23, ;
		Left = -100, ;
		Name = "cmdCancel", ;
		TabIndex = 5, ;
		Top = -118, ;
		Width = 68, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGo' AS cmdfinder WITH ;
		Anchor = 0, ;
		AutoSize = .F., ;
		Caption = "\<Go", ;
		Default = .T., ;
		FontBold = .T., ;
		FontSize = 9, ;
		Height = 27, ;
		Left = 162, ;
		Name = "cmdGo", ;
		TabIndex = 11, ;
		Top = 114, ;
		Width = 58, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdScope' AS cmdfinder WITH ;
		Caption = "", ;
		FontSize = 8, ;
		Height = 21, ;
		Left = 49, ;
		Name = "cmdScope", ;
		Picture = ..\images\folder.bmp, ;
		PicturePosition = 13, ;
		SpecialEffect = 2, ;
		TabIndex = 15, ;
		Top = 57, ;
		Width = 21, ;
		ZOrderSet = 5
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'lblScope' AS lblfinder WITH ;
		Alignment = 1, ;
		Caption = "\<Scope:", ;
		FontSize = 8, ;
		Height = 17, ;
		Left = 5, ;
		Name = "lblScope", ;
		TabIndex = 6, ;
		Top = 62, ;
		Width = 40, ;
		ZOrderSet = 6
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="label" />

	ADD OBJECT 'Line1' AS line WITH ;
		Anchor = 10, ;
		Height = 0, ;
		Left = 0, ;
		Name = "Line1", ;
		Top = 106, ;
		Width = 593
		*< END OBJECT: BaseClass="line" />
	
	PROCEDURE Activate
		Set Talk Off
		This.Refresh()
		
	ENDPROC

	PROCEDURE chdirtoscope
		Local lcScope
		lcScope	 = Thisform.cScope
		lcScopeType = Thisform.GetScopeType()
		
		Do Case
			Case lcScopeType = 'Project'
				Cd (Justpath(lcScope))
			Case lcScopeType = 'Folder'
				Cd (Justpath(lcScope))
		Endcase
		
		
	ENDPROC

	PROCEDURE cscope_assign
		Lparameters tcScope
		
		Local lcCaption, lcScope
		If Upper(This.cScope) == Upper(tcScope)
			Return
		Endif
		
		This.cScope	= tcScope
		lcScope		= Trim(This.oTools.DiskFileName(tcScope))
		If Right(lcScope, 1) = '\'
			lcScope = Left(lcScope, Len(lcScope) - 1)
		Endif
		
		lcCaption = Justfname(lcScope)
		If Empty(lcCaption)
			lcCaption = Justfname(Justpath(lcScope))
		Endif
		
		This.Caption = This.cCaption + ' - ' + lcCaption
		
		If Upper(Thisform.cboScope.DisplayValue) == Upper(tcScope)
			Return
		Endif
		
		Thisform.cboScope.DisplayValue = lcScope
		
	ENDPROC

	PROCEDURE Destroy
		This.SaveMRULists()
		This.oSettings.Save(Thisform)
		
		This.oSettings = Null
		This.oTools	   = Null
		
		
	ENDPROC

	PROCEDURE getallsettings
		Local lcProperties
		
		Text To lcProperties Noshow Pretext 15
		cScope
		lActiveProject
		lCurrentDirectory
		lPathAndClassLibs
		lProjectHomeDirectory
		lSubDirectories
		cProjectMRUs
		cDirectoryMRUs
		Endtext
		
		Return Chrtran(lcProperties, ' ', ',')
	ENDPROC

	PROCEDURE getdirfromscope
		Local lcScope, lcScopeType
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		
		Do Case
			Case lcScopeType = 'Project'
				Return lcScope
			Case lcScopeType = 'Folder'
				Return Justpath(lcScope)
			Case lcScopeType = 'Path'
				Return Sys(5) + Curdir()
			Otherwise
				Return ''
		Endcase
		
	ENDPROC

	PROCEDURE getscopetype
		Local lcScope
		lcScope		  = Thisform.cScope
		Do Case
			Case This.lPathAndClassLibs
				Return 'Path'
			Case Upper(Justext(lcScope)) == 'PJX'
				Return 'Project'
			Case Directory(lcScope)
				Return 'Folder'
			Otherwise
				Return 'None'
		Endcase
		
		
	ENDPROC

	PROCEDURE Init
		Lparameters lcCaption
		
		With This
			.cCaption = Evl(lcCaption, This.Caption)
			.oTools	   = Execscript(_Screen.cThorDispatcher, 'Class= tools from pemeditor')
			.oSettings = Execscript(_Screen.cThorDispatcher, 'Class= ThorFormSettings', 'Scope Processor')
			.oSettings.Restore(Thisform, 'Height, Width, Top, Left')
			.oSettings.Restore(Thisform, .GetAllSettings())
			.cboScope.Requery()
		Endwith
		
	ENDPROC

	PROCEDURE Load
		Set Talk Off 
		DoDefault()
		
	ENDPROC

	PROCEDURE savemrulists
		Local lcScopeType
		
		With Thisform
			* --------------------------------------------------------------------------------
			lcScope = This.oTools.DiskFileName(Fullpath(.cScope))
			lcScopeType = Thisform.GetScopeType()
			Do Case
				Case lcScopeType = 'Project'
					.cProjectMRUs = .UpdateMRUList(.cProjectMRUs, lcScope)
				Case lcScopeType = 'Folder'
					.cDirectoryMRUs = .UpdateMRUList(.cDirectoryMRUs, lcScope)
			Endcase
			.cboScope.Requery()
		
		Endwith && Thisform
		
	ENDPROC

	PROCEDURE updatemrulist
		Lparameters lcMRUList, lcNewItem, lnMaxItems
		Local lcNewMRUs
		
		lcNewMRUs = lcNewItem + '|' + lcMRUList
		lcNewMRUs = Strtran(lcNewMRUs, '|' + lcNewItem + '|', '|', 1, 1, 1)
		lnMaxItems = Evl(lnMaxItems, Thisform.nMRUDisplayCount)
		If Occurs('|', lcNewMRUs) > lnMaxItems
			lcNewMRUs = Left(lcNewMRUs, At('|', lcNewMRUs, lnMaxItems))
		Endif
		
		Return lcNewMRUs 
	ENDPROC

	PROCEDURE cboScope.InteractiveChange
		Local lPathAndClassLibs
		If Upper(Thisform.cScope) == Upper(This.DisplayValue)
			Return
		Endif
		
		With Thisform
			.lActiveProject	   = .F.
			.lCurrentDirectory = .F.
			.lPathAndClassLibs = Trim(This.DisplayValue) == Thisform.cPathAndClassLibs
			.cScope			   = This.DisplayValue
		
			.chklActiveProject.Refresh()
			.chklCurrentDirectory.Refresh()
			.chklProjectHomeDirectory.Refresh()
			.chklSubDirectories.Refresh()
			.chklPathAndClassLibs.Refresh()
		
			.cmdScope.Refresh()
		Endwith
		
		
	ENDPROC

	PROCEDURE cboScope.Requery
		Local laLines[1], lcCurDir, lcProjectMRUs, lnCount, lnI
		
		This.Clear()
		lcCurDir = Curdir()
		
		* --------------------------------------------------------------------------------
		lcProjectMRUs = Thisform.cProjectMRUs
		For lnI = _vfp.Projects.Count To 1 Step - 1
			lcProjectMRUs = Thisform.UpdateMRUList(lcProjectMRUs, _vfp.Projects[lnI].Name)
		Endfor
		
		* --------------------------------------------------------------------------------
		This.AddItem('\ ----- Projects -----')
		lnCount = Alines(laLines, lcProjectMRUs, 5, '|')
		For lnI = 1 To Min(lnCount, Thisform.nMRUDisplayCount)
			This.AddItem(Thisform.oTools.DiskFileName(laLines[lnI]))
		Endfor
		
		* --------------------------------------------------------------------------------
		This.AddItem('\-')
		This.AddItem('\ ----- Folders -----')
		lnCount = Alines(laLines, Thisform.cDirectoryMRUs, 5, '|')
		For lnI = 1 To Min(lnCount, Thisform.nMRUDisplayCount)
			This.AddItem(Thisform.oTools.DiskFileName(laLines[lnI]))
		Endfor
		
		*!* ******************** Removed 1/31/2014 *****************
		*!* * --------------------------------------------------------------------------------
		*!* lnCount = Alines(laLines, Thisform.cFavoritesList, 5, '|', ';', Chr[13], Chr[10])
		*!* If lnCount > 0
		*!* 	This.AddItem('\-')
		*!* 	This.AddItem('\ ----- Favorites -----')
		*!* 	For lnI = 1 To lnCount
		*!* 		This.AddItem(Thisform.oTools.DiskFileName(Fullpath(laLines[lnI])))
		*!* 	Endfor
		*!* Endif
		
		This.AddItem('\-')
		This.AddItem(Thisform.cPathAndClassLibs)
		
	ENDPROC

	PROCEDURE cboScope.Valid
		Thisform.Refresh()
		
	ENDPROC

	PROCEDURE chklActiveProject.Refresh
		This.Enabled = _vfp.Projects.Count # 0
		
	ENDPROC

	PROCEDURE chklActiveProject.Valid
		If This.Value
			Thisform.lCurrentDirectory = .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			   = _vfp.Projects[1].Name
			Thisform.Refresh()
		Endif
		
	ENDPROC

	PROCEDURE chklCurrentDirectory.Valid
		If This.Value
			Thisform.lActiveProject	= .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			= Sys(5) + Curdir()
			Thisform.Refresh()
		Endif
		
	ENDPROC

	PROCEDURE chklPathAndClassLibs.Valid
		If This.Value
			Thisform.lActiveProject	   = .F.
			Thisform.lCurrentDirectory = .F.
			Thisform.cScope			   = Thisform.cPathAndClassLibs
			Thisform.Refresh()
		Endif
		
	ENDPROC

	PROCEDURE chklProjectHomeDirectory.Refresh
		This.Visible = Thisform.GetScopeType() = 'Project'
		 
	ENDPROC

	PROCEDURE chklProjectHomeDirectory.Valid
		Thisform.Search(Thisform.lSearchClass)
	ENDPROC

	PROCEDURE chklSubDirectories.Refresh
		This.Visible = Thisform.GetScopeType() = 'Folder'
		
	ENDPROC

	PROCEDURE chklSubDirectories.Valid
		Thisform.Search(Thisform.lSearchClass)
	ENDPROC

	PROCEDURE cmdBrowseDir.Click
		Local lcCurdir, lcFolder
		
		lcFolder = Getdir(Thisform.GetDirFromScope(), 'Select a folder to search', 'Finder', 1 + 16 + 32 + 64 + 512)
		
		If Not Empty(lcFolder)
			Thisform.lActiveProject	   = .F.
			Thisform.lCurrentDirectory = .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			   = lcFolder
			Thisform.Refresh()
		Endif
	ENDPROC

	PROCEDURE cmdBrowseProject.Click
		Local lcCurdir, lcProject
		
		lcCurdir = Sys(5) + Curdir()
		ThisForm.ChDirToScope()
		
		lcProject = Getfile('PJX', 'Project')
		Cd (lcCurdir)
		
		If Not Empty(lcProject)
			Thisform.lActiveProject	   = .F.
			Thisform.lCurrentDirectory = .F.
			Thisform.lPathAndClassLibs = .F.
			Thisform.cScope			   = lcProject
			Thisform.Refresh()
		Endif
	ENDPROC

	PROCEDURE cmdCancel.Click
		ThisForm.Release()
		
	ENDPROC

	PROCEDURE cmdGo.Click
		Thisform.Hide()
		
	ENDPROC

	PROCEDURE cmdScope.Click
		Local lcImageFolder, lcScope, lcScopeType, llEnabled
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		Do Case
			Case lcScopeType = 'Project'
				Modify Project (lcScope) Nowait
			Case lcScopeType = 'Folder'
				Execscript(_Screen.cThorDispatcher, 'Thor_Proc_OpenExplorer', lcScope)
			Case lcScopeType = 'Path'
				Thisform.ShowPathClassLibs()
		Endcase
		
		
	ENDPROC

	PROCEDURE cmdScope.Refresh
		Local lcImageFolder, lcScope, lcScopeType, llEnabled
		lcScope		  = Thisform.cScope
		lcScopeType	  = Thisform.GetScopeType()
		lcImageFolder = Justpath(Justpath(This.ClassLibrary)) + '\Images\'
		Do Case
			Case lcScopeType = 'Project'
				llEnabled		 = File(lcScope)
				This.Picture	 = lcImageFolder + 'Project.bmp'
				This.ToolTipText = 'Click to open this project' + Chr(13) + 'Right-click to open Project folder in Explorer'
			Case lcScopeType = 'Folder'
				llEnabled		 = .T.
				This.Picture	 = lcImageFolder + 'Folder.bmp'
				This.ToolTipText = 'Click to open this folder in Explorer'
			Case lcScopeType = 'Path'
				llEnabled		 = .T.
				This.Picture	 = lcImageFolder + 'Event.bmp'
				This.ToolTipText = 'Click to display current Path and ClassLibs'
			Otherwise
				llEnabled = .F.
		Endcase
		
		This.Enabled = llEnabled
		This.Visible = llEnabled
		
	ENDPROC

	PROCEDURE cmdScope.RightClick
		Local lcImageFolder, lcScope, lcScopeType, llEnabled
		
		lcScope		= Thisform.cScope
		lcScopeType	= Thisform.GetScopeType()
		
		If lcScopeType = 'Project'
				Execscript(_Screen.cThorDispatcher, 'Thor_Proc_OpenExplorer', lcScope)
		Endif
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS frmwhereused AS baseform OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="form" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="grdResults" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="imgClassIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClassIcon" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oDragDrop" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdClassSearch" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="cmdGridClassIcon" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: panelinit
		*m: panelwidthchanged
		*m: setpanelfilter
		*m: setrecordsource
		*m: setupsplitter
		*p: cscope
		*p: cscreenpropertyname
		*p: lsearchingenabled
		*p: lstayopen
		*p: ntreewidth
	*</DefinedPropArrayMethod>

	BindControls = .F.
	Caption = "Where Used"
	cscope = .F.
	cscreenpropertyname = 
	DataSession = 2
	DoCreate = .T.
	Height = 155
	Left = 0
	lsearchclass = .T.
	lsearchingenabled = .F.
	lstayopen = .T.
	Name = "frmwhereused"
	ntreewidth = 200
	Top = 0
	Visible = .T.
	Width = 600
	_memberdata = <VFPData>
		<memberdata name="setrecordsource" display="SetRecordSource"/>
		<memberdata name="cscope" display="cScope"/>
		<memberdata name="cscreenpropertyname" display="cScreenPropertyName"/>
		<memberdata name="lsearchingenabled" display="lSearchingEnabled"/>
		<memberdata name="lstayopen" display="lStayOpen"/>
		<memberdata name="ntreewidth" display="nTreeWidth"/>
		<memberdata name="setpanelfilter" display="SetPanelFilter"/>
		<memberdata name="setupsplitter" display="SetupSplitter"/>
		<memberdata name="panelinit" display="PanelInit"/>
		<memberdata name="panelwidthchanged" display="PanelWidthChanged"/>
		</VFPData>

	ADD OBJECT 'cmdClassIcon' AS commandbutton WITH ;
		Caption = "", ;
		DragIcon = ..\apps\pem editor\images\control.cur, ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 134, ;
		Name = "cmdClassIcon", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 4, ;
		TabStop = .F., ;
		ToolTipText = "", ;
		Top = 4, ;
		Width = 16
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'cmdClassSearch' AS cmdfinder WITH ;
		Caption = "\<Class Search", ;
		FontBold = .T., ;
		FontSize = 8, ;
		Height = 23, ;
		Left = 246, ;
		Name = "cmdClassSearch", ;
		TabIndex = 3, ;
		Top = -42, ;
		Width = 87, ;
		ZOrderSet = 10
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="commandbutton" />

	ADD OBJECT 'cmdGridClassIcon' AS commandbutton WITH ;
		Caption = "", ;
		DragIcon = ..\apps\pem editor\images\control.cur, ;
		FontName = "MS Sans Serif", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = -92, ;
		Name = "cmdGridClassIcon", ;
		SpecialEffect = 1, ;
		Style = 1, ;
		TabIndex = 5, ;
		TabStop = .F., ;
		ToolTipText = "", ;
		Top = -92, ;
		Width = 16
		*< END OBJECT: BaseClass="commandbutton" />

	ADD OBJECT 'grdResults' AS grdfinder WITH ;
		Height = 147, ;
		Left = 219, ;
		Name = "grdResults", ;
		TabIndex = 1, ;
		Top = 4, ;
		Width = 375, ;
		colClass.Header1.Name = "Header1", ;
		colClass.Name = "colClass", ;
		colClass.Text1.Name = "Text1", ;
		colFileName.Header1.Name = "Header1", ;
		colFileName.Name = "colFileName", ;
		colFileName.Text1.Name = "Text1", ;
		colFolder.Header1.Name = "Header1", ;
		colFolder.Name = "colFolder", ;
		colFolder.Text1.Name = "Text1", ;
		colParentClass.Header1.Name = "Header1", ;
		colParentClass.Name = "colParentClass", ;
		colParentClass.Text1.Name = "Text1", ;
		colClassLoc.Header1.Name = "Header1", ;
		colClassLoc.Name = "colClassLoc", ;
		colClassLoc.Text1.Name = "Text1", ;
		colBaseClass.Header1.Name = "Header1", ;
		colBaseClass.Name = "colBaseClass", ;
		colBaseClass.Text1.Name = "Text1", ;
		colBaseClass.Width = 85, ;
		colTimeStamp.Header1.Name = "Header1", ;
		colTimeStamp.Name = "colTimeStamp", ;
		colTimeStamp.Text1.Name = "Text1", ;
		colSize.Header1.Name = "Header1", ;
		colSize.Name = "colSize", ;
		colSize.Text1.Name = "Text1", ;
		colExt.Header1.Name = "Header1", ;
		colExt.Name = "colExt", ;
		colExt.Text1.Name = "Text1"
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="grid" />

	ADD OBJECT 'imgClassIcon' AS image WITH ;
		BackStyle = 0, ;
		Height = 16, ;
		Left = 134, ;
		Name = "imgClassIcon", ;
		Picture = ..\apps\pem editor\images\clibrary.ico, ;
		Stretch = 1, ;
		Top = 4, ;
		Width = 16
		*< END OBJECT: BaseClass="image" />

	ADD OBJECT 'oDragDrop' AS custdragdrop WITH ;
		Height = 17, ;
		Left = 339, ;
		Name = "oDragDrop", ;
		Top = 0, ;
		Width = 28
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="custom" />
	
	PROCEDURE Destroy
		RemoveProperty(_Screen, This.cScreenPropertyName)
		
		This.nDockable	 = This.Dockable
		This.cColumnInfo = This.grdResults.GetColumnInfo()
		This.nTreeWidth	 = This.oPanel.Width
		This.oSettings.Save(This)
		
		This.oSettings = Null
		This.oTools	   = Null
		
	ENDPROC

	PROCEDURE getallsettings
		Local lcProperties
		
		Text To lcProperties Noshow Pretext 15
		cColumnInfo
		nTreeWidth
		cSortOrder 
		Endtext
		
		Return Chrtran(lcProperties, ' ', ',')
	ENDPROC

	PROCEDURE Init
		* tools home page = http://vfpx.codeplex.com/wikipage?title=thor%20tools%20object
		* ThorFormSettings home page = http://vfpx.codeplex.com/wikipage?title=Thor%20Framework%20FormSettings
		
		Local loContextMenu As ContextMenu Of 'C:\VISUAL FOXPRO\PROGRAMS\MyThor\Thor\Source\Thor_Menu.vcx'
		Local loSettings As Thor_Form_Settings Of 'C:\VISUAL FOXPRO\PROGRAMS\MyThor\Thor\Source\Thor_FoxResource.vcx'
		Local lcClassLibrary, loGrid
		
		With This
			.LockScreen = .T.
		
			Use(Execscript(_Screen.cThorDispatcher, 'Full Path=THOR_PROC_FileTypes.DBF')) 	Again In 0 Alias FileTypes
			Use(Execscript(_Screen.cThorDispatcher, 'Full Path=THOR_PROC_BaseClasses.DBF')) Again In 0 Alias BaseClasses
		
			.oTools	   = Execscript(_Screen.cThorDispatcher, 'Class= tools from pemeditor')
			.oSettings = Execscript(_Screen.cThorDispatcher, 'Class= ThorFormSettings', 'WhereUsed')
		
			.oSettings.Restore(Thisform, 'nDockable')
			.Dockable = .nDockable && since this makes the form visible
			.oSettings.Restore(Thisform, 'Height, Width, Top, Left')
		
			.oSettings.Restore(Thisform, .GetAllSettings())
		
			.grdResults.SetColumnInfo(This.cColumnInfo)
			.grdResults.Setall("DynamicBackColor", "IIF(Empty(Class), RGB(224,224,224), Rgb(255,255,255))")
			.grdResults.Setall("DynamicFontItalic", "Descendant")
		
			.LockScreen = .F.
		
		Endwith
		
	ENDPROC

	PROCEDURE panelinit
		Local loGrid
		With This
			loGrid = .grdResults
			.Newobject('oPanel', 'PanelBaseClass', This.ClassLibrary)
			With .oPanel
				.Anchor  = 0
				.Left	 = 4
				.Top	 = 24
				.Height	 = Max(10, loGrid.Height + loGrid.Top - This.Top)
				.Width	 = 200
				.Visible = .T.
			Endwith
		Endwith
		
		BindEvent(This.oPanel, 'Width', This, 'PanelWidthChanged')
		
		
		
	ENDPROC

	PROCEDURE panelwidthchanged
		#Define cnOffset 10
		
		Thisform.cmdClassIcon.Left = This.oPanel.Width - cnOffset
		Thisform.imgClassIcon.Left = This.oPanel.Width - cnOffset
		
	ENDPROC

	PROCEDURE setpanelfilter
		Lparameters lcPanelFilter, lcBaseClass
		
		If Thisform.cPanelFilter == lcPanelFilter
			Return
		Endif
		
		Thisform.cPanelFilter = lcPanelFilter
		Thisform.RefreshResults()
		
		
	ENDPROC

	PROCEDURE setrecordsource
		Lparameters lcXML, lcClass
		
		XMLToCursor(lcXML, 'crsr_Results')
		Goto top in crsr_Results
		Select * from crsr_Results into cursor crsr_SearchResults Readwrite 
		
		This.Caption = 'Where used for: ' + lcClass
		This.PanelInit()
		This.RefreshResults()
		
		This.BindControls = .T.
		
		This.SetupSplitter(This.nTreeWidth)
		
	ENDPROC

	PROCEDURE setupsplitter
		Lparameters lnPanelWidth
		
		#Define cnMARGIN 4
		
		Local lnAnchor, loGrid, loTree
		
		loGrid = This.grdResults
		loTree = This.oPanel
		lnPanelWidth = This.nTreeWidth 
		With loTree
			.Left	 = 6
			.Visible = .T.
			.Height	 = loGrid.Top + loGrid.Height - loTree.Top
			.Width	 = lnPanelWidth
			.Anchor	 = 5
		Endwith
		
		This.Newobject('oSplitterH', 'Thor_SFSplitterH', Execscript(_Screen.cThorDispatcher, 'Full Path=THOR_SFSPLITTER.VCX'))
		With This.oSplitterH
			.lShowGripper	 = .T.
			.cObject1Name	 = 'oPanel'
			.cObject2Name	 = 'grdResults'
			.nObject1MinSize = 100
			.nObject2MinSize = 100
			.BackColor		 = Rgb(192, 192, 192)
			.BackStyle		 = 1
			.Top			 = loTree.Top
			.Height			 = loTree.Height
			.Left			 = loTree.Left + loTree.Width + cnMARGIN
			.Anchor			 = 5
			.Visible		 = .T.
		Endwith
		
		With loGrid
			lnAnchor = .Anchor
			.Anchor	 = 0
			.Left	 = This.oSplitterH.Left + This.oSplitterH.Width + cnMARGIN
			.Width	 = This.Width - .Left - 7
			.Anchor	 = lnAnchor
		Endwith
		
		This.PanelWidthChanged()
		
	ENDPROC

	PROCEDURE cmdClassIcon.DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.oDragDrop.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdClassIcon.DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.oDragDrop.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

	PROCEDURE cmdClassIcon.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		Thisform.oDragDrop.MouseDown(nButton, nShift, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdClassIcon.Refresh
		Local llEnabled
		llEnabled = Not Empty (Thisform.oDragDrop.cClass) and Not Empty (Thisform.oDragDrop.cBaseClass)
		
		This.Visible = llEnabled
		This.Enabled = llEnabled
		Thisform.imgClassIcon.Visible = llEnabled
		Thisform.imgClassIcon.Enabled = llEnabled
		
	ENDPROC

	PROCEDURE cmdClassIcon.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.oDragDrop.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.oDragDrop.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		Thisform.oDragDrop.MouseDown(nButton, nShift, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.Refresh
		Local llEnabled
		llEnabled = Not Empty (Thisform.oDragDrop.cClass) and Not Empty (Thisform.oDragDrop.cBaseClass)
		
		This.Visible = llEnabled
		This.Enabled = llEnabled
		Thisform.imgClassIcon.Visible = llEnabled
		Thisform.imgClassIcon.Enabled = llEnabled
		
	ENDPROC

	PROCEDURE cmdGridClassIcon.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE imgClassIcon.DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE imgClassIcon.DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS grdfinder AS basegrid OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="grid" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="colClass.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colClass.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colFileName.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colFileName.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colFolder.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colFolder.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colParentClass.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colParentClass.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colClassLoc.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colClassLoc.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colBaseClass.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colBaseClass.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colTimeStamp.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colTimeStamp.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colSize.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colSize.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colExt.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="colExt.Text1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: copyproperties
		*m: createdescendants
		*m: descendants
		*m: fontsize_assign
		*m: gofishing
		*m: opengofish
		*m: readallclasses
		*m: showminicontextmenu
	*</DefinedPropArrayMethod>

	AllowCellSelection = .F.
	Anchor = 15
	ColumnCount = 9
	DeleteMark = .F.
	FontSize = 8
	GridLineColor = 192,192,192
	GridLines = 0
	Height = 138
	Name = "grdfinder"
	Panel = 1
	RecordMark = .F.
	RecordSource = "crsr_Results"
	RowHeight = 17
	TabIndex = 14
	Width = 567
	_memberdata = <VFPData>
		<memberdata name="showcontextmenu" display="ShowContextMenu"/>
		<memberdata name="handledoubleclick" display="HandleDoubleClick"/>
		<memberdata name="setcolumninfo" display="SetColumnInfo"/>
		<memberdata name="getcolumninfo" display="GetColumnInfo"/>
		<memberdata name="showminicontextmenu" display="ShowMiniContextMenu"/>
		<memberdata name="gofishing" display="GoFishing"/>
		<memberdata name="copyproperties" display="CopyProperties"/>
		<memberdata name="opengofish" display="OpenGoFish"/>
		<memberdata name="descendants" display="Descendants"/>
		<memberdata name="readallclasses" display="ReadAllClasses"/>
		<memberdata name="createdescendants" display="CreateDescendants"/>
		<memberdata name="fontsize" display="FontSize"/>
		<memberdata name="fontsize_assign" display="FontSize_Assign"/>
		</VFPData>
	Column1.ControlSource = "crsr_Results.Class"
	Column1.FontSize = 8
	Column1.Name = "colClass"
	Column1.Width = 100
	Column2.ColumnOrder = 3
	Column2.ControlSource = "crsr_Results.Filename"
	Column2.FontSize = 8
	Column2.Name = "colFileName"
	Column2.Width = 150
	Column3.ColumnOrder = 5
	Column3.ControlSource = "crsr_Results.Folder"
	Column3.FontSize = 8
	Column3.Name = "colFolder"
	Column3.Width = 150
	Column4.ColumnOrder = 8
	Column4.ControlSource = "crsr_Results.Parent"
	Column4.FontSize = 8
	Column4.Name = "colParentClass"
	Column4.Width = 100
	Column5.ColumnOrder = 9
	Column5.ControlSource = "crsr_Results.Classloc"
	Column5.FontSize = 8
	Column5.Name = "colClassLoc"
	Column5.Width = 150
	Column6.ColumnOrder = 2
	Column6.ControlSource = "crsr_Results.Baseclass"
	Column6.FontSize = 8
	Column6.Name = "colBaseClass"
	Column6.Width = 85
	Column7.Alignment = 2
	Column7.ColumnOrder = 6
	Column7.ControlSource = "crsr_Results.Timestamp"
	Column7.FontSize = 8
	Column7.Name = "colTimeStamp"
	Column7.Width = 115
	Column8.ColumnOrder = 7
	Column8.ControlSource = "crsr_Results.Size"
	Column8.FontSize = 8
	Column8.InputMask = "9,999,999,999"
	Column8.Name = "colSize"
	Column9.Alignment = 2
	Column9.ColumnOrder = 4
	Column9.ControlSource = "Lower(JustExt(crsr_Results.FileName))"
	Column9.FontSize = 8
	Column9.Name = "colExt"
	Column9.Width = 25

	ADD OBJECT 'colBaseClass.Header1' AS header WITH ;
		Caption = "Base Class", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'colBaseClass.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'colClass.Header1' AS header WITH ;
		Caption = "Class", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'colClass.Text1' AS textbox WITH ;
		Alignment = 2, ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'colClassLoc.Header1' AS header WITH ;
		Caption = "Parent Class Location", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'colClassLoc.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'colExt.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Ext", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'colExt.Text1' AS textbox WITH ;
		Alignment = 2, ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'colFileName.Header1' AS header WITH ;
		Caption = "File Name", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'colFileName.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'colFolder.Header1' AS header WITH ;
		Caption = "Folder", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'colFolder.Text1' AS textbox WITH ;
		Alignment = 3, ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'colParentClass.Header1' AS header WITH ;
		Caption = "Parent Class", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'colParentClass.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'colSize.Header1' AS header WITH ;
		Alignment = 1, ;
		Caption = "Size", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'colSize.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'colTimeStamp.Header1' AS header WITH ;
		Alignment = 2, ;
		Caption = "Date / Time", ;
		FontSize = 8, ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'colTimeStamp.Text1' AS textbox WITH ;
		Alignment = 2, ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		FontSize = 8, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />
	
	PROCEDURE AfterRowColChange
		LPARAMETERS nColIndex
		
		Thisform.SaveDragInfo()
	ENDPROC

	PROCEDURE copyproperties
		Lparameters loSource, lcPreservedProperties, loDestination
		
		Local lcProperties, lcProperty, lnI
		lcProperties = Chrtran(lcPreservedProperties, ',' + Chr[13] + Chr[10], '   ')
		For lnI = 1 To Getwordcount(lcProperties)
			lcProperty = Getwordnum(lcProperties, lnI)
			AddProperty(loDestination, lcProperty, Getpem(loSource, lcProperty))
		Endfor
		
	ENDPROC

	PROCEDURE createdescendants
		Lparameters lcSourceAlias, lcFullname, lcClass, lcDestAlias
		
		Local lnTally
		Select  Source.*									;
				  From(lcSourceAlias)    As  Source			;
			Where Lower(FullName) = Lower(lcFullname)		;
				And Lower(Class) = Lower(lcClass)			;
			Into Cursor crsr_Temp Readwrite
		
		If _Tally = 0
			Return
		Endif
		
		Replace All SortKey With ' '
		Select * From crsr_Temp Into Cursor crsr_Parents Readwrite
		
		Do While .T.
			Select  Source.*,																			;
					crsr_Parents.SortKey     As  NewSortKey												;
					  From(lcSourceAlias)    As  Source													;
					Join crsr_Parents																	;
						On Lower(Source.ClassLoc + Source.Parent) = Lower(crsr_Parents.FullName + crsr_Parents.Class) ;
				Order By Source.Class																	;
				Into Cursor crsr_new Readwrite
			Replace All SortKey With Trim(NewSortKey) + Transform(Recno(), '@L 9999')
		
			If _Tally = 0
				Exit
			Endif
		
			Select crsr_Temp
			Append From(Dbf('crsr_New'))
		
			Select * From crsr_new Into Cursor crsr_Parents Readwrite
		
		Enddo && While .T.
		
		Select  *					;
			From crsr_Temp			;
			Order By SortKey		;
			Into Cursor(Evl(lcDestAlias, 'crsr_Descendants')) Readwrite
		
	ENDPROC

	PROCEDURE descendants
		Lparameters loRecord
		
		Local lcXML, lnRecno, loDescendants
		This.ReadAllClasses()
		This.CreateDescendants('crsr_SearchAll', loRecord.FullName, loRecord.Class, 'crsr_Descendants')
		
		lnRecno	= Recno()
		lcXML	= ''
		Cursortoxml(Alias(), 'lcXml', 1, 0, 0, '1')
		Goto(lnRecno)
		
		loDescendants = Newobject('frmDescendants', This.ClassLibrary)
		loDescendants.cHomeDir = Thisform.cHomeDir
		loDescendants.SetRecordSource(lcXML)
		loDescendants.Show()
		_Screen.AddProperty(Sys(2015) + '_Descendants', loDescendants)
		
	ENDPROC

	PROCEDURE DragDrop
		Lparameters oSource, nXCoord, nYCoord
		
		Return Thisform.oDragDrop.DragDrop(oSource, nXCoord, nYCoord, This)
		
	ENDPROC

	PROCEDURE DragOver
		Lparameters oSource, nXCoord, nYCoord, nState
		
		Return Thisform.oDragDrop.DragOver(oSource, nXCoord, nYCoord, nState, This)
		
	ENDPROC

	PROCEDURE fontsize_assign
		Lparameters tFontSize
		
		Local laWidths[1], lnColumns, lnHeaderHeight, lnI
		
		lnColumns = This.ColumnCount
		Dimension laWidths[lnColumns]
		For lnI = 1 To lnColumns
			laWidths[lnI] = This.Columns[lnI].Width
		Endfor
		
		* --------------------------------------------------------------------------------
		This.FontSize = tFontSize
		* --------------------------------------------------------------------------------
		
		For lnI = 1 To lnColumns
			This.Columns[lnI].Width = laWidths[lnI]
		Endfor
		
		
	ENDPROC

	PROCEDURE gofishing
		Lparameters loRecord
		
		Local loPreservedProperties As 'Empty'
		Local lcPreservedProperties, lcSearchPath, lcSearchText, llWarnWholeWord, loSearchOptions
		
		lcSearchText = Trim(Evl(loRecord.Class, JustStem(loRecord.FileName)))
		lcSearchPath = Thisform.cScope
		
		This.OpenGoFish()
		
		loSearchOptions = _Screen._GoFish.oResultsForm.oSearchEngine.oSearchOptions
		
		Text To lcPreservedProperties Noshow
		lRegularExpression
		lMatchWholeWord
		lMatchCase
		lSearchInComments
		Endtext
		
		loPreservedProperties = Createobject('Empty')
		This.CopyProperties(loSearchOptions, lcPreservedProperties, loPreservedProperties)
		
		With loSearchOptions
			.cSearchExpression = lcSearchText
			.nSearchScope	   = Iif(Directory(lcSearchPath), 4, 2)
		
			.lRegularExpression	= .F.
			.lMatchWholeWord	= .T.
			.lMatchCase			= .F.
			.lSearchInComments	= .F.
		Endwith
		
		With _Screen._GoFish.oResultsForm.comboSearchScopeHistory
			.AddRow(Lower(lcSearchPath))
			.Value  = Lower(lcSearchPath)
			.Valid()
		Endwith
		
		With _Screen._GoFish.oResultsForm
			llWarnWholeWord	= .lWarnWholeWord
			.lWarnWholeWord	= .F.
		
			Thisform.lSearchingEnabled = .F.
			.Search()
			Thisform.lSearchingEnabled = .T.
		
			.lWarnWholeWord = llWarnWholeWord
			This.CopyProperties(loPreservedProperties, lcPreservedProperties, loSearchOptions)
			.Refresh()
		Endwith
		
	ENDPROC

	PROCEDURE handledoubleclick
		Local lcExt, lcFilename
		lcFilename = FullName
		lcExt	   = Justext(lcFilename)
		
		Do Case
			Case ThisForm.lSearchClass 
			
			Case lcExt = 'FXP'
				lcFilename = Forceext(lcFilename, 'PRG')
			Case lcExt = 'SCT'
				lcFilename = Forceext(lcFilename, 'SCX')
			Case lcExt = 'VCT'
				lcFilename = Forceext(lcFilename, 'VCX')
			Case lcExt = 'FRT'
				lcFilename = Forceext(lcFilename, 'FRX')
			Case lcExt = 'CDX'
				lcFilename = Forceext(lcFilename, 'DBF')
			Case lcExt = 'FPT'
				lcFilename = Forceext(lcFilename, 'DBF')
		Endcase
		
		Thisform.LockScreen = .T.
		If Thisform.EditSourceFile (lcFilename, Class, '', StartRange, EndRange)
			If Not Thisform.lStayOpen
				Thisform.Release()
			Endif
		Endif
		Thisform.LockScreen = .F.
	ENDPROC

	PROCEDURE Init
		DoDefault()
		
		With this
			.AddProperty ('nCurrentRecno', 0)
			.AddProperty ('nSeconds', 0)
		EndWith 
	ENDPROC

	PROCEDURE KeyPress
		Lparameters nKeyCode, nShiftAltCtrl
		
		If nKeyCode = 13 And nShiftAltCtrl = 0 And Not Eof()
			Thisform.EditSourceFile (FullName, Class, '', StartRange, EndRange)
			Thisform.Release()
		Endif
		
	ENDPROC

	PROCEDURE MouseDown
		Lparameters nButton, nShift, nXCoord, nYCoord
		
		Local laMouseObj[4], lnLeft, lnTop, loClassIcon
		
		If nButton = 1 And nShift #0 and  Not Empty(Thisform.oDragDrop.cBaseClass)
			loClassIcon	= This.Parent.cmdGridClassIcon
			lnLeft		= loClassIcon.Left
			lnTop		= loClassIcon.Top
		
			Amouseobj(laMouseObj, 1)
			loClassIcon.Visible	= .F.
			loClassIcon.Left	= laMouseObj[3]
			loClassIcon.Top		= laMouseObj[4]
		
			Thisform.oDragDrop.MouseDown(nButton, nShift, nXCoord, nYCoord, loClassIcon)
		
			loClassIcon.Visible	= .T.
			loClassIcon.Left	= lnLeft
			loClassIcon.Top		= lnTop
		
		Endif
		
	ENDPROC

	PROCEDURE MouseUp
		Lparameters nButton, nShift, nXCoord, nYCoord
		
		#Define cnLeftButton	1
		#Define cnRightButton	2
		
		#Define cnColumnHeader  1
		#Define cnCell  		3
		
		
		#Define DoubleClickLimit 4 * _Dblclick
		
		*** JRN 2010-03-26 : fun and games testing for double click
		Local nRelCol_Out, nRelRow_Out, nView_Out, nWhere_Out, nXCoord_In, nYCoord_In
		
		nXCoord_In = Mcol (Wontop(), 3)
		nYCoord_In = Mrow (Wontop(), 3)
		Store 0 To nWhere_Out, nRelRow_Out, nRelCol_Out, nView_Out
		This.GridHitTest (nXCoord_In, nYCoord_In, @nWhere_Out, @nRelRow_Out, @nRelCol_Out)
		
		Do Case
		
			Case nButton = cnRightButton and not InList(nWhere_Out, cnColumnHeader, cnCell)
				This.ShowMiniContextMenu()
		
			Case nWhere_Out # cnCell or Recno() = 0 or Eof()
		
			Case nButton = cnLeftButton
		
				If Recno() = This.nCurrentRecno And Seconds() <= DoubleClickLimit + This.nSeconds
					This.HandleDoubleClick()
				Else
					This.nCurrentRecno = Recno()
					This.nSeconds	   = Seconds()
				Endif
		
			Case nButton = cnRightButton
		
				This.ShowContextMenu()
				This.nCurrentRecno = 0
				This.nSeconds	   = 0
		
			Otherwise
		
				This.nCurrentRecno = 0
				This.nSeconds	   = 0
		
		Endcase
		
		
	ENDPROC

	PROCEDURE opengofish
		Local llResult
		
		* ?Already Open
		If Type('_Screen._GoFish') = 'O' And Vartype(_Screen._GoFish) = 'O'
			Return
		Endif
		
		llResult = Execscript(_Screen.cThorDispatcher, 'Thor_Tool_GoFish4_Beta')
		If Not Isnull(llResult)
			Return
		Endif
		
		Execscript(_Screen.cThorDispatcher, 'Thor_Tool_GoFish4')
		
	ENDPROC

	PROCEDURE readallclasses
		If Not Used('crsr_SearchAll')
			With Thisform
				.lSearching = .T.
				.lblSearching.Refresh()
		
				.TransferPropertiesToEngine()
				.oSearchEngine.cLookFor		 = ''
				.oSearchEngine.cLookForClass = ''
		
				.CreateResultsCursor('crsr_SearchAll')
				.oSearchEngine.Search('crsr_SearchAll')
		
				.lSearching	= .F.
			Endwith
		Endif
		
		
	ENDPROC

	PROCEDURE Refresh
		With This
			Select (.RecordSource)
			.ColFileName.ControlSource = [JustFName (FileName)]
			.ColFolder.ControlSource   = [JustPath (ThisForm.GetRelativePath (FullName, '] + Addbs(Thisform.cHomeDir) + ['))]
			.ColClassLoc.ControlSource = [IIF(Empty(ClassLoc), '', ThisForm.GetRelativePath (Trim(ClassLoc), '] + Addbs(Thisform.cHomeDir) + ['))]
		
			.colBaseClass.Visible	= Thisform.lSearchClass
			.colClass.Visible		= Thisform.lSearchClass
			.ColClassLoc.Visible	= Thisform.lSearchClass
			.colParentClass.Visible	= Thisform.lSearchClass
			.colSize.Visible		= Not Thisform.lSearchClass	
		Endwith
		
		Thisform.SaveDragInfo()
		
	ENDPROC

	PROCEDURE showcontextmenu
		Local lcClass, lcField, lcKeyword, lcPrompt, lcVCXName, llSuccess, loFileContextMenu, loRecord
		
		Scatter Name loRecord
		lcVCXName		  = This.ClassLibrary
		
		If Empty(loRecord.Class)
			lcClass = 'FileContextMenu'
		Else
			lcClass = 'ClassContextMenu'
		Endif
		
		loFileContextMenu = Execscript(_Screen.cThorDispatcher, 'Thor_Proc_NewSessionObject', lcClass, lcVCXName)
		lcKeyword		  = loFileContextMenu.Run(This, loRecord, Thisform.nColumnFilterCount, Thisform.lAddDescendants)
		
		Set Talk Off
		
		If Empty(lcKeyword)
			Return
		Endif
		
		Do Case
			Case lcKeyword = 'Set scope to this folder'
				Thisform.cScope			   = Trim(crsr_Results.Folder)
				Thisform.lActiveProject	   = .F.
				Thisform.lCurrentDirectory = .F.
				Thisform.Refresh()
				Return
		
			Case lcKeyword = 'Filter'
				lcPrompt = Getwordnum(lcKeyword, 2, '|')
				lcField	 = Getwordnum(lcKeyword, 3, '|')
				Thisform.SetColumnFilter (lcPrompt, lcField)
				Return
		
			Case lcKeyword = 'Remove Filter'
				Thisform.nColumnFilterCount	= 0
				Thisform.cColumnFilter		= ''
				Thisform.RefreshResults()
				Return
		
			Case lcKeyword = 'GoFish'
				This.GoFishing(loRecord)
		
			Case lcKeyword = 'Descendants'
				ThisForm.Descendants(loRecord.Class, loRecord.FullName)
		
			Case lcKeyword = 'Siblings'
				ThisForm.Descendants(loRecord.Parent, loRecord.ClassLoc)
		
			Case lcKeyword = 'Where Used'
				ThisForm.WhereUsed(loRecord.Class, loRecord.FullName)
		
			Case lcKeyword = 'Error'
				Return
		
		Endcase
		
		If Thisform.lStayOpen
			Return
		Endif
		
		Thisform.Release()
		
		
		
	ENDPROC

	PROCEDURE showminicontextmenu
		Local lcClass, lcField, lcKeyword, lcPrompt, lcVCXName, loFileContextMenu
		lcVCXName = This.ClassLibrary
		lcClass	  = 'filteronlycontextmenu'
		
		loFileContextMenu = Execscript(_Screen.cThorDispatcher, 'Thor_Proc_NewSessionObject', lcClass, lcVCXName)
		lcKeyword		  = loFileContextMenu.Run(This, , Thisform.nColumnFilterCount, Thisform.lAddDescendants)
		
		Set Talk Off
		
		If Empty(lcKeyword)
			Return
		Endif
		
		Do Case
			Case lcKeyword = 'Filter'
				lcPrompt = Getwordnum(lcKeyword, 2, '|')
				lcField	 = Getwordnum(lcKeyword, 3, '|')
				Thisform.SetColumnFilter (lcPrompt, lcField)
				Return
			Case lcKeyword = 'Remove Filter'
				Thisform.nColumnFilterCount	= 0
				Thisform.cColumnFilter		= ''
				Thisform.RefreshResults()
				Return
		Endcase
		
		If Thisform.lStayOpen
			Return
		Endif
		
		Thisform.Release()
		
		
		
	ENDPROC

	PROCEDURE When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE colBaseClass.Header1.Click
		Thisform.SetSortOrder(This.Parent.Name)
		
	ENDPROC

	PROCEDURE colBaseClass.Header1.RightClick
		Thisform.SetColumnFilter ('Base Class', 'BaseClass')
		
	ENDPROC

	PROCEDURE colBaseClass.Init
		This.AddProperty('cFilter', 'Base Class|BaseClass')
		
	ENDPROC

	PROCEDURE colClass.Header1.Click
		Thisform.SetSortOrder(This.Parent.Name)
		
		
		
	ENDPROC

	PROCEDURE colClass.Header1.RightClick
		Thisform.SetColumnFilter ('Class', 'Class')
		
	ENDPROC

	PROCEDURE colClass.Init
		This.AddProperty('cFilter', 'Class|Class')
		
		
	ENDPROC

	PROCEDURE colClassLoc.Header1.Click
		Thisform.SetSortOrder(This.Parent.Name)
		
	ENDPROC

	PROCEDURE colClassLoc.Header1.RightClick
		Thisform.SetColumnFilter ('Parent Class Location', 'Class Loc')
		
	ENDPROC

	PROCEDURE colClassLoc.Init
		This.AddProperty('cFilter', 'Parent Class Location|Class Loc')
		
	ENDPROC

	PROCEDURE colExt.Header1.Click
		Thisform.SetSortOrder(This.Parent.Name)
		
	ENDPROC

	PROCEDURE colExt.Header1.RightClick
		Thisform.SetColumnFilter ('Extension', 'JustExt(FileName)')
		
	ENDPROC

	PROCEDURE colExt.Init
		This.AddProperty('cFilter', 'Extension|JustExt(FileName)')
		
	ENDPROC

	PROCEDURE colExt.Refresh
		This.Visible = Thisform.lSearchClass 
		
	ENDPROC

	PROCEDURE colFileName.Header1.Click
		Thisform.SetSortOrder(This.Parent.Name)
		
	ENDPROC

	PROCEDURE colFileName.Header1.RightClick
		Thisform.SetColumnFilter ('File Name', 'FileName')
		
		
	ENDPROC

	PROCEDURE colFileName.Init
		This.AddProperty('cFilter', 'File \<Name|FileName')
		
	ENDPROC

	PROCEDURE colFolder.Header1.Click
		Thisform.SetSortOrder(This.Parent.Name)
		
	ENDPROC

	PROCEDURE colFolder.Header1.RightClick
		Thisform.SetColumnFilter ('Folder', 'Folder')
		
	ENDPROC

	PROCEDURE colFolder.Init
		This.AddProperty('cFilter', 'Folder|Folder')
		
	ENDPROC

	PROCEDURE colParentClass.Header1.Click
		Thisform.SetSortOrder(This.Parent.Name)
		
	ENDPROC

	PROCEDURE colParentClass.Header1.RightClick
		Thisform.SetColumnFilter ('Parent Class', 'Parent')
		
	ENDPROC

	PROCEDURE colParentClass.Init
		This.AddProperty('cFilter', 'Parent Class|Parent')
		
	ENDPROC

	PROCEDURE colSize.Header1.Click
		Thisform.SetSortOrder(This.Parent.Name)
		
	ENDPROC

	PROCEDURE colSize.Header1.RightClick
		This.Parent.Parent.ShowMiniContextMenu()
		
	ENDPROC

	PROCEDURE colTimeStamp.Header1.Click
		Thisform.SetSortOrder(This.Parent.Name)
		
	ENDPROC

	PROCEDURE colTimeStamp.Header1.RightClick
		This.Parent.Parent.ShowMiniContextMenu()
		
	ENDPROC

ENDDEFINE

DEFINE CLASS imgfinder AS image 
 	*< CLASSDATA: Baseclass="image" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 17
	Name = "imgfinder"
	Width = 100

ENDDEFINE

DEFINE CLASS lblfinder AS label 
 	*< CLASSDATA: Baseclass="label" Timestamp="" Scale="Pixels" Uniqueid="" />

	Caption = "Label1"
	Height = 17
	Name = "lblfinder"
	Width = 40

ENDDEFINE

DEFINE CLASS pagefilterpanel AS page 
 	*< CLASSDATA: Baseclass="page" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\common.h"
	*<DefinedPropArrayMethod>
		*m: gethomefolder
		*m: hightlightpreviousselection
		*m: loadtree
		*m: nodeadd
		*m: nodeclicked
		*m: setfontsize
		*m: setup
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	Caption = "Page1"
	Height = 192
	Name = "pagefilterpanel"
	Width = 192
	_memberdata = <VFPData>
		<memberdata name="setup" display="Setup"/>
		<memberdata name="setfontsize" display="SetFontSize"/>
		<memberdata name="loadtree" display="LoadTree"/>
		<memberdata name="nodeclicked" display="NodeClicked"/>
		<memberdata name="hightlightpreviousselection" display="HightlightPreviousSelection"/>
		<memberdata name="gethomefolder" display="GetHomeFolder"/>
		<memberdata name="nodeadd" display="NodeAdd"/>
		</VFPData>		&& XML Metadata for customizable properties
	
	PROCEDURE Activate
		Thisform.oPanelProperties.nPage = This.Parent.ActivePage
	ENDPROC

	PROCEDURE gethomefolder
	ENDPROC

	PROCEDURE hightlightpreviousselection
		Lparameters lcPanelKey
	ENDPROC

	PROCEDURE loadtree
	ENDPROC

	PROCEDURE nodeadd
	ENDPROC

	PROCEDURE nodeclicked
	ENDPROC

	PROCEDURE setfontsize
	ENDPROC

	PROCEDURE setup
	ENDPROC

ENDDEFINE

DEFINE CLASS panelbaseclass AS cntfinder OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdBaseClasses" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdBaseClasses.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdBaseClasses.Column1.Text1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*a: abaseclasses[1,0]
	*</DefinedPropArrayMethod>

	Name = "panelbaseclass"
	_memberdata = <VFPData>
		<memberdata name="abaseclasses" display="aBaseClasses"/>
		</VFPData>

	ADD OBJECT 'grdBaseClasses' AS basegrid WITH ;
		AllowCellSelection = .F., ;
		Anchor = 15, ;
		ColumnCount = 1, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		HeaderHeight = 0, ;
		Height = 170, ;
		HighlightStyle = 0, ;
		Left = 6, ;
		Name = "grdBaseClasses", ;
		RecordMark = .F., ;
		ScrollBars = 2, ;
		Top = 24, ;
		Visible = .T., ;
		Width = 188, ;
		Column1.ControlSource = "BaseClass", ;
		Column1.Name = "Column1", ;
		Column1.Visible = .T., ;
		Column1.Width = 200
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="grid" />

	ADD OBJECT 'grdBaseClasses.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdBaseClasses.Column1.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "BaseClass", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		Caption = "Base Class", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 10, ;
		Name = "Label1", ;
		Top = 5, ;
		Width = 180
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE setfontsize
		Lparameters tnFontSize
		
		Local lnHeaderHeight
		lnHeaderHeight = This.grdBaseClasses.HeaderHeight
		DoDefault(tnFontSize)
		This.grdBaseClasses.HeaderHeight = lnHeaderHeight
		
	ENDPROC

	PROCEDURE setup
		Lparameters lcPanelKey, loPanelProperties, loSearchEngine
		
		Local lnSelect
		lnSelect = Select()
		Select crsr_BaseClasses
		
		If Empty(lcPanelKey)
			Goto Top
		Else
			Locate For Lower(Trim(BaseClass)) == Lower(Trim(lcPanelKey))
			If Not Found()
				Goto Top
			Endif
		Endif && Empty(lcPanelKey)
		Select(lnSelect)
		
	ENDPROC

	PROCEDURE grdBaseClasses.AfterRowColChange
		Lparameters nColIndex
		
		Local lcFilter
		If '--' $ BaseClass
			lcFilter = ''
		Else
			lcFilter = 'Lower(Trim(BaseClass)) == "' + Lower(Trim(BaseClass)) + '"'
		Endif
		
		Thisform.SetPanelFilter(lcFilter, BaseClass)
		
	ENDPROC

	PROCEDURE grdBaseClasses.Init
		Local lnRow, lnSelect
		
		lnSelect = Select()
		
		Create Cursor crsr_BaseClasses(BaseClass C(20))
		Insert Into crsr_BaseClasses(BaseClass) Values('-- All --')
		Insert Into crsr_BaseClasses(BaseClass)			;
			Select  Distinct BaseClass					;
				From crsr_SearchResults					;
				Where Not Empty(BaseClass)
		
		Scan For Recno() > 1
			If Indexseek(Upper(Padr(BaseClass, 20)), .T., 'BaseClasses', 'BaseClass')
				Replace BaseClass With BaseClasses.BaseClass
			Endif
		Endscan
		
		Goto Top
		This.RecordSourceType = 1
		
		This.RecordSource	  = 'crsr_BaseClasses'
		Select(lnSelect)
		
	ENDPROC

	PROCEDURE grdBaseClasses.Resize
		This.Column1.Width = This.Width
		
	ENDPROC

	PROCEDURE grdBaseClasses.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS paneldescendants AS cntfinder OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oTree" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: loadtree
		*m: nodeclicked
		*p: lsubdirectories
		*p: opanelproperties
	*</DefinedPropArrayMethod>

	lsubdirectories = .T.
	Name = "paneldescendants"
	opanelproperties = .NULL.
	_memberdata = <VFPData>
		<memberdata name="lsubdirectories" display="lSubDirectories"/>
		<memberdata name="nodeclicked" display="NodeClicked"/>
		<memberdata name="opanelproperties" display="oPanelProperties"/>
		<memberdata name="loadtree" display="LoadTree"/>
		</VFPData>

	ADD OBJECT 'oTree' AS olecontrol WITH ;
		Anchor = 15, ;
		Height = 187, ;
		Left = 6, ;
		Name = "oTree", ;
		Top = 6, ;
		Width = 188
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAKCW1bMC284BAwAAAMABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAK4AAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAA/vkEHHiYXREbFqAMDwKDYoIUM0EggAAABuEwAAVBMAALE8wWoBAAYAIgAAADkAAAAJAQAACAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFACi8UzcHAAAAAAAAAAUAAIBg6RgAAQAAAFwAH97svQEABQCo6RgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJEAKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAEAAAAGAAAAU3R5bGUACQAAAEkKAAAABgAAAAwAAABCb3JkZXJTdHlsZQAJAAAASQoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />
	
	PROCEDURE loadtree
		Lparameters lcPanelKey, loPanelProperties
		
		Local lcCaption, lcName, lcParent, lcPrefix, lcSortKey, loHomeNode, loNode
		Select crsr_Results
		
		Scan
			lcSortKey = Trim(sortkey)
			Do Case
				Case Empty(lcSortKey)
					loHomeNode			= This.oTree.Nodes.Add(, 0, 'Root:', Trim(Class))
					loHomeNode.Expanded	= .T.
					loHomeNode.Tag		= ''
					lcPrefix			= 'Root:'
				Case Right(lcSortKey, 1) = '\'
					loHomeNode			= This.oTree.Nodes.Add(, 0, lcSortKey, Trim(Class))
					loHomeNode.Expanded	= .T.
					loHomeNode.Tag		= lcSortKey
					lcPrefix			= ''
				Otherwise
					lcName			= lcPrefix + Trim(sortkey)
					lcParent		= Left(lcName, Len(lcName) - 4)
					lcCaption		= Trim(Class)
					loNode			= This.oTree.Nodes.Add(lcParent, 4, lcName, lcCaption)
					loNode.Expanded	= .T.
					loNode.Tag		= Trim(sortkey)
			Endcase
		Endscan && Scan
		
		loHomeNode = This.oTree.Nodes(1)
		loHomeNode.EnsureVisible()
		loHomeNode.Selected	 = .T.
		This.oTree.Font.Size = 8
		
		
	ENDPROC

	PROCEDURE nodeclicked
		Lparameters loNode
		
		Local lcFilter, lcSortKey
		lcSortKey = Trim(loNode.Tag)
		If Empty(lcSortKey)
			lcFilter = ''
		Else
			lcFilter = Textmerge('Left(SortKey, <<Len(lcSortKey)>>) = "<<lcSortKey>>"')
		EndIf
		
		Thisform.SetPanelFilter(lcFilter)
		
	ENDPROC

	PROCEDURE setfontsize
		Lparameters tnFontSize
		
		DoDefault(tnFontSize)
		This.otree.Font.Size = tnFontSize
		
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		*** ActiveX Control Event ***
		Lparameters Node
		
		This.Parent.NodeClicked(Node)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelfiletype AS cntfinder OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFileTypes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFileTypes.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="grdFileTypes.Column1.Text1" UniqueID="" Timestamp="" />

	Name = "panelfiletype"

	ADD OBJECT 'grdFileTypes' AS basegrid WITH ;
		AllowCellSelection = .F., ;
		Anchor = 15, ;
		ColumnCount = 1, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		HeaderHeight = 0, ;
		Height = 170, ;
		HighlightStyle = 0, ;
		Left = 6, ;
		Name = "grdFileTypes", ;
		RecordMark = .F., ;
		ScrollBars = 2, ;
		Top = 24, ;
		Visible = .T., ;
		Width = 188, ;
		Column1.ControlSource = "crsr_SearchResults.BaseClass", ;
		Column1.Name = "Column1", ;
		Column1.Visible = .T., ;
		Column1.Width = 200
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="grid" />

	ADD OBJECT 'grdFileTypes.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'grdFileTypes.Column1.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		Caption = "File Type", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 10, ;
		Name = "Label1", ;
		Top = 5, ;
		Width = 180
		*< END OBJECT: BaseClass="label" />
	
	PROCEDURE setfontsize
		Lparameters tnFontSize
		
		Local lnHeaderHeight
		lnHeaderHeight = This.grdFileTypes.HeaderHeight
		DoDefault(tnFontSize)
		This.grdFileTypes.HeaderHeight = lnHeaderHeight
		
	ENDPROC

	PROCEDURE setup
		Lparameters lcPanelKey, loPanelProperties, loSearchEngine
		
		Local lnSelect
		lnSelect = Select()
		Select crsr_FileTypes
		
		If Empty(lcPanelKey)
			Goto Top
		Else
			Locate For Lower(Trim(FileType)) == Lower(Trim(lcPanelKey))
			If Not Found()
				Goto Top
			Endif
		Endif && Empty(lcPanelKey)
		Select(lnSelect)
		
	ENDPROC

	PROCEDURE grdFileTypes.AfterRowColChange
		Lparameters nColIndex
		
		Local lcFilter
		Do Case
			Case '-- All' $ FileType
				lcFilter = ''
			Case '-- Other' $ FileType
				lcFilter = '(Empty(JustExt(FileName)) or Not Lower(Padr(JustExt(FileName),5)) in (Select Lower(Extension) from FileTypes))'
			Otherwise 
				lcFilter = 'Lower(Padr(JustExt(FileName),5)) in (Select Lower(Extension) from FileTypes where FileType = [' + FileType + ']) and not Empty(JustExt(FileName))'
		Endcase
		
		Thisform.SetPanelFilter(lcFilter, FileType)
		
	ENDPROC

	PROCEDURE grdFileTypes.Init
		Local lnRow, lnSelect
		
		lnSelect = Select()
		
		Create Cursor crsr_FileTypes(FileType C(20))
		Insert Into crsr_FileTypes(FileType) Values('-- All --')
		
		If Reccount('crsr_SearchResults') # 0
		
			Insert Into crsr_FileTypes(FileType)		;
				Select  Distinct FileType				;
					From FileTypes			;
						Join crsr_SearchResults			;
							On Lower(Extension) == Lower(Trim(Padr(Justext(FileName), 5)))
			Insert Into crsr_FileTypes(FileType) Values('-- Others --')
		
			Goto Top
		Endif && Reccount('crsr_SearchResults') # 0
		
		This.RecordSourceType = 1
		
		This.RecordSource	  = 'crsr_FileTypes'
		Select(lnSelect)
		
	ENDPROC

	PROCEDURE grdFileTypes.Resize
		This.Column1.Width = This.Width
		
	ENDPROC

	PROCEDURE grdFileTypes.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelfolders AS cntfinder OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="chkSubDirectories" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: gethomefolder
		*m: nodeadd
		*m: nodeclicked
		*p: lsubdirectories
		*p: opanelproperties
	*</DefinedPropArrayMethod>

	lsubdirectories = .T.
	Name = "panelfolders"
	opanelproperties = .NULL.
	_memberdata = <VFPData>
		<memberdata name="gethomefolder" display="GetHomeFolder"/>
		<memberdata name="lsubdirectories" display="lSubDirectories"/>
		<memberdata name="nodeclicked" display="NodeClicked"/>
		<memberdata name="nodeadd" display="NodeAdd"/>
		<memberdata name="opanelproperties" display="oPanelProperties"/>
		</VFPData>

	ADD OBJECT 'chkSubDirectories' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 6, ;
		AutoSize = .T., ;
		Caption = "Include sub-directories", ;
		ControlSource = "This.Parent.lSubDirectories", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 12, ;
		Name = "chkSubDirectories", ;
		Top = 180, ;
		Width = 128
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		Caption = "Folders", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 10, ;
		Name = "Label1", ;
		Top = 5, ;
		Width = 180
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'oTree' AS olecontrol WITH ;
		Anchor = 15, ;
		Height = 154, ;
		Left = 6, ;
		Name = "oTree", ;
		Top = 24, ;
		Width = 188
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADANv7BgB9ABAwAAAMABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAK4AAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAA/vkEHHiYXREbFqAMDwKDYoIUM0EggAAABuEwAA6w8AALE8wWoBAAYAIgAAADkAAAAJAQAACAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFAHhGKgkHAAAAAAAAAAUAAIBg6RgAAQAAAFwAH97svQEABQCo6RgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJEAKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAEAAAAGAAAAU3R5bGUACQAAAEkKAAAABgAAAAwAAABCb3JkZXJTdHlsZQAJAAAASQoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />
	
	PROCEDURE gethomefolder
		Lparameters lcFolder
		
		Local laFolders[1], lcHomeFolder
		lcHomeFolder = Lower(Trim(lcFolder))
		Do While .T.
			Select  *																	;
				From crsr_Folders														;
				Where Left(Folder, Len(lcHomeFolder) + 1) == lcHomeFolder + '\'			;
				Into Array laFolders
			Do Case
				Case _Tally = Reccount()
					Return lcHomeFolder
				Case Len(lcHomeFolder) > 3
					lcHomeFolder = Justpath(lcHomeFolder)
					If Len(lcHomeFolder) = 3
						lcHomeFolder = Left(lcHomeFolder, 2)
					Endif
				Otherwise
					Return ''
			Endcase
		Enddo && While Len(lcHomeFolders) > 2
		
		Return lcHomeFolder
	ENDPROC

	PROCEDURE nodeadd
		Lparameters lcFolder, lcFullFolder
		
		Local laFiles[1], lcCaption, lcParent, loException, loNode
		If 1 = Adir(laFiles, lcFullFolder, 'D', 1)
			lcCaption = laFiles[1, 1]
		Else
			lcCaption = Justfname(lcFolder)
		EndIf
		
		If ':' $ lcCaption
			lcCaption = Stuff(lcCaption, 1, 1, Upper(Left(lcCaption,1))) 
		EndIf 
		
		lcParent = Justpath(lcFolder)
		Try
			loNode			= This.oTree.Nodes.Add(lcParent, 4, lcFolder, lcCaption)
			loNode.Expanded	= .T.
			loNode.Tag		= lcFullFolder
		Catch to loException
			loNode = This.NodeAdd(JustPath(lcFolder), JustPath(lcFullFolder))	 
			loNode = This.NodeAdd(lcFolder, lcFullFolder)	 
		Endtry
		
		Return loNode
	ENDPROC

	PROCEDURE nodeclicked
		Lparameters loNode
		
		Local lcFilter, lcFolder, lcKey, lcTag, lnLen
		lcTag = loNode.Tag
		If Empty(lcTag)
			lcFilter = ''
			lcKey	 = ''
		Else
			If This.oPanelProperties.lSubDirectories 
				lcFolder = Trim(lcTag)
			Else
				lcFolder = Padr(lcTag, 120)
			EndIf 
			lnLen	 = Len(lcFolder)
			lcFilter = Textmerge('Lower(Left(Folder, << lnLen >>)) == "<<Lower(lcFolder)>>"')
			lcKey	 = loNode.Key
		Endif
		
		Thisform.SetPanelFilter(lcFilter, lcKey)
		
	ENDPROC

	PROCEDURE setfontsize
		Lparameters tnFontSize
		
		DoDefault(tnFontSize)
		This.otree.Font.Size = tnFontSize
		
		
	ENDPROC

	PROCEDURE setup
		Lparameters lcPanelKey, loPanelProperties, loSearchEngine
		
		Local laFiles[1], laFolders[1], lcCaption, lcFolder, lcFullFolder, lcHomeFolder, lcParent, lnSelect
		Local loException, loHomeNode, loNode
		
		This.oPanelProperties				 = loPanelProperties
		This.chkSubDirectories.ControlSource = 'Thisform.oPanelProperties.lSubDirectories'
		
		If Reccount('crsr_SearchResults') = 0
			Return
		Endif
		
		lnSelect = Select()
		Select 0
		Select  Distinct Lower(Folder)    As  Folder,			;
				Folder                    As  FullFolder		;
			From crsr_SearchResults								;
			Into Cursor crsr_Folders Readwrite
		
		lcHomeFolder = This.GetHomeFolder(Folder)
		If Empty(lcHomeFolder)
			Replace All Folder With 'Root:\' + Folder
			lcCaption	   = 'Computer'
		
			loHomeNode	   = This.oTree.Nodes.Add(, 0, 'Root:', lcCaption)
			loHomeNode.Tag = lcHomeFolder
		Else
			Replace All Folder With Strtran(Folder, lcHomeFolder, 'Root:')
			lcCaption	   = lcHomeFolder
		
			loHomeNode	   = This.oTree.Nodes.Add(, 0, 'Computer:', 'Computer')
			loHomeNode.Tag = ''
		
			loNode		   = This.oTree.Nodes.Add(, 0, 'Root:', lcCaption)
			loNode.Tag	   = lcHomeFolder
		Endif
		
		Scan
			lcFolder	 = Trim(Folder)
			lcFullFolder = FullFolder
			loNode		 = This.NodeAdd(lcFolder, lcFullFolder)
		Endscan
		
		If Vartype(loNode) # 'L'
			loNode.EnsureVisible()
		Endif
		loHomeNode.EnsureVisible()
		loHomeNode.Selected = .T.
		
		If Not Empty(lcPanelKey)
			Try
				loNode			= This.oTree.Nodes[lcPanelKey]
				loNode.Selected	= .T.
				loNode.EnsureVisible()
			Catch To loException
			Endtry
		Endif
		
		This.oTree.Font.Size = 8
		Select(lnSelect)
		
		
	ENDPROC

	PROCEDURE chkSubDirectories.Valid
		Local loNode
		loNode = This.Parent.oTree.SelectedItem()
		This.Parent.NodeClicked(loNode)
	ENDPROC

	PROCEDURE oTree.NodeClick
		*** ActiveX Control Event ***
		Lparameters Node
		
		This.Parent.NodeClicked(Node)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS panelhierarchy AS cntfinder OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="container" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Label1" UniqueID="" Timestamp="" />

	*<DefinedPropArrayMethod>
		*m: loadtree
		*m: nodeclicked
		*p: lsubdirectories
		*p: opanelproperties
	*</DefinedPropArrayMethod>

	lsubdirectories = .T.
	Name = "panelhierarchy"
	opanelproperties = .NULL.
	_memberdata = <VFPData>
		<memberdata name="lsubdirectories" display="lSubDirectories"/>
		<memberdata name="nodeclicked" display="NodeClicked"/>
		<memberdata name="opanelproperties" display="oPanelProperties"/>
		<memberdata name="loadtree" display="LoadTree"/>
		</VFPData>

	ADD OBJECT 'Label1' AS label WITH ;
		Alignment = 2, ;
		Anchor = 10, ;
		Caption = "Class Hierarchy", ;
		FontBold = .T., ;
		Height = 17, ;
		Left = 10, ;
		Name = "Label1", ;
		Top = 5, ;
		Width = 180
		*< END OBJECT: BaseClass="label" />

	ADD OBJECT 'oTree' AS olecontrol WITH ;
		Anchor = 15, ;
		Height = 170, ;
		Left = 6, ;
		Name = "oTree", ;
		Top = 24, ;
		Width = 188
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAACBztggqB9ABAwAAAMABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAK4AAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAA/vkEHHiYXREbFqAMDwKDYoIUM0EggAAABuEwAAkhEAALE8wWoBAAYAIgAAADgAAAAJAQAACAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFALBC3gIHAAAAAAAAAAUAAIBg6RgAAQAAAFwAH97svQEABQCo6RgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJEAKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAAAAAAGAAAAU3R5bGUACQAAAEkKAAAABgAAAAwAAABCb3JkZXJTdHlsZQAJAAAASQoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />
	
	PROCEDURE loadtree
		Lparameters lcPanelKey, loPanelProperties
		
		Local laResults[1], lcCaption, lcName, lcParent, llNonBaseClasses, llNonBaseClassesOwnNode
		Local loHomeNode, loNode
		
		Select crsr_RootClasses
		If Reccount() = 0
			Return
		Endif
		
		llNonBaseClassesOwnNode	= '?'
		
		loHomeNode			= This.oTree.Nodes.Add(, 0, 'Root', 'All classes')
		loHomeNode.Tag		= ''
		loHomeNode.Expanded	= .T.
		
		Scan
			Do Case
		
				Case Base = 'A'
					loNode	   = This.oTree.Nodes.Add('Root', 4, 'R' + Trim(Sortkey), Trim(Parent))
		
				Case Recno() = 1
					loNode					= This.oTree.Nodes.Add('Root', 4, 'R' + Trim(Sortkey), Trim(Parent))
					llNonBaseClassesOwnNode	= 'N'
		
				Case llNonBaseClassesOwnNode = 'N'
					loNode	   = This.oTree.Nodes.Add('Root', 4, 'R' + Trim(Sortkey), Trim(Parent))
		
				Case llNonBaseClassesOwnNode = '?'
					loNode = This.oTree.Nodes.Add('Root', 4, 'NonBase', 'Non-Base Classes')
					loNode.Tag = 'Z'
					loNode = This.oTree.Nodes.Add('NonBase', 4, 'R' + Trim(Sortkey), Trim(Parent))
					llNonBaseClassesOwnNode	= 'Y'
		
				Otherwise
					loNode			= This.oTree.Nodes.Add('NonBase', 4, 'R' + Trim(Sortkey), Trim(Parent))
		
			Endcase
			loNode.Tag = Trim(Sortkey)
		Endscan
		
		Select  *							;
			From crsr_SearchResults			;
			Order By Sortkey				;
			Into Cursor crsr_Sorted Readwrite
		
		Scan
			lcName			= 'R' + Trim(Sortkey)
			lcParent		= Left(lcName, Len(lcName) - 4)
			lcCaption		= Trim(Class)
			loNode			= This.oTree.Nodes.Add(lcParent, 4, lcName, lcCaption)
			loNode.Expanded	= .T.
			loNode.Tag		= Trim(Sortkey)
		Endscan
		
		loHomeNode.EnsureVisible()
		loHomeNode.Selected	 = .T.
		This.oTree.Font.Size = 8
		
		
	ENDPROC

	PROCEDURE nodeclicked
		Lparameters loNode
		
		Local lcFilter, lcSortKey
		lcSortKey = Trim(loNode.Tag)
		If Empty(lcSortKey)
			lcFilter = ''
		Else
			lcFilter = Textmerge('Left(SortKey, <<Len(lcSortKey)>>) = "<<lcSortKey>>"')
		Endif
		Thisform.SetPanelFilter(lcFilter)
		
	ENDPROC

	PROCEDURE setfontsize
		Lparameters tnFontSize
		
		DoDefault(tnFontSize)
		This.otree.Font.Size = tnFontSize
		
		
	ENDPROC

	PROCEDURE setup
		Lparameters lcPanelKey, loPanelProperties, loSearchEngine
		
		Local lnSelect
		lnSelect = Select()
		
		loSearchEngine.CreateHierarchy ('crsr_SearchResults')
		This.LoadTree()
		
		Select(lnSelect)
		
	ENDPROC

	PROCEDURE oTree.NodeClick
		*** ActiveX Control Event ***
		Lparameters Node
		
		This.Parent.NodeClicked(Node)
		
	ENDPROC

ENDDEFINE

DEFINE CLASS pgfclasses AS pgffilterpanels OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Pagefilterpanel1.grdBaseClasses" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pagefilterpanel1.grdBaseClasses.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pagefilterpanel1.grdBaseClasses.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pagefilterpanel2.oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pagefilterpanel3.oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pagefilterpanel3.chkSubDirectories" UniqueID="" Timestamp="" />

	#INCLUDE "..\common\common.h"
	*<DefinedPropArrayMethod>
		*m: gethomefolder
		*m: hightlightpreviousselection
		*m: nodeclicked
		*m: setfontsize
		*m: setup
		*p: cpanelkey
		*p: nfontsize
		*p: opanelproperties
		*p: osearchengine
	*</DefinedPropArrayMethod>

	ActivePage = 1
	cpanelkey = 
	ErasePage = .T.
	Name = "pgfclasses"
	nfontsize = 0
	opanelproperties = 
	osearchengine = 
	PageCount = 3
	_memberdata = <VFPData>
		<memberdata name="activepage" display="ActivePage"/>
		<memberdata name="activepage_assign" display="ActivePage_Assign"/>
		<memberdata name="setup" display="Setup"/>
		<memberdata name="cpanelkey" display="cPanelKey"/>
		<memberdata name="opanelproperties" display="oPanelProperties"/>
		<memberdata name="osearchengine" display="oSearchEngine"/>
		<memberdata name="nfontsize" display="nFontSize"/>
		<memberdata name="hightlightpreviousselection" display="HightlightPreviousSelection"/>
		<memberdata name="gethomefolder" display="GetHomeFolder"/>
		<memberdata name="nodeclicked" display="NodeClicked"/>
		<memberdata name="setfontsize" display="SetFontSize"/>
		</VFPData>
	Pagefilterpanel1.Caption = "Base Classes"
	Pagefilterpanel1.Name = "Pagefilterpanel1"
	Pagefilterpanel2.Caption = "Hierarchy"
	Pagefilterpanel2.Name = "Pagefilterpanel2"
	Pagefilterpanel3.Caption = "Folders"
	Pagefilterpanel3.Name = "Pagefilterpanel3"

	ADD OBJECT 'Pagefilterpanel1.grdBaseClasses' AS basegrid WITH ;
		AllowCellSelection = .F., ;
		Anchor = 15, ;
		ColumnCount = 1, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		HeaderHeight = 0, ;
		Height = 130, ;
		HighlightStyle = 0, ;
		Left = 6, ;
		Name = "grdBaseClasses", ;
		RecordMark = .F., ;
		ScrollBars = 2, ;
		Top = 6, ;
		Visible = .T., ;
		Width = 223, ;
		Column1.ControlSource = "BaseClass", ;
		Column1.Name = "Column1", ;
		Column1.Visible = .T., ;
		Column1.Width = 200
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="grid" />

	ADD OBJECT 'Pagefilterpanel1.grdBaseClasses.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Pagefilterpanel1.grdBaseClasses.Column1.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "BaseClass", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Pagefilterpanel2.oTree' AS olecontrol WITH ;
		Anchor = 15, ;
		Height = 130, ;
		Left = 6, ;
		Name = "oTree", ;
		Top = 6, ;
		Width = 226
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEBVnJvqB9ABAwAAAMABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAK4AAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAA/vkEHHiYXREbFqAMDwKDYoIUM0EggAAABcFwAAcA0AALE8wWoBAAYAIgAAADgAAAAJAQAACAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFAODoGAAHAAAAAAAAAAUAAIDg6BgAAQAAAFwAH97svQEABQAo6RgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJEAKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAAAAAAGAAAAU3R5bGUACQAAAEkKAAAABgAAAAwAAABCb3JkZXJTdHlsZQAJAAAASQoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />

	ADD OBJECT 'Pagefilterpanel3.chkSubDirectories' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 6, ;
		AutoSize = .T., ;
		Caption = "Include sub-directories", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 17, ;
		Name = "chkSubDirectories", ;
		Top = 122, ;
		Width = 128
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Pagefilterpanel3.oTree' AS olecontrol WITH ;
		Anchor = 15, ;
		Height = 114, ;
		Left = 6, ;
		Name = "oTree", ;
		Top = 6, ;
		Width = 226
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGCjnJvqB9ABAwAAAMABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAK4AAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAA/vkEHHiYXREbFqAMDwKDYoIUM0EggAAABcFwAAyAsAALE8wWoBAAYAIgAAADgAAAAJAQAACAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFAKzoGAAHAAAAAAAAAAUAAICs6BgAAQAAAFwAH97svQEABQD06BgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJEAKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAAAAAAGAAAAU3R5bGUACQAAAEkKAAAABgAAAAwAAABCb3JkZXJTdHlsZQAJAAAASQoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />
	
	PROCEDURE Destroy
		With This
			.oPanelProperties = Null
			.oSearchEngine	  = Null
		Endwith
		
	ENDPROC

	PROCEDURE gethomefolder
		Lparameters lcFolder
		
		Local laFolders[1], lcHomeFolder
		lcHomeFolder = Lower(Trim(lcFolder))
		Do While .T.
			Select  *																	;
				From crsr_Folders														;
				Where Left(Folder, Len(lcHomeFolder) + 1) == lcHomeFolder + '\'			;
				Into Array laFolders
			Do Case
				Case _Tally = Reccount()
					Return lcHomeFolder
				Case Len(lcHomeFolder) > 3
					lcHomeFolder = Justpath(lcHomeFolder)
					If Len(lcHomeFolder) = 3
						lcHomeFolder = Left(lcHomeFolder, 2)
					Endif
				Otherwise
					Return ''
			Endcase
		Enddo && While Len(lcHomeFolders) > 2
		
		Return lcHomeFolder
	ENDPROC

	PROCEDURE hightlightpreviousselection
		Lparameters lcPanelKey
		
		This.Pages[This.ActivePage].HightlightPreviousSelection(lcPanelKey)
	ENDPROC

	PROCEDURE nodeclicked
	ENDPROC

	PROCEDURE setfontsize
		Lparameters lnFontSize
		
		This.nFontSize = lnFontSize
		This.Pages[This.ActivePage].SetFontSize()
		
	ENDPROC

	PROCEDURE setup
		Lparameters loPanelProperties, loSearchEngine, lnFontSize
		
		With This
			.oPanelProperties = m.loPanelProperties
			.oSearchEngine	  = m.loSearchEngine
			.nFontSize		  = m.lnFontSize
		Endwith
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.Activate
		Local lcSafety, lnSelect
		
		Thisform.oPanelProperties.nPage = 1
		
		lnSelect = Select()
		
		Select crsr_BaseClasses
		
		lcSafety = Set('Safety')
		Set Safety Off
		Zap
		Set Safety &lcSafety
		
		Insert Into crsr_BaseClasses(BaseClass) Values('-- All --')
		Insert Into crsr_BaseClasses(BaseClass)			;
			Select  Distinct BaseClass					;
				From crsr_SearchResults					;
				Where Not Empty(BaseClass)
		
		Scan For Recno() > 1
			If Indexseek(Upper(Padr(BaseClass, 20)), .T., 'BaseClasses', 'BaseClass')
				Replace BaseClass With BaseClasses.BaseClass
			Endif
		Endscan
		
		Goto Top
		
		Select(m.lnSelect)
		
		This.SetFontSize()
		This.grdBaseClasses.SetFocus()
	ENDPROC

	PROCEDURE Pagefilterpanel1.grdBaseClasses.AfterRowColChange
		Lparameters nColIndex
		
		Local lcFilter
		If '--' $ BaseClass
			lcFilter = ''
		Else
			lcFilter = 'Lower(Trim(BaseClass)) == "' + Lower(Trim(BaseClass)) + '"'
		Endif
		
		Thisform.SetPanelFilter(lcFilter, BaseClass)
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.grdBaseClasses.Init
		Local lnRow, lnSelect
		
		Use in (Select ('crsr_BaseClasses')) && Close 'BaseClasses'
		
		lnSelect = Select()
		Create Cursor crsr_BaseClasses(BaseClass C(20))
		Select(lnSelect)
		
		This.RecordSourceType = 1
		This.RecordSource	  = 'crsr_BaseClasses'
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.grdBaseClasses.Resize
		This.Column1.Width = This.Width
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.grdBaseClasses.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.hightlightpreviousselection
		Lparameters lcPanelKey
		
		lnSelect = Select()
		Select crsr_BaseClasses
		
		If Empty(lcPanelKey)
			Goto Top
		Else
			Locate For Lower(Trim(BaseClass)) == Lower(Trim(lcPanelKey))
			If Not Found()
				Goto Top
			Endif
		Endif && Empty(lcPanelKey)
		Select(lnSelect)
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.setfontsize
		Local lnHeaderHeight
		lnHeaderHeight = This.grdBaseClasses.HeaderHeight
		DoDefault(This.parent.nFontSize)
		This.grdBaseClasses.HeaderHeight = lnHeaderHeight
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.setup
		Lparameters lcPanelKey, loPanelProperties, loSearchEngine
		
		Local lnSelect
		lnSelect = Select()
		Select(m.lnSelect)
		
		Select crsr_BaseClasses
		
		If Empty(m.lcPanelKey)
			Goto Top
		Else
			Locate For Lower(Trim(BaseClass)) == Lower(Trim(m.lcPanelKey))
			If Not Found()
				Goto Top
			Endif
		Endif && Empty(lcPanelKey)
		
		Select(m.lnSelect)
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.Activate
		Local lnSelect
		
		Thisform.oPanelProperties.nPage = 2
		
		If This.oTree.Nodes.Count = 0
			lnSelect = Select()
		
			This.Parent.oSearchEngine.CreateHierarchy ('crsr_SearchResults')
			This.LoadTree()
		
			Select(m.lnSelect)
		Endif
		
		This.SetFontSize()
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.hightlightpreviousselection
		Lparameters lcPanelKey
		
		Local loSelection
		If Empty(m.lcPanelKey)
			Goto Top
		Else
			Try 
				loSelection				= This.oTree.Nodes[m.lcPanelKey]
				This.oTree.SelectedItem	= m.loSelection
				m.loSelection.EnsureVisible()
			Catch to loException
				
			EndTry
		Endif && Empty(lcPanelKey)
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.loadtree
		Lparameters lcPanelKey, loPanelProperties
		
		Local laResults[1], lcCaption, lcName, lcParent, llNonBaseClasses, llNonBaseClassesOwnNode
		Local loHomeNode, loNode
		
		Select crsr_RootClasses
		If Reccount() = 0
			Return
		Endif
		
		llNonBaseClassesOwnNode	= '?'
		
		This.oTree.Nodes.Clear()
		
		loHomeNode			= This.oTree.Nodes.Add(, 0, 'Root', 'All classes')
		loHomeNode.Tag		= ''
		loHomeNode.Expanded	= .T.
		
		Scan
			Do Case
		
				Case Base = 'A'
					loNode	   = This.oTree.Nodes.Add('Root', 4, 'R' + Trim(Sortkey), Trim(Parent))
		
				Case Recno() = 1
					loNode					= This.oTree.Nodes.Add('Root', 4, 'R' + Trim(Sortkey), Trim(Parent))
					llNonBaseClassesOwnNode	= 'N'
		
				Case llNonBaseClassesOwnNode = 'N'
					loNode	   = This.oTree.Nodes.Add('Root', 4, 'R' + Trim(Sortkey), Trim(Parent))
		
				Case llNonBaseClassesOwnNode = '?'
					loNode = This.oTree.Nodes.Add('Root', 4, 'NonBase', 'Non-Base Classes')
					loNode.Tag = 'Z'
					loNode = This.oTree.Nodes.Add('NonBase', 4, 'R' + Trim(Sortkey), Trim(Parent))
					llNonBaseClassesOwnNode	= 'Y'
		
				Otherwise
					loNode			= This.oTree.Nodes.Add('NonBase', 4, 'R' + Trim(Sortkey), Trim(Parent))
		
			Endcase
			loNode.Tag = Trim(Sortkey)
		Endscan
		
		Select  *							;
			From crsr_SearchResults			;
			Order By Sortkey, Class				;
			Into Cursor crsr_Sorted Readwrite
		
		Scan
			lcName			= 'R' + Trim(Sortkey)
			lcParent		= Left(lcName, Len(lcName) - 4)
			lcCaption		= Trim(Class)
			loNode			= This.oTree.Nodes.Add(lcParent, 4, lcName, lcCaption)
			loNode.Expanded	= .T.
			loNode.Tag		= Trim(Sortkey)
		Endscan
		
		loHomeNode.EnsureVisible()
		loHomeNode.Selected	 = .T.
		This.oTree.Font.Size = 8
		
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.nodeclicked
		Lparameters loNode
		
		Local lcFilter, lcPanelKey, lcSortKey
		lcPanelKey = m.loNode.Key
		
		lcSortKey = Trim(m.loNode.Tag)
		If Empty(m.lcSortKey)
			lcFilter = ''
		Else
			lcFilter = Textmerge('Left(SortKey, <<Len(lcSortKey)>>) = "<<lcSortKey>>"')
		Endif
		Thisform.SetPanelFilter(m.lcFilter, m.lcPanelKey)
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.oTree.NodeClick
		*** ActiveX Control Event ***
		Lparameters Node
		
		This.Parent.NodeClicked(Node)
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.setfontsize
		Local lnFontSize
		lnFontSize = This.Parent.nFontSize
		DoDefault(m.lnFontSize)
		This.oTree.Font.Size = m.lnFontSize
		
		
	ENDPROC

	PROCEDURE Pagefilterpanel3.Activate
		Local lnSelect
		
		Thisform.oPanelProperties.nPage = 3
		
		If This.oTree.Nodes.Count = 0
			lnSelect = Select()
		
			This.Parent.oSearchEngine.CreateHierarchy ('crsr_SearchResults')
			This.LoadTree()
		
			Select(m.lnSelect)
		Endif
		
		This.SetFontSize()
		
	ENDPROC

	PROCEDURE Pagefilterpanel3.chkSubDirectories.Valid
		Local loNode
		
		loNode = This.Parent.oTree.SelectedItem()
		This.Parent.NodeClicked(loNode)
	ENDPROC

	PROCEDURE Pagefilterpanel3.hightlightpreviousselection
		Lparameters lcPanelKey
		
		Local loSelection
		If Empty(m.lcPanelKey)
			Goto Top
		Else
			Try 
				loSelection				= This.oTree.Nodes[m.lcPanelKey]
				This.oTree.SelectedItem	= m.loSelection
				m.loSelection.EnsureVisible()
			Catch to loException
				
			EndTry
		Endif && Empty(lcPanelKey)
		
	ENDPROC

	PROCEDURE Pagefilterpanel3.loadtree
		This.chkSubDirectories.ControlSource = 'Thisform.oPanelProperties.lSubDirectories'
		
		If Reccount('crsr_SearchResults') = 0
			Return
		Endif
		
		lnSelect = Select()
		Select 0
		Select  Distinct Lower(Folder)    As  Folder,			;
				Folder                    As  FullFolder		;
			From crsr_SearchResults								;
			Into Cursor crsr_Folders Readwrite
		
		lcHomeFolder = This.Parent.GetHomeFolder(Folder)
		If Empty(lcHomeFolder)
			Replace All Folder With 'Root:\' + Folder
			lcCaption	   = 'Computer'
		
			loHomeNode	   = This.oTree.Nodes.Add(, 0, 'Root:', lcCaption)
			loHomeNode.Tag = lcHomeFolder
		Else
			Replace All Folder With Strtran(Folder, lcHomeFolder, 'Root:')
			lcCaption	   = lcHomeFolder
		
			loHomeNode	   = This.oTree.Nodes.Add(, 0, 'Computer:', 'Computer')
			loHomeNode.Tag = ''
		
			loNode		   = This.oTree.Nodes.Add(, 0, 'Root:', lcCaption)
			loNode.Tag	   = lcHomeFolder
		Endif
		
		Scan
			lcFolder	 = Trim(Folder)
			lcFullFolder = FullFolder
			loNode		 = This.NodeAdd(lcFolder, lcFullFolder)
		Endscan
		
		If Vartype(loNode) # 'L'
			loNode.EnsureVisible()
		Endif
		loHomeNode.EnsureVisible()
		loHomeNode.Selected = .T.
		This.oTree.Font.Size = 8
		Select(lnSelect)
		
	ENDPROC

	PROCEDURE Pagefilterpanel3.nodeadd
		Lparameters lcFolder, lcFullFolder
		
		Local laFiles[1], lcCaption, lcParent, loException, loNode
		If 1 = Adir(laFiles, lcFullFolder, 'D', 1)
			lcCaption = laFiles[1, 1]
		Else
			lcCaption = Justfname(lcFolder)
		EndIf
		
		If ':' $ lcCaption
			lcCaption = Stuff(lcCaption, 1, 1, Upper(Left(lcCaption,1))) 
		EndIf 
		
		lcParent = Justpath(lcFolder)
		Try
			loNode			= This.oTree.Nodes.Add(lcParent, 4, lcFolder, lcCaption)
			loNode.Expanded	= .T.
			loNode.Tag		= lcFullFolder
		Catch to loException
			loNode = This.NodeAdd(JustPath(lcFolder), JustPath(lcFullFolder))	 
			loNode = This.NodeAdd(lcFolder, lcFullFolder)	 
		Endtry
		
		Return loNode
	ENDPROC

	PROCEDURE Pagefilterpanel3.nodeclicked
		*** ActiveX Control Event ***
		Lparameters loNode
		
		Local lcFilter, lcFolder, lcKey, lcTag, lnLen
		lcTag = loNode.Tag
		If Empty(lcTag)
			lcFilter = ''
			lcKey	 = ''
		Else
			If Thisform.oPanelProperties.lSubDirectories 
				lcFolder = Trim(lcTag)
			Else
				lcFolder = Padr(lcTag, 120)
			EndIf 
			lnLen	 = Len(lcFolder)
			lcFilter = Textmerge('Lower(Left(Folder, << lnLen >>)) == "<<Lower(lcFolder)>>"')
			lcKey	 = loNode.Key
		Endif
		
		Thisform.SetPanelFilter(lcFilter, lcKey)
		
	ENDPROC

	PROCEDURE Pagefilterpanel3.oTree.NodeClick
		*** ActiveX Control Event ***
		Lparameters Node
		
		This.Parent.NodeClicked(Node)
		
	ENDPROC

	PROCEDURE Pagefilterpanel3.setfontsize
		Local lnFontSize
		lnFontSize = This.Parent.nFontSize
		DoDefault(m.lnFontSize)
		This.oTree.Font.Size = m.lnFontSize
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS pgffiles AS pgffilterpanels OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	*-- OBJECTDATA items order determines ZOrder / El orden de los items OBJECTDATA determina el ZOrder 
	*< OBJECTDATA: ObjPath="Pagefilterpanel1.grdFileTypes" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pagefilterpanel1.grdFileTypes.Column1.Header1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pagefilterpanel1.grdFileTypes.Column1.Text1" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pagefilterpanel2.oTree" UniqueID="" Timestamp="" />
	*< OBJECTDATA: ObjPath="Pagefilterpanel2.chkSubDirectories" UniqueID="" Timestamp="" />

	#INCLUDE "..\common\common.h"
	*<DefinedPropArrayMethod>
		*m: gethomefolder
		*m: hightlightpreviousselection
		*m: nodeclicked
		*m: setfontsize
		*m: setup
		*p: cpanelkey
		*p: nfontsize
		*p: opanelproperties
		*p: osearchengine
	*</DefinedPropArrayMethod>

	ActivePage = 1
	cpanelkey = 
	ErasePage = .T.
	Name = "pgffiles"
	nfontsize = 0
	opanelproperties = 
	osearchengine = 
	PageCount = 2
	_memberdata = <VFPData>
		<memberdata name="activepage" display="ActivePage"/>
		<memberdata name="activepage_assign" display="ActivePage_Assign"/>
		<memberdata name="setup" display="Setup"/>
		<memberdata name="cpanelkey" display="cPanelKey"/>
		<memberdata name="opanelproperties" display="oPanelProperties"/>
		<memberdata name="osearchengine" display="oSearchEngine"/>
		<memberdata name="nfontsize" display="nFontSize"/>
		<memberdata name="hightlightpreviousselection" display="HightlightPreviousSelection"/>
		<memberdata name="gethomefolder" display="GetHomeFolder"/>
		<memberdata name="nodeclicked" display="NodeClicked"/>
		<memberdata name="setfontsize" display="SetFontSize"/>
		</VFPData>
	Pagefilterpanel1.Caption = "File Types"
	Pagefilterpanel1.Name = "Pagefilterpanel1"
	Pagefilterpanel2.Caption = "Folders"
	Pagefilterpanel2.Name = "Pagefilterpanel2"

	ADD OBJECT 'Pagefilterpanel1.grdFileTypes' AS basegrid WITH ;
		AllowCellSelection = .F., ;
		Anchor = 15, ;
		ColumnCount = 1, ;
		DeleteMark = .F., ;
		GridLines = 0, ;
		HeaderHeight = 0, ;
		Height = 130, ;
		HighlightStyle = 0, ;
		Left = 6, ;
		Name = "grdFileTypes", ;
		RecordMark = .F., ;
		ScrollBars = 2, ;
		Top = 6, ;
		Visible = .T., ;
		Width = 223, ;
		Column1.ControlSource = "BaseClass", ;
		Column1.Name = "Column1", ;
		Column1.Visible = .T., ;
		Column1.Width = 200
		*< END OBJECT: ClassLib="thor_proc_finder.vcx" BaseClass="grid" />

	ADD OBJECT 'Pagefilterpanel1.grdFileTypes.Column1.Header1' AS header WITH ;
		Caption = "Header1", ;
		Name = "Header1"
		*< END OBJECT: BaseClass="header" />

	ADD OBJECT 'Pagefilterpanel1.grdFileTypes.Column1.Text1' AS textbox WITH ;
		BackColor = 255,255,255, ;
		BorderStyle = 0, ;
		ControlSource = "BaseClass", ;
		ForeColor = 0,0,0, ;
		Margin = 0, ;
		Name = "Text1"
		*< END OBJECT: BaseClass="textbox" />

	ADD OBJECT 'Pagefilterpanel2.chkSubDirectories' AS checkbox WITH ;
		Alignment = 0, ;
		Anchor = 6, ;
		AutoSize = .T., ;
		Caption = "Include sub-directories", ;
		FontSize = 8, ;
		Height = 16, ;
		Left = 17, ;
		Name = "chkSubDirectories", ;
		Top = 122, ;
		Width = 128
		*< END OBJECT: BaseClass="checkbox" />

	ADD OBJECT 'Pagefilterpanel2.oTree' AS olecontrol WITH ;
		Anchor = 15, ;
		Height = 114, ;
		Left = 6, ;
		Name = "oTree", ;
		Top = 6, ;
		Width = 226
		*< END OBJECT: BaseClass="olecontrol" OLEObject="c:\windows\syswow64\mscomctl.ocx" Value="0M8R4KGxGuEAAAAAAAAAAAAAAAAAAAAAPgADAP7/CQAGAAAAAAAAAAAAAAABAAAAAQAAAAAAAAAAEAAAAgvbwBvAHQAIABFAG4AdAByAHkAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAWAAUA//////////8BAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAADB0MZ3qB9ABAwAAAMABAAAAAAAAAwBPAGwAZQBPAGIAagBlAGMAdABEAGEAdABhAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB4AAgEDAAAAAgAAAP////8AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAagAAAAAAAAADAEEAYwBjAGUAcwBzAE8AYgBqAFMAaQB0AGUARABhAHQAYQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJgACAP///////////////wAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAEAAABcAAAAAAAAAAMAQwBoAGEAbgBnAGUAZABQAHIAbwBwAHMAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcAAIA////////////////AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAwAAAK4AAAAAAAAABAAAAAIAAAD+////BQAAAP7///8GAAAA/vkEHHiYXREbFqAMDwKDYoIUM0EggAAABcFwAAyAsAALE8wWoBAAYAIgAAADgAAAAJAQAACAAAAAEAAAAB782rXAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAAACQAAAA4AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA5MzY4MjY1RS04NUZFLTExZDEtOEJFMy0wMDAwRjg3NTREQTEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAACADgAAAEhpZGVTZWxlY3Rpb24ABQAAAEwAAAAADAAAAEluZGVudGF0aW9uABEAAABODQAAAAcAAAAAAAAAAAAFAODoGAAHAAAAAAAAAAUAAIDg6BgAAQAAAFwAH97svQEABQAo6RgAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAJEAKAAAATGFiZWxFZGl0AAkAAABJCgAAAAEAAAAKAAAATGluZVN0eWxlAAkAAABJCgAAAAAAAAAGAAAAU3R5bGUACQAAAEkKAAAABgAAAAwAAABCb3JkZXJTdHlsZQAJAAAASQoAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==" />
	
	PROCEDURE Destroy
		With This
			.oPanelProperties = Null
			.oSearchEngine	  = Null
		Endwith
		
	ENDPROC

	PROCEDURE gethomefolder
		Lparameters lcFolder
		
		Local laFolders[1], lcHomeFolder
		lcHomeFolder = Lower(Trim(lcFolder))
		Do While .T.
			Select  *																	;
				From crsr_Folders														;
				Where Left(Folder, Len(lcHomeFolder) + 1) == lcHomeFolder + '\'			;
				Into Array laFolders
			Do Case
				Case _Tally = Reccount()
					Return lcHomeFolder
				Case Len(lcHomeFolder) > 3
					lcHomeFolder = Justpath(lcHomeFolder)
					If Len(lcHomeFolder) = 3
						lcHomeFolder = Left(lcHomeFolder, 2)
					Endif
				Otherwise
					Return ''
			Endcase
		Enddo && While Len(lcHomeFolders) > 2
		
		Return lcHomeFolder
	ENDPROC

	PROCEDURE hightlightpreviousselection
		Lparameters lcPanelKey
		
		This.Pages[This.ActivePage].HightlightPreviousSelection(lcPanelKey)
	ENDPROC

	PROCEDURE nodeclicked
	ENDPROC

	PROCEDURE setfontsize
		Lparameters lnFontSize
		
		This.nFontSize = lnFontSize
		This.Pages[This.ActivePage].SetFontSize()
		
	ENDPROC

	PROCEDURE setup
		Lparameters loPanelProperties, loSearchEngine, lnFontSize
		
		With This
			.oPanelProperties = m.loPanelProperties
			.oSearchEngine	  = m.loSearchEngine
			.nFontSize		  = m.lnFontSize
		Endwith
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.Activate
		Local lcSafety, lnSelect
		
		Thisform.oPanelProperties.nPage = 1
		
		lnSelect = Select()
		
		Select crsr_FileTypes
		
		lcSafety = Set('Safety')
		Set Safety Off
		Zap
		Set Safety &lcSafety
		
		Insert Into crsr_FileTypes(FileType) Values('-- All --')
		
		If Reccount('crsr_SearchResults') # 0
		
			Insert Into crsr_FileTypes(FileType)		;
				Select  Distinct FileType				;
					From FileTypes			;
						Join crsr_SearchResults			;
							On Lower(Extension) == Lower(Trim(Padr(Justext(FileName), 5)))
			Insert Into crsr_FileTypes(FileType) Values('-- Others --')
		
			Goto Top
		Endif && Reccount('crsr_SearchResults') # 0
		
		Goto Top
		
		Select(m.lnSelect)
		
		This.SetFontSize()
		This.grdFileTypes.SetFocus()
	ENDPROC

	PROCEDURE Pagefilterpanel1.grdFileTypes.AfterRowColChange
		Lparameters nColIndex
		
		Local lcFilter
		Do Case
			Case '-- All' $ FileType
				lcFilter = ''
			Case '-- Other' $ FileType
				lcFilter = '(Empty(JustExt(FileName)) or Not Lower(Padr(JustExt(FileName),5)) in (Select Lower(Extension) from FileTypes))'
			Otherwise 
				lcFilter = 'Lower(Padr(JustExt(FileName),5)) in (Select Lower(Extension) from FileTypes where FileType = [' + FileType + ']) and not Empty(JustExt(FileName))'
		Endcase
		
		Thisform.SetPanelFilter(lcFilter, FileType)
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.grdFileTypes.Init
		Local lnRow, lnSelect
		
		Use in (Select ('crsr_FileTypes')) && Close 'crsr_FileTypes'
		
		lnSelect = Select()
		Create Cursor crsr_FileTypes(FileType C(20))
		Select(lnSelect)
		
		This.RecordSourceType = 1
		This.RecordSource	  = 'crsr_FileTypes'
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.grdFileTypes.Resize
		This.Column1.Width = This.Width
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.grdFileTypes.When
		*** JRN 2010-04-18 : removed second phrase
		IF NOT MDOWN() && OR (thisform.lBrowser AND NOT thisform.lVCXSCXMode)
			RETURN .F.
		ENDIF
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.hightlightpreviousselection
		Lparameters lcPanelKey
		
		lnSelect = Select()
		Select crsr_FileTypes
		
		If Empty(lcPanelKey)
			Goto Top
		Else
			Locate For Lower(Trim(FileType)) == Lower(Trim(lcPanelKey))
			If Not Found()
				Goto Top
			Endif
		Endif && Empty(lcPanelKey)
		Select(lnSelect)
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.setfontsize
		Local lnHeaderHeight
		lnHeaderHeight = This.grdFileTypes.HeaderHeight
		DoDefault(This.parent.nFontSize)
		This.grdFileTypes.HeaderHeight = lnHeaderHeight
		
	ENDPROC

	PROCEDURE Pagefilterpanel1.setup
		Lparameters lcPanelKey, loPanelProperties, loSearchEngine
		
		Local lnSelect
		lnSelect = Select()
		Select(m.lnSelect)
		
		Select crsr_BaseClasses
		
		If Empty(m.lcPanelKey)
			Goto Top
		Else
			Locate For Lower(Trim(FileType)) == Lower(Trim(m.lcPanelKey))
			If Not Found()
				Goto Top
			Endif
		Endif && Empty(lcPanelKey)
		
		Select(m.lnSelect)
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.Activate
		Local lnSelect
		
		Thisform.oPanelProperties.nPage = 2
		
		If This.oTree.Nodes.Count = 0
			lnSelect = Select()
		
			This.LoadTree()
		
			Select(m.lnSelect)
		Endif
		
		This.SetFontSize()
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.chkSubDirectories.Valid
		Local loNode
		
		loNode = This.Parent.oTree.SelectedItem()
		This.Parent.NodeClicked(loNode)
	ENDPROC

	PROCEDURE Pagefilterpanel2.hightlightpreviousselection
		Lparameters lcPanelKey
		
		Local loSelection
		If Empty(m.lcPanelKey)
			Goto Top
		Else
			Try 
				loSelection				= This.oTree.Nodes[m.lcPanelKey]
				This.oTree.SelectedItem	= m.loSelection
				m.loSelection.EnsureVisible()
			Catch to loException
				
			EndTry
		Endif && Empty(lcPanelKey)
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.loadtree
		This.chkSubDirectories.ControlSource = 'Thisform.oPanelProperties.lSubDirectories'
		
		If Reccount('crsr_SearchResults') = 0
			Return
		Endif
		
		lnSelect = Select()
		Select 0
		Select  Distinct Lower(Folder)    As  Folder,			;
				Folder                    As  FullFolder		;
			From crsr_SearchResults								;
			Into Cursor crsr_Folders Readwrite
		
		lcHomeFolder = This.Parent.GetHomeFolder(Folder)
		If Empty(lcHomeFolder)
			Replace All Folder With 'Root:\' + Folder
			lcCaption	   = 'Computer'
		
			loHomeNode	   = This.oTree.Nodes.Add(, 0, 'Root:', lcCaption)
			loHomeNode.Tag = lcHomeFolder
		Else
			Replace All Folder With Strtran(Folder, lcHomeFolder, 'Root:')
			lcCaption	   = lcHomeFolder
		
			loHomeNode	   = This.oTree.Nodes.Add(, 0, 'Computer:', 'Computer')
			loHomeNode.Tag = ''
		
			loNode		   = This.oTree.Nodes.Add(, 0, 'Root:', lcCaption)
			loNode.Tag	   = lcHomeFolder
		Endif
		
		Scan
			lcFolder	 = Trim(Folder)
			lcFullFolder = FullFolder
			loNode		 = This.NodeAdd(lcFolder, lcFullFolder)
		Endscan
		
		If Vartype(loNode) # 'L'
			loNode.EnsureVisible()
		Endif
		loHomeNode.EnsureVisible()
		loHomeNode.Selected = .T.
		This.oTree.Font.Size = 8
		Select(lnSelect)
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.nodeadd
		Lparameters lcFolder, lcFullFolder
		
		Local laFiles[1], lcCaption, lcParent, loException, loNode
		If 1 = Adir(laFiles, lcFullFolder, 'D', 1)
			lcCaption = laFiles[1, 1]
		Else
			lcCaption = Justfname(lcFolder)
		EndIf
		
		If ':' $ lcCaption
			lcCaption = Stuff(lcCaption, 1, 1, Upper(Left(lcCaption,1))) 
		EndIf 
		
		lcParent = Justpath(lcFolder)
		Try
			loNode			= This.oTree.Nodes.Add(lcParent, 4, lcFolder, lcCaption)
			loNode.Expanded	= .T.
			loNode.Tag		= lcFullFolder
		Catch to loException
			loNode = This.NodeAdd(JustPath(lcFolder), JustPath(lcFullFolder))	 
			loNode = This.NodeAdd(lcFolder, lcFullFolder)	 
		Endtry
		
		Return loNode
	ENDPROC

	PROCEDURE Pagefilterpanel2.nodeclicked
		*** ActiveX Control Event ***
		Lparameters loNode
		
		Local lcFilter, lcFolder, lcKey, lcTag, lnLen
		lcTag = loNode.Tag
		If Empty(lcTag)
			lcFilter = ''
			lcKey	 = ''
		Else
			If Thisform.oPanelProperties.lSubDirectories 
				lcFolder = Trim(lcTag)
			Else
				lcFolder = Padr(lcTag, 120)
			EndIf 
			lnLen	 = Len(lcFolder)
			lcFilter = Textmerge('Lower(Left(Folder, << lnLen >>)) == "<<Lower(lcFolder)>>"')
			lcKey	 = loNode.Key
		Endif
		
		Thisform.SetPanelFilter(lcFilter, lcKey)
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.oTree.NodeClick
		*** ActiveX Control Event ***
		Lparameters Node
		
		This.Parent.NodeClicked(Node)
		
	ENDPROC

	PROCEDURE Pagefilterpanel2.setfontsize
		Local lnFontSize
		lnFontSize = This.Parent.nFontSize
		DoDefault(m.lnFontSize)
		This.oTree.Font.Size = m.lnFontSize
		
		
	ENDPROC

ENDDEFINE

DEFINE CLASS pgffilesold AS pgffilterpanels OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\common.h"
	ErasePage = .T.
	Name = "pgffiles"
	Pagefilterpanel1.Caption = "File Types"
	Pagefilterpanel1.Name = "Pagefilterpanel1"
	Pagefilterpanel2.Caption = "Folders"
	Pagefilterpanel2.Name = "Pagefilterpanel2"

ENDDEFINE

DEFINE CLASS pgffilterpanels AS pageframe 
 	*< CLASSDATA: Baseclass="pageframe" Timestamp="" Scale="Pixels" Uniqueid="" />

	#INCLUDE "..\common\common.h"
	*<DefinedPropArrayMethod>
		*p: _memberdata		&& XML Metadata for customizable properties
	*</DefinedPropArrayMethod>

	ActivePage = 1
	ErasePage = .T.
	Height = 169
	MemberClass = "pagefilterpanel"
	MemberClassLibrary = thor_proc_finder.vcx
	Name = "pgffilterpanels"
	PageCount = 2
	TabStyle = 1
	Width = 241
	_memberdata = <VFPData>
		<memberdata name="activepage" display="ActivePage"/>
		</VFPData>		&& XML Metadata for customizable properties
	Pagefilterpanel1.Label1.Name = "Label1"
	Pagefilterpanel1.Name = "Pagefilterpanel1"
	Pagefilterpanel2.Label1.Name = "Label1"
	Pagefilterpanel2.Name = "Pagefilterpanel2"

ENDDEFINE

DEFINE CLASS txtfinder AS textbox 
 	*< CLASSDATA: Baseclass="textbox" Timestamp="" Scale="Pixels" Uniqueid="" />

	Height = 23
	Name = "txtfinder"
	Width = 100

ENDDEFINE

DEFINE CLASS whereusedfinderengine AS finderengine OF "thor_proc_finder.vcx" 
 	*< CLASSDATA: Baseclass="custom" Timestamp="" Scale="Pixels" Uniqueid="" />

	*<DefinedPropArrayMethod>
		*m: createwhereused
		*m: findwhereusedmatches
		*p: clookforclass
	*</DefinedPropArrayMethod>

	clookforclass = 
	Name = "whereusedfinderengine"
	_memberdata = <VFPData>
		<memberdata name="clookforclass" display="cLookForClass"/>
		<memberdata name="createwhereused" display="CreateWhereUsed"/>
		<memberdata name="findwhereusedmatches" display="FindWhereUsedMatches"/>
		</VFPData>
	
	PROCEDURE createwhereused
		Lparameters lcDestAlias
		
		Local lcFileName
		This.FindWhereUsedMatches()
		
		* The matches to classes
		Select  crsr_AllClasses.*,														;
				crsr_Matches.Descendant													;
			From crsr_AllClasses														;
				Join crsr_Matches														;
					On Lower(crsr_AllClasses.Class) = crsr_Matches.Class				;
					And Lower(crsr_AllClasses.FullName) = crsr_Matches.FullName			;
			Into Cursor(lcDestAlias) Readwrite
		
		* A little more to do for forms
		Select crsr_Matches
		Scan For Empty(Class)
			lcFileName = Trim(FullName)
			Insert Into(lcDestAlias)(						;
				  FullName,									;
				  Folder,									;
				  FileName,									;
				  Size,										;
				  Timestamp,								;
				  BaseClass									;
				  )											;
				Values										;
				(											;
				  lcFileName,								;
				  Justpath(lcFileName),						;
				  Justfname(lcFileName),					;
				  Fsize(lcFileName),						;
				  This.GetFileTimeStamp(lcFileName),		;
				  'Form'									;
				  )
		Endscan
	ENDPROC

	PROCEDURE filesearch
		#Define ccDOUBLEAMPERSANDS '&' + '&'
		
		Lparameters lcFilename, lnSize
		
		Local laObjects[1], lcBaseClasas, lcBaseClass, lcClass, lcExt, lcParent, lcParentLoc, lcText
		Local lcValue, llClass, llSuccess, lnEndRange, lnI, lnStartRange, loMatch, loMatches, ltTimeStamp
		
		ltTimeStamp	= Datetime()
		lcExt		= Upper(Justext(lcFilename))
		
		Do Case
			Case lcExt = 'VCX' Or lcExt = 'SCX'
		
				llClass = lcExt = 'VCX'
				Select(Select('VCX'))
				Try
					Use(lcFilename) Shared Again Alias VCX
					llSuccess = .T.
				Catch to loException
					llSuccess = .F.
				Endtry
		
				If llSuccess
					Select  Distinct Lower(Padr(Class, 60))           As  Class,			;
							Lower(Padr(ClassLoc, 240))                As  ClassLoc,			;
							Lower(Padr(Getwordnum(Parent, 1, '.'), 60)) As objname,			;
							Lower(Padr(BaseClass, 20))                As  BaseClass			;
						From VCX															;
						Where Not(Deleted()													;
							  Or Empty(BaseClass)											;
							  Or Empty(ClassLoc)											;
							  Or Padr(Lower(Reserved1), 5) = 'class')						;
						Into Cursor VCXObjects
					Scan
						This.AddMatch(lcFilename, 0, ltTimeStamp, Iif(llClass, objname, ''), Class, ClassLoc, BaseClass)
					Endscan
		
					Use In VCXObjects
					Use In VCX
				Endif && llSuccess
		
		
		Endcase
		
		
	ENDPROC

	PROCEDURE findwhereusedmatches
		Local lnTally
		Select  Lower(Class)       As  Class,			;
				Lower(FullName)    As  FullName			;
			From crsr_Descendants						;
			Into Cursor crsr_Matches
		lnTally	 = _Tally
		
		Do While .T.
			Select  AllRefs.*												;
				From crsr_AllReferences    As  AllRefs						;
					Join crsr_Matches      As  Source						;
						On Lower(AllRefs.Parent) = Source.Class				;
						And Lower(AllRefs.ClassLoc) = Source.FullName		;
				Into Cursor crsr_New
		
			Select  Class,						;
					FullName					;
				From crsr_Matches				;
			Union								;
			Select  Distinct Lower(Class),		;
					Lower(FullName)				;
				From crsr_New					;
				Into Cursor crsr_Matches
		
			If lnTally = _Tally
				Exit
			Endif
		
			lnTally	 = _Tally
		
		Enddo && While .T.
		
		Select  crsr_Matches.*,															;
				Not Isnull(crsr_Descendants.Class)    As  Descendant					;
			From crsr_Matches															;
				Left Join crsr_Descendants													;
					On Lower(crsr_Matches.Class) = crsr_Descendants.Class				;
					And Lower(crsr_Matches.FullName) = crsr_Descendants.FullName		;
			Into Cursor crsr_Matches
		
	ENDPROC

ENDDEFINE
